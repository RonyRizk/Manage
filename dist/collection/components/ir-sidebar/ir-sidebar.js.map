{"version":3,"file":"ir-sidebar.js","sourceRoot":"","sources":["../../../src/components/ir-sidebar/ir-sidebar.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AAMhF,MAAM,OAAO,SAAS;;;gBAEa,OAAO;gBAEgB,KAAK;;EAI7D,gBAAgB;IACd,yCAAyC;IACzC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE;MACvC,IAAI,CAAC,CAAC,GAAG,KAAK,QAAQ,EAAE;QACtB,IAAI,CAAC,aAAa,EAAE,CAAC;OACtB;IACH,CAAC,CAAC,CAAC;EACL,CAAC;EAED,sEAAsE;EACtE,oBAAoB;IAClB,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;EACpD,CAAC;EAGD,KAAK,CAAC,aAAa;IACjB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvC,CAAC;EAED,MAAM;IACJ,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,SAAS,GAAG,QAAQ,CAAC;KACtB;SAAM;MACL,SAAS,GAAG,EAAE,CAAC;KAChB;IAED,OAAO;MACL,WACE,KAAK,EAAE,YAAY,SAAS,EAAE,EAC9B,OAAO,EAAE,GAAG,EAAE;UACZ,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,GACI;MACP,WAAK,KAAK,EAAE,WAAW,IAAI,CAAC,IAAI,IAAI,SAAS,EAAE;QAC7C,SACE,KAAK,EAAC,OAAO,EACb,OAAO,EAAE,GAAG,EAAE;YACZ,IAAI,CAAC,aAAa,EAAE,CAAC;UACvB,CAAC;UAED,eAAS,IAAI,EAAC,MAAM,GAAW,CAC7B;QACJ,eAAQ,CACJ;KACP,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, h, Method, Event, EventEmitter } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-sidebar',\r\n  styleUrl: 'ir-sidebar.css',\r\n})\r\nexport class IrSidebar {\r\n  @Prop() name: string;\r\n  @Prop() side: 'right' | 'left' = 'right';\r\n\r\n  @Prop({ mutable: true, reflect: true }) open: boolean = false;\r\n\r\n  @Event({ bubbles: true, composed: true }) irSidebarToggle: EventEmitter;\r\n\r\n  componentDidLoad() {\r\n    // If esc key is pressed, close the modal\r\n    document.addEventListener('keydown', e => {\r\n      if (e.key === 'Escape') {\r\n        this.toggleSidebar();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Unsubscribe to the event when the component is removed from the DOM\r\n  disconnectedCallback() {\r\n    document.removeEventListener('keydown', () => {});\r\n  }\r\n\r\n  @Method()\r\n  async toggleSidebar() {\r\n    this.irSidebarToggle.emit(this.open);\r\n  }\r\n\r\n  render() {\r\n    let className = '';\r\n    if (this.open) {\r\n      className = 'active';\r\n    } else {\r\n      className = '';\r\n    }\r\n\r\n    return [\r\n      <div\r\n        class={`backdrop ${className}`}\r\n        onClick={() => {\r\n          this.toggleSidebar();\r\n        }}\r\n      ></div>,\r\n      <div class={`sidebar-${this.side} ${className}`}>\r\n        <a\r\n          class=\"close\"\r\n          onClick={() => {\r\n            this.toggleSidebar();\r\n          }}\r\n        >\r\n          <ir-icon icon=\"ft-x\"></ir-icon>\r\n        </a>\r\n        <slot />\r\n      </div>,\r\n    ];\r\n  }\r\n}\r\n"]}