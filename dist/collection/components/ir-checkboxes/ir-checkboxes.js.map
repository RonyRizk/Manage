{"version":3,"file":"ir-checkboxes.js","sourceRoot":"","sources":["../../../src/components/ir-checkboxes/ir-checkboxes.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AAMhF,MAAM,OAAO,YAAY;;IAEvB,sBAAiB,GAAiB,EAAE,CAAC;sBADF,EAAE;;EAMrC,oBAAoB,CAAC,KAAK;IACxB,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE;MACxB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KAC3E;SAAM;MACL,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAChH;IACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;EACrD,CAAC;EAED,iBAAiB;IACf,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC9E,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;MACrC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;KACpD;EACH,CAAC;EAED,MAAM;IACJ,OAAO,CACL,eACG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,CAAC,CACxC,mBAAa,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,IAAI,KAAK,GAAgB,CACrI,CAAC,CACE,CACP,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Listen, Prop, h, Event, EventEmitter } from '@stencil/core';\r\nimport { checkboxes } from '../../common/models';\r\n\r\n@Component({\r\n  tag: 'ir-checkboxes',\r\n})\r\nexport class IrCheckBoxes {\r\n  @Prop() checkboxes: checkboxes[] = [];\r\n  checkedCheckboxes: checkboxes[] = [];\r\n\r\n  @Event({ bubbles: true, composed: true }) checkboxesChange: EventEmitter<checkboxes[]>;\r\n\r\n  @Listen('checkboxChange')\r\n  handleCheckboxChange(event) {\r\n    if (event.detail.checked) {\r\n      this.checkedCheckboxes.push(this.checkboxes[parseInt(event.detail.name)]);\r\n    } else {\r\n      this.checkedCheckboxes.splice(this.checkedCheckboxes.indexOf(this.checkboxes[parseInt(event.detail.name)]), 1);\r\n    }\r\n    this.checkboxesChange.emit(this.checkedCheckboxes);\r\n  }\r\n\r\n  componentWillLoad() {\r\n    this.checkedCheckboxes = this.checkboxes.filter(checkbox => checkbox.checked);\r\n    if (this.checkedCheckboxes.length > 0) {\r\n      this.checkboxesChange.emit(this.checkedCheckboxes);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.checkboxes.map((checkbox, index) => (\r\n          <ir-checkbox name={index.toString()} label={checkbox.text} value={checkbox.value} checked={checkbox.checked || false}></ir-checkbox>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}