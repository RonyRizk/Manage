{"version":3,"file":"igl-book-property.service.js","sourceRoot":"","sources":["../../../../src/components/igloo-calendar/igl-book-property/igl-book-property.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { BookUserParams } from '../../../models/igl-book-property';\r\n\r\nexport class IglBookPropertyService {\r\n  public onDataRoomUpdate(event: CustomEvent, selectedUnits: Map<string, Map<string, any>>, isEditBooking: boolean, name: string, pr_id: string, bookingData) {\r\n    let units = selectedUnits;\r\n    const { data, key, changedKey } = event.detail;\r\n    const roomCategoryKey = `c_${data.roomCategoryId}`;\r\n    const ratePlanKey = `p_${data.ratePlanId}`;\r\n\r\n    if (this.shouldClearData(key)) {\r\n      units = new Map();\r\n    }\r\n\r\n    this.initializeRoomCategoryIfNeeded(roomCategoryKey, units);\r\n\r\n    if (isEditBooking) {\r\n      if (changedKey === 'rate') {\r\n        if (units.has(roomCategoryKey) && units.get(roomCategoryKey).has(ratePlanKey)) {\r\n          this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, pr_id, bookingData);\r\n        }\r\n      } else {\r\n        if (changedKey !== 'rateType') {\r\n          if (changedKey === 'adult_child_offering') {\r\n            if (units.has(roomCategoryKey) && selectedUnits.get(roomCategoryKey).has(ratePlanKey)) {\r\n              this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, pr_id, bookingData);\r\n            }\r\n          } else {\r\n            this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, pr_id, bookingData);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this.setSelectedRoomData(roomCategoryKey, ratePlanKey, data, units);\r\n    }\r\n    this.cleanupEmptyData(roomCategoryKey, units);\r\n    return units;\r\n  }\r\n\r\n  private shouldClearData(key: string | undefined): boolean {\r\n    return key === 'clearData' || key === 'EDIT_BOOKING';\r\n  }\r\n\r\n  private initializeRoomCategoryIfNeeded(roomCategoryKey: string, selectedUnits: Map<string, Map<string, any>>) {\r\n    if (!selectedUnits.has(roomCategoryKey)) {\r\n      selectedUnits.set(roomCategoryKey, new Map());\r\n    }\r\n  }\r\n  private getRoomsListFromCategoryId(bookingData, categoryId, pr_id) {\r\n    let category = bookingData.roomsInfo?.find(category => category.id === +categoryId);\r\n\r\n    if (category) {\r\n      return category.physicalrooms.find(room => room.id === +pr_id);\r\n    }\r\n  }\r\n  private setSelectedRoomData(roomCategoryKey: string, ratePlanKey: string, data: any, selectedUnits: Map<string, Map<string, any>>) {\r\n    let selectedRatePlans = selectedUnits.get(roomCategoryKey);\r\n    if (data.totalRooms === 0) {\r\n      selectedRatePlans.delete(ratePlanKey);\r\n    } else {\r\n      selectedUnits.set(roomCategoryKey, selectedRatePlans.set(ratePlanKey, { ...data, selectedUnits: Array(data.totalRooms).fill(-1) }));\r\n    }\r\n  }\r\n\r\n  private cleanupEmptyData(roomCategoryKey: string, selectedUnits: Map<string, Map<string, any>>) {\r\n    if (selectedUnits.has(roomCategoryKey)) {\r\n      let selectedRatePlans = selectedUnits.get(roomCategoryKey);\r\n      if (selectedRatePlans.size === 0) {\r\n        selectedUnits.delete(roomCategoryKey);\r\n      }\r\n    }\r\n  }\r\n\r\n  private applyBookingEditToSelectedRoom(\r\n    roomCategoryKey: string,\r\n    ratePlanKey: string,\r\n    data,\r\n    selectedUnits: Map<string, Map<string, any>>,\r\n    name: string,\r\n    pr_id: string,\r\n    bookingData,\r\n  ) {\r\n    selectedUnits.clear();\r\n    const selectedRoom = this.getRoomsListFromCategoryId(bookingData, roomCategoryKey.substring(2, roomCategoryKey.length), pr_id);\r\n    if (selectedRoom) {\r\n      data.physicalRooms.push(selectedRoom);\r\n    }\r\n    selectedUnits.set(roomCategoryKey, new Map().set(ratePlanKey, { ...data, guestName: name, roomId: selectedRoom?pr_id:\"\" }));\r\n  }\r\n  prepareBookUserServiceParams(context, check_in): BookUserParams {\r\n    const arrivalTime = context.isEventType('EDIT_BOOKING') ? context.getArrivalTimeForBooking() : '';\r\n    const pr_id = context.isEventType('BAR_BOOKING') ? context.bookingData.PR_ID : undefined;\r\n    const bookingNumber = context.isEventType('EDIT_BOOKING') ? context.bookingData.BOOKING_NUMBER : undefined;\r\n\r\n    return [\r\n      context.bookedByInfoData,\r\n      check_in,\r\n      context.bookingData.defaultDateRange.fromDate,\r\n      context.bookingData.defaultDateRange.toDate,\r\n      context.guestData,\r\n      context.dateRangeData.dateDifference,\r\n      context.sourceOption,\r\n      context.propertyid,\r\n      context.currency,\r\n      bookingNumber,\r\n      context.bookingData.GUEST,\r\n      arrivalTime,\r\n      pr_id,\r\n    ];\r\n  }\r\n  private getBookingPreferenceRoomId(bookingData) {\r\n    return (bookingData.hasOwnProperty('PR_ID') && bookingData.PR_ID) || null;\r\n  }\r\n  private getRoomCategoryByRoomId(roomId, bookingData) {\r\n    return bookingData.roomsInfo?.find(roomCategory => {\r\n      return roomCategory.physicalrooms.find(room => room.id === +roomId);\r\n    });\r\n  }\r\n  public setEditingRoomInfo(bookingData, selectedUnits) {\r\n    const category = this.getRoomCategoryByRoomId(this.getBookingPreferenceRoomId(bookingData), bookingData);\r\n    const room_id = `c_${category.id}`;\r\n    const ratePlanId = `p_${bookingData.RATE_PLAN_ID}`;\r\n    const data = {\r\n      adultCount: bookingData.ADULTS_COUNT,\r\n      rate: bookingData.RATE,\r\n      rateType: bookingData.RATE_TYPE,\r\n      ratePlanId: bookingData.RATE_PLAN_ID,\r\n      roomCategoryId: category.id,\r\n      roomCategoryName: category.name,\r\n      totalRooms: 1,\r\n      ratePlanName: bookingData.RATE_PLAN,\r\n      roomId: bookingData.PR_ID,\r\n      guestName: bookingData.NAME,\r\n      cancelation: bookingData.cancelation,\r\n      guarantee: bookingData.guarantee,\r\n      adult_child_offering: bookingData.adult_child_offering,\r\n    };\r\n    selectedUnits.set(room_id, new Map().set(ratePlanId, data));\r\n  }\r\n}\r\n"]}