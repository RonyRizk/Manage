{"version":3,"file":"igl-book-property.service.js","sourceRoot":"","sources":["../../../../src/components/igloo-calendar/igl-book-property/igl-book-property.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { BookUserParams } from '../../../models/igl-book-property';\r\n//import { BookingService } from '../../../services/booking.service';\r\n\r\nexport class IglBookPropertyService {\r\n  public setBookingInfoFromAutoComplete(context, res) {\r\n    context.bookedByInfoData = {\r\n      id: res.guest.id,\r\n      email: res.guest.email,\r\n      firstName: res.guest.first_name,\r\n      lastName: res.guest.last_name,\r\n      countryId: res.guest.country_id,\r\n      isdCode: res.guest.country_id.toString(),\r\n      contactNumber: res.guest.mobile,\r\n      selectedArrivalTime: res.arrival,\r\n      emailGuest: res.guest.subscribe_to_news_letter,\r\n      message: res.remark,\r\n      cardNumber: '',\r\n      cardHolderName: '',\r\n      expiryMonth: '',\r\n      expiryYear: '',\r\n      bookingNumber: res.booking_nbr,\r\n      rooms: res.rooms,\r\n      from_date: res.from_date,\r\n      to_date: res.to_date,\r\n    };\r\n  }\r\n\r\n  public resetRoomsInfoAndMessage(context) {\r\n    context.defaultData.roomsInfo = [];\r\n    context.message = '';\r\n  }\r\n\r\n  public onDataRoomUpdate(event: CustomEvent, selectedUnits: Map<string, Map<string, any>>, isEdit: boolean, isEditBooking: boolean, name: string) {\r\n    let units = selectedUnits;\r\n    const { data, key, changedKey } = event.detail;\r\n    const roomCategoryKey = `c_${data.roomCategoryId}`;\r\n    const ratePlanKey = `p_${data.ratePlanId}`;\r\n\r\n    if (this.shouldClearData(key)) {\r\n      units = new Map();\r\n    }\r\n\r\n    this.initializeRoomCategoryIfNeeded(roomCategoryKey, units);\r\n\r\n    if (isEditBooking) {\r\n      if (changedKey === 'rate') {\r\n        if (units.has(roomCategoryKey) && units.get(roomCategoryKey).has(ratePlanKey)) {\r\n          this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, isEdit);\r\n        }\r\n      } else {\r\n        if (changedKey !== 'rateType') {\r\n          if (changedKey === 'adult_child_offering') {\r\n            if (units.has(roomCategoryKey) && selectedUnits.get(roomCategoryKey).has(ratePlanKey)) {\r\n              this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, isEdit);\r\n            }\r\n          } else {\r\n            this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, isEdit);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this.setSelectedRoomData(roomCategoryKey, ratePlanKey, data, units);\r\n    }\r\n    this.cleanupEmptyData(roomCategoryKey, units);\r\n    return units;\r\n  }\r\n\r\n  private shouldClearData(key: string | undefined): boolean {\r\n    return key === 'clearData' || key === 'EDIT_BOOKING';\r\n  }\r\n\r\n  private initializeRoomCategoryIfNeeded(roomCategoryKey: string, selectedUnits: Map<string, Map<string, any>>) {\r\n    if (!selectedUnits.has(roomCategoryKey)) {\r\n      selectedUnits.set(roomCategoryKey, new Map());\r\n    }\r\n  }\r\n  private setSelectedRoomData(roomCategoryKey: string, ratePlanKey: string, data: any, selectedUnits: Map<string, Map<string, any>>) {\r\n    let selectedRatePlans = selectedUnits.get(roomCategoryKey);\r\n    if (data.totalRooms === 0 || data.inventory === 0) {\r\n      selectedRatePlans.delete(ratePlanKey);\r\n    } else {\r\n      selectedUnits.set(roomCategoryKey, selectedRatePlans.set(ratePlanKey, { ...data, selectedUnits: Array(data.totalRooms).fill(-1) }));\r\n    }\r\n  }\r\n\r\n  private cleanupEmptyData(roomCategoryKey: string, selectedUnits: Map<string, Map<string, any>>) {\r\n    if (selectedUnits.has(roomCategoryKey)) {\r\n      let selectedRatePlans = selectedUnits.get(roomCategoryKey);\r\n      if (selectedRatePlans.size === 0) {\r\n        selectedUnits.delete(roomCategoryKey);\r\n      }\r\n    }\r\n  }\r\n  private applyBookingEditToSelectedRoom(roomCategoryKey: string, ratePlanKey: string, data, selectedUnits: Map<string, Map<string, any>>, name: string, isEdit: boolean) {\r\n    selectedUnits.clear();\r\n    let res = {};\r\n    if (isEdit) {\r\n      res = { ...data, guestName: name || '', roomId: '' };\r\n    } else {\r\n      res = { ...data };\r\n    }\r\n    selectedUnits.set(roomCategoryKey, new Map().set(ratePlanKey, res));\r\n  }\r\n  async prepareBookUserServiceParams(context, check_in, sourceOption): Promise<BookUserParams> {\r\n    try {\r\n      const arrivalTime = context.isEventType('EDIT_BOOKING')\r\n        ? context.getArrivalTimeForBooking()\r\n        : context.isEventType('ADD_ROOM')\r\n        ? context.bookingData.ARRIVAL.code\r\n        : context.isEventType('SPLIT_BOOKING')\r\n        ? context.bookedByInfoData.selectedArrivalTime.code\r\n        : '';\r\n      const pr_id = context.isEventType('BAR_BOOKING') ? context.bookingData.PR_ID : undefined;\r\n      const bookingNumber =\r\n        context.isEventType('EDIT_BOOKING') || context.isEventType('ADD_ROOM')\r\n          ? context.bookingData.BOOKING_NUMBER\r\n          : context.isEventType('SPLIT_BOOKING')\r\n          ? context.bookedByInfoData.bookingNumber\r\n          : undefined;\r\n      let rooms = [];\r\n      if (context.isEventType('ADD_ROOM')) {\r\n        // const result = await (context.bookingService as BookingService).getExoposedBooking(bookingNumber, context.language);\r\n        //rooms = result.rooms;\r\n        rooms = context.bookingData.ROOMS;\r\n      } else if (context.isEventType('SPLIT_BOOKING')) {\r\n        rooms = context.bookedByInfoData.rooms;\r\n      } else if (context.isEventType('EDIT_BOOKING')) {\r\n        rooms = context.defaultData.ROOMS.filter(room => room.identifier !== context.bookingData.IDENTIFIER);\r\n      }\r\n      console.log('rooms', rooms);\r\n\r\n      return [\r\n        context.bookedByInfoData,\r\n        check_in,\r\n        new Date(context.dateRangeData.fromDate),\r\n        new Date(context.dateRangeData.toDate),\r\n        context.guestData,\r\n        context.dateRangeData.dateDifference,\r\n        sourceOption,\r\n        context.propertyid,\r\n        rooms,\r\n        context.currency,\r\n        bookingNumber,\r\n        context.bookingData.GUEST,\r\n        arrivalTime,\r\n        pr_id,\r\n        context.bookingData.IDENTIFIER,\r\n      ];\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  private getBookingPreferenceRoomId(bookingData) {\r\n    return (bookingData.hasOwnProperty('PR_ID') && bookingData.PR_ID) || null;\r\n  }\r\n  private getRoomCategoryByRoomId(roomId, bookingData) {\r\n    return bookingData.roomsInfo?.find(roomCategory => {\r\n      return roomCategory.physicalrooms.find(room => room.id === +roomId);\r\n    });\r\n  }\r\n  public setEditingRoomInfo(bookingData, selectedUnits) {\r\n    const category = this.getRoomCategoryByRoomId(this.getBookingPreferenceRoomId(bookingData), bookingData);\r\n    const room_id = `c_${category.id}`;\r\n    const ratePlanId = `p_${bookingData.RATE_PLAN_ID}`;\r\n    const data = {\r\n      adultCount: bookingData.ADULTS_COUNT,\r\n      rate: bookingData.RATE,\r\n      rateType: bookingData.RATE_TYPE,\r\n      ratePlanId: bookingData.RATE_PLAN_ID,\r\n      roomCategoryId: category.id,\r\n      roomCategoryName: category.name,\r\n      totalRooms: 1,\r\n      ratePlanName: bookingData.RATE_PLAN,\r\n      roomId: bookingData.PR_ID,\r\n      guestName: bookingData.NAME,\r\n      cancelation: bookingData.cancelation,\r\n      guarantee: bookingData.guarantee,\r\n      adult_child_offering: bookingData.adult_child_offering,\r\n    };\r\n    selectedUnits.set(room_id, new Map().set(ratePlanId, data));\r\n  }\r\n}\r\n"]}