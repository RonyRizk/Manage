{"version":3,"file":"pickup.service.js","sourceRoot":"","sources":["../../../../src/components/ir-booking-details/ir-pickup/pickup.service.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,aAAa,MAAM,wBAAwB,CAAC;AAEnD,MAAM,OAAO,aAAa;EAExB;IACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC3D,CAAC;EACM,KAAK,CAAC,UAAU,CAAC,MAAmB,EAAE,WAAmB;IAC9D,IAAI;MACF,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;MACjD,MAAM,KAAK,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,KAAK,EAAE,EAAE;QAClD,WAAW;QACX,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,IAAI,EAAE,MAAM,CAAC,YAAY;QACzB,OAAO,EAAE,MAAM,CAAC,cAAc;QAC9B,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;QAClB,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;QACpB,YAAY,EAAE,MAAM,CAAC,kBAAkB;QACvC,eAAe,EAAE,MAAM,CAAC,eAAe;QACvC,KAAK,EAAE,MAAM,CAAC,gBAAgB;OAC/B,CAAC,CAAC;KACJ;IAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACpB;EACH,CAAC;EACM,YAAY,CAAC,MAAmB;IACrC,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;MAC/C,OAAO;QACL,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,cAAc;OACtB,CAAC;KACH;IACD,IAAI,MAAM,CAAC,cAAc,KAAK,EAAE,EAAE;MAChC,OAAO;QACL,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,gBAAgB;OACxB,CAAC;KACH;IACD,IAAI,MAAM,CAAC,iBAAiB,KAAK,EAAE,EAAE;MACnC,OAAO;QACL,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,mBAAmB;OAC3B,CAAC;KACH;IACD,IAAI,MAAM,CAAC,kBAAkB,KAAK,CAAC,EAAE;MACnC,OAAO;QACL,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,oBAAoB;OAC5B,CAAC;KACH;IACD,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;EAC1B,CAAC;EACD,gDAAgD;EAChD,uHAAuH;EACvH,+BAA+B;EAC/B,mBAAmB;EACnB,MAAM;EACN,2CAA2C;EAC3C,IAAI;EACG,SAAS,CAAC,MAAkB;IACjC,MAAM,kBAAkB,GAAG,aAAa,CAAC,cAAc,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC;IACzH,IAAI,CAAC,kBAAkB,EAAE;MACvB,OAAO;KACR;IACD,IAAI,kBAAkB,CAAC,WAAW,KAAK,QAAQ,EAAE;MAC/C,OAAO,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC;KAC/C;SAAM;MACL,OAAO,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,kBAAkB,CAAC;KAClD;EACH,CAAC;EACM,mBAAmB,KAAI,CAAC;CAChC","sourcesContent":["import axios from 'axios';\r\nimport { TDueParams, TPickupData } from './types';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport class PickupService {\r\n  token: string | null;\r\n  constructor() {\r\n    this.token = JSON.parse(sessionStorage.getItem('token'));\r\n  }\r\n  public async savePickup(params: TPickupData, booking_nbr: string) {\r\n    try {\r\n      const splitTime = params.arrival_time.split(':');\r\n      await axios.post(`/Do_Pickup?Ticket=${this.token}`, {\r\n        booking_nbr,\r\n        is_remove: false,\r\n        currency: params.currency,\r\n        date: params.arrival_date,\r\n        details: params.flight_details,\r\n        hour: splitTime[0],\r\n        minute: splitTime[1],\r\n        nbr_of_units: params.number_of_vehicles,\r\n        selected_option: params.selected_option,\r\n        total: params.due_upon_booking,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  public validateForm(params: TPickupData): { error: boolean; cause?: keyof TPickupData } {\r\n    if (params.arrival_time.split(':').length !== 2) {\r\n      return {\r\n        error: true,\r\n        cause: 'arrival_time',\r\n      };\r\n    }\r\n    if (params.flight_details === '') {\r\n      return {\r\n        error: true,\r\n        cause: 'flight_details',\r\n      };\r\n    }\r\n    if (params.vehicle_type_code === '') {\r\n      return {\r\n        error: true,\r\n        cause: 'vehicle_type_code',\r\n      };\r\n    }\r\n    if (params.number_of_vehicles === 0) {\r\n      return {\r\n        error: true,\r\n        cause: 'number_of_vehicles',\r\n      };\r\n    }\r\n    return { error: false };\r\n  }\r\n  // private getPickUpPersonStatus(code: string) {\r\n  //   const getCodeDescription = calendar_data.pickup_service.allowed_pricing_models.find(model => model.code === code);\r\n  //   if (!getCodeDescription) {\r\n  //     return null;\r\n  //   }\r\n  //   return getCodeDescription.description;\r\n  // }\r\n  public updateDue(params: TDueParams) {\r\n    const getCodeDescription = calendar_data.pickup_service.allowed_pricing_models.find(model => model.code === params.code);\r\n    if (!getCodeDescription) {\r\n      return;\r\n    }\r\n    if (getCodeDescription.description === 'Person') {\r\n      return params.amount * params.numberOfPersons;\r\n    } else {\r\n      return params.amount * params.number_of_vehicles;\r\n    }\r\n  }\r\n  public getNumberOfVehicles() {}\r\n}\r\n"]}