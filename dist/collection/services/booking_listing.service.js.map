{"version":3,"file":"booking_listing.service.js","sourceRoot":"","sources":["../../src/services/booking_listing.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AACvC,OAAO,eAAe,EAAE,EAAyB,uBAAuB,EAAE,MAAM,gCAAgC,CAAC;AACjH,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,MAAM,OAAO,qBAAsB,SAAQ,KAAK;EACvC,KAAK,CAAC,0BAA0B,CAAC,WAAmB;IACzD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC9B,IAAI,CAAC,KAAK,EAAE;MACV,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;KAClC;IACD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,yCAAyC,KAAK,EAAE,EAAE;MAClF,WAAW;KACZ,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;IAE9B,eAAe,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC3C,eAAe,CAAC,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC;IAC/D,eAAe,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC3C,eAAe,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IACrC,uBAAuB,EAAE,CAAC;EAC5B,CAAC;EAEM,KAAK,CAAC,kBAAkB,CAAC,MAA6B;IAC3D,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC9B,IAAI,CAAC,KAAK,EAAE;MACV,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;KAClC;IACD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,gCAAgC,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;IACnF,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;IAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,8BAA8B,CAAC;IACnD,eAAe,CAAC,QAAQ,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;IACvC,eAAe,CAAC,aAAa,mCACxB,eAAe,CAAC,aAAa,KAChC,WAAW,EAAE,MAAM,CAAC,WAAW,GAChC,CAAC;IACF,eAAe,CAAC,YAAY,GAAG,MAAM,CAAC,iBAAiB,CAAC;EAC1D,CAAC;EACM,KAAK,CAAC,oBAAoB,CAAC,WAAmB,EAAE,aAAsB;IAC3E,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC9B,IAAI,CAAC,KAAK,EAAE;MACV,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;KAClC;IACD,MAAM,KAAK,CAAC,IAAI,CAAC,kCAAkC,KAAK,EAAE,EAAE;MAC1D,WAAW;MACX,aAAa;KACd,CAAC,CAAC;EACL,CAAC;CACF","sourcesContent":["import { Token } from '@/models/Token';\r\nimport booking_listing, { IUserListingSelection, initializeUserSelection } from '@/stores/booking_listing.store';\r\nimport axios from 'axios';\r\n\r\nexport class BookingListingService extends Token {\r\n  public async getExposedBookingsCriteria(property_id: number) {\r\n    const token = this.getToken();\r\n    if (!token) {\r\n      throw new Error('Invalid token');\r\n    }\r\n    const { data } = await axios.post(`/Get_Exposed_Bookings_Criteria?Ticket=${token}`, {\r\n      property_id,\r\n    });\r\n\r\n    const result = data.My_Result;\r\n\r\n    booking_listing.channels = result.channels;\r\n    booking_listing.settlement_methods = result.settlement_methods;\r\n    booking_listing.statuses = result.statuses;\r\n    booking_listing.types = result.types;\r\n    initializeUserSelection();\r\n  }\r\n\r\n  public async getExposedBookings(params: IUserListingSelection) {\r\n    const token = this.getToken();\r\n    if (!token) {\r\n      throw new Error('Invalid token');\r\n    }\r\n    const { data } = await axios.post(`/Get_Exposed_Bookings?Ticket=${token}`, params);\r\n    const result = data.My_Result;\r\n    const header = data.My_Params_Get_Exposed_Bookings;\r\n    booking_listing.bookings = [...result];\r\n    booking_listing.userSelection = {\r\n      ...booking_listing.userSelection,\r\n      total_count: header.total_count,\r\n    };\r\n    booking_listing.download_url = header.exported_data_url;\r\n  }\r\n  public async removeExposedBooking(booking_nbr: string, is_to_revover: boolean) {\r\n    const token = this.getToken();\r\n    if (!token) {\r\n      throw new Error('Invalid token');\r\n    }\r\n    await axios.post(`/Remove_Exposed_Booking?Ticket=${token}`, {\r\n      booking_nbr,\r\n      is_to_revover,\r\n    });\r\n  }\r\n}\r\n"]}