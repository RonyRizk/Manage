{"version":3,"file":"toBeAssigned.service.js","sourceRoot":"","sources":["../../src/services/toBeAssigned.service.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  IAvailableRoom,\r\n  IRoomCategory,\r\n  IUnassignedDates,\r\n  InnerRecord,\r\n} from \"../models/tobeassigned\";\r\nimport { dateDifference, dateToFormattedString } from \"../utils/utils\";\r\n\r\nexport class ToBeAssignedService {\r\n  public async getUnassignedDates(\r\n    propertyid: number,\r\n    from_date: string,\r\n    to_date: string\r\n  ) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token) {\r\n        const { data } = await axios.post(\r\n          `/Get_UnAssigned_Dates?Ticket=${token}`,\r\n          {\r\n            propertyid,\r\n            from_date,\r\n            to_date,\r\n          }\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return this.convertUnassignedDates(data.My_Result);\r\n      } else {\r\n        throw new Error(\"Invalid Token\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUnassignedRooms(\r\n    propertyid: number,\r\n    specific_date: string,\r\n    roomInfo: any,\r\n    formattedLegendData: any\r\n  ) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token) {\r\n        const { data } = await axios.post(\r\n          `/Get_Aggregated_UnAssigned_Rooms?Ticket=${token}`,\r\n          {\r\n            propertyid,\r\n            specific_date,\r\n          }\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return this.transformToAssignable(data, roomInfo, formattedLegendData);\r\n      } else {\r\n        throw new Error(\"Invalid Token\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async assignUnit(\r\n    booking_nbr: string,\r\n    identifier: string,\r\n    pr_id: number\r\n  ) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token) {\r\n        const { data } = await axios.post(\r\n          `/Assign_Exposed_Room?Ticket=${token}`,\r\n          {\r\n            booking_nbr,\r\n            identifier,\r\n            pr_id,\r\n          }\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data;\r\n      } else {\r\n        throw new Error(\"Invalid token\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  private cleanSpacesAndSpecialChars(str: string) {\r\n    const regex = /[^a-zA-Z0-9]+/g;\r\n    return str.replace(regex, \"\");\r\n  }\r\n\r\n  private transformToAssignable(\r\n    data: any,\r\n    roomInfo,\r\n    formattedLegendData\r\n  ): IRoomCategory[] {\r\n    const result: IRoomCategory[] = [];\r\n    data.My_Result.forEach((customer: any) => {\r\n      customer.unassigned_rooms.forEach((room: any) => {\r\n        let roomCategory: IRoomCategory = {\r\n          roomTypeName: room.room_type_name,\r\n          ID: room.identifier,\r\n          NAME: room.guest_name,\r\n          identifier: room.identifier,\r\n          FROM_DATE: room.unassigned_date,\r\n          TO_DATE: room.unassigned_date,\r\n          BOOKING_NUMBER: room.book_nbr,\r\n          STATUS: \"IN-HOUSE\",\r\n          defaultDateRange: {\r\n            fromDate: undefined,\r\n            toDate: undefined,\r\n            fromDateTimeStamp: 0,\r\n            toDateTimeStamp: 0,\r\n            fromDateStr: \"\",\r\n            toDateStr: \"\",\r\n            dateDifference: 0,\r\n          },\r\n          NO_OF_DAYS: 1,\r\n          roomsInfo: roomInfo,\r\n          legendData: formattedLegendData,\r\n          availableRooms: [],\r\n          RT_ID: this.getRoomTypeId(room.room_type_name, roomInfo),\r\n        };\r\n        this.updateAvailableRooms(\r\n          room,\r\n          roomCategory,\r\n          formattedLegendData,\r\n          roomInfo\r\n        );\r\n        this.addDefaultDateRange(roomCategory);\r\n        result.push(roomCategory);\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n  addDefaultDateRange(roomCategory: IRoomCategory) {\r\n    roomCategory.defaultDateRange.fromDate = new Date(\r\n      roomCategory.FROM_DATE + \"T00:00:00\"\r\n    );\r\n    roomCategory.defaultDateRange.fromDateStr = dateToFormattedString(\r\n      roomCategory.defaultDateRange.fromDate\r\n    );\r\n    roomCategory.defaultDateRange.fromDateTimeStamp =\r\n      roomCategory.defaultDateRange.fromDate.getTime();\r\n\r\n    roomCategory.defaultDateRange.toDate = new Date(\r\n      roomCategory.TO_DATE + \"T00:00:00\"\r\n    );\r\n    roomCategory.defaultDateRange.toDateStr = dateToFormattedString(\r\n      roomCategory.defaultDateRange.toDate\r\n    );\r\n    roomCategory.defaultDateRange.toDateTimeStamp =\r\n      roomCategory.defaultDateRange.toDate.getTime();\r\n\r\n    roomCategory.defaultDateRange.dateDifference = roomCategory.NO_OF_DAYS;\r\n  }\r\n  private getRoomTypeId(roomName: string, roomInfo: any) {\r\n    return (\r\n      roomInfo.find(\r\n        (room) =>\r\n          this.cleanSpacesAndSpecialChars(room.name) ===\r\n          this.cleanSpacesAndSpecialChars(roomName)\r\n      ).id || null\r\n    );\r\n  }\r\n  private updateAvailableRooms(\r\n    room: any,\r\n    roomCategory: IRoomCategory,\r\n    formattedLegendData,\r\n    roomsInfo\r\n  ): void {\r\n    const rooms: IAvailableRoom[] = [];\r\n    room.assignable_units.forEach((unit: any) => {\r\n      if (unit.Is_Fully_Available && !unit.Is_Not_Available) {\r\n        const days = dateDifference(unit.from_date, unit.to_date);\r\n        rooms.push({\r\n          RT_ID: roomCategory.RT_ID,\r\n          STATUS: \"PENDING-CONFIRMATION\",\r\n          FROM_DATE: unit.from_date,\r\n          roomName: unit.name,\r\n          PR_ID: unit.pr_id,\r\n          TO_DATE: unit.to_date,\r\n          NO_OF_DAYS: days,\r\n          ID: \"NEW_TEMP_EVENT\",\r\n          NAME: \"\",\r\n          NOTES: \"\",\r\n          BALANCE: \"\",\r\n          INTERNAL_NOTE: \"\",\r\n          hideBubble: true,\r\n          legendData: formattedLegendData,\r\n          roomsInfo,\r\n        });\r\n        roomCategory.TO_DATE = unit.to_date;\r\n        roomCategory.NO_OF_DAYS = days;\r\n      }\r\n    });\r\n    roomCategory.availableRooms = rooms;\r\n  }\r\n\r\n  private convertUnassignedDates(\r\n    dates: IUnassignedDates[]\r\n  ): Record<number, InnerRecord> {\r\n    let convertedDates: Record<number, InnerRecord> = {};\r\n    dates.forEach((date) => {\r\n      convertedDates[new Date(date.date).getTime()] = {\r\n        categories: {},\r\n        dateStr: date.description,\r\n      };\r\n    });\r\n    return convertedDates;\r\n  }\r\n}\r\n"]}