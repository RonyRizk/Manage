{"version":3,"names":["appendToMap","map","propName","value","items","get","set","includes","push","debounce","fn","ms","timeoutId","args","clearTimeout","setTimeout","isConnected","maybeElement","cleanupElements","key","keys","filter","stencilSubscription","getRenderingRef","elmsToUpdate","Map","dispose","clear","elm","elements","forceUpdate","reset","forEach","elms","unwrap","val","createObservableMap","defaultState","shouldUpdate","a","b","unwrappedState","states","Object","entries","handlers","_a","cb","oldValue","state","Proxy","_","ownKeys","Array","from","getOwnPropertyDescriptor","enumerable","configurable","has","on","eventName","callback","removeFromArray","onChange","unSet","newValue","unReset","use","subscriptions","unsubs","reduce","subscription","unsub","array","item","index","indexOf","length","createStore","initialState","direction","locales","onCalendarDatesChange","convertDateToCustomFormat","dayWithWeekday","monthWithYear","dateStr","split","date","moment","isValid","Error","format","convertDateToTime","months","day","month","year","monthIndex","Date","setHours","getTime","dateDifference","FROM_DATE","TO_DATE","startDate","endDate","Math","ceil","dateToFormattedString","getFullYear","getMonth","toString","padStart","getDate","formatLegendColors","legendData","formattedLegendData","statusId","id","clsName","CONFIRMED","BLOCKED","NOTES","legend","isBlockUnit","status_code","getCurrencySymbol","currencyCode","formatter","Intl","NumberFormat","undefined","style","currency","minimumFractionDigits","maximumFractionDigits","replace","trim","findCountry","countries","find","country","getReleaseHoursString","releaseDate","dt","releaseAfterHours","getHours","getMinutes","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","computeEndDate","numberOfDays","dateObj","add","convertDMYToISO","addTwoMonthToDate","formatDate","dateString","option","formattedDate","getNextDay","convertDatePrice","getDaysArray","date1","date2","dates","start","min","end","max","clone"],"sources":["node_modules/@stencil/store/dist/index.mjs","src/stores/locales.store.ts","src/utils/utils.ts"],"sourcesContent":["import { getRenderingRef, forceUpdate } from '@stencil/core';\n\nconst appendToMap = (map, propName, value) => {\n    const items = map.get(propName);\n    if (!items) {\n        map.set(propName, [value]);\n    }\n    else if (!items.includes(value)) {\n        items.push(value);\n    }\n};\nconst debounce = (fn, ms) => {\n    let timeoutId;\n    return (...args) => {\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(() => {\n            timeoutId = 0;\n            fn(...args);\n        }, ms);\n    };\n};\n\n/**\n * Check if a possible element isConnected.\n * The property might not be there, so we check for it.\n *\n * We want it to return true if isConnected is not a property,\n * otherwise we would remove these elements and would not update.\n *\n * Better leak in Edge than to be useless.\n */\nconst isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;\nconst cleanupElements = debounce((map) => {\n    for (let key of map.keys()) {\n        map.set(key, map.get(key).filter(isConnected));\n    }\n}, 2000);\nconst stencilSubscription = () => {\n    if (typeof getRenderingRef !== 'function') {\n        // If we are not in a stencil project, we do nothing.\n        // This function is not really exported by @stencil/core.\n        return {};\n    }\n    const elmsToUpdate = new Map();\n    return {\n        dispose: () => elmsToUpdate.clear(),\n        get: (propName) => {\n            const elm = getRenderingRef();\n            if (elm) {\n                appendToMap(elmsToUpdate, propName, elm);\n            }\n        },\n        set: (propName) => {\n            const elements = elmsToUpdate.get(propName);\n            if (elements) {\n                elmsToUpdate.set(propName, elements.filter(forceUpdate));\n            }\n            cleanupElements(elmsToUpdate);\n        },\n        reset: () => {\n            elmsToUpdate.forEach((elms) => elms.forEach(forceUpdate));\n            cleanupElements(elmsToUpdate);\n        },\n    };\n};\n\nconst unwrap = (val) => (typeof val === 'function' ? val() : val);\nconst createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {\n    const unwrappedState = unwrap(defaultState);\n    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));\n    const handlers = {\n        dispose: [],\n        get: [],\n        set: [],\n        reset: [],\n    };\n    const reset = () => {\n        var _a;\n        // When resetting the state, the default state may be a function - unwrap it to invoke it.\n        // otherwise, the state won't be properly reset\n        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));\n        handlers.reset.forEach((cb) => cb());\n    };\n    const dispose = () => {\n        // Call first dispose as resetting the state would\n        // cause less updates ;)\n        handlers.dispose.forEach((cb) => cb());\n        reset();\n    };\n    const get = (propName) => {\n        handlers.get.forEach((cb) => cb(propName));\n        return states.get(propName);\n    };\n    const set = (propName, value) => {\n        const oldValue = states.get(propName);\n        if (shouldUpdate(value, oldValue, propName)) {\n            states.set(propName, value);\n            handlers.set.forEach((cb) => cb(propName, value, oldValue));\n        }\n    };\n    const state = (typeof Proxy === 'undefined'\n        ? {}\n        : new Proxy(unwrappedState, {\n            get(_, propName) {\n                return get(propName);\n            },\n            ownKeys(_) {\n                return Array.from(states.keys());\n            },\n            getOwnPropertyDescriptor() {\n                return {\n                    enumerable: true,\n                    configurable: true,\n                };\n            },\n            has(_, propName) {\n                return states.has(propName);\n            },\n            set(_, propName, value) {\n                set(propName, value);\n                return true;\n            },\n        }));\n    const on = (eventName, callback) => {\n        handlers[eventName].push(callback);\n        return () => {\n            removeFromArray(handlers[eventName], callback);\n        };\n    };\n    const onChange = (propName, cb) => {\n        const unSet = on('set', (key, newValue) => {\n            if (key === propName) {\n                cb(newValue);\n            }\n        });\n        // We need to unwrap the defaultState because it might be a function.\n        // Otherwise we might not be sending the right reset value.\n        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));\n        return () => {\n            unSet();\n            unReset();\n        };\n    };\n    const use = (...subscriptions) => {\n        const unsubs = subscriptions.reduce((unsubs, subscription) => {\n            if (subscription.set) {\n                unsubs.push(on('set', subscription.set));\n            }\n            if (subscription.get) {\n                unsubs.push(on('get', subscription.get));\n            }\n            if (subscription.reset) {\n                unsubs.push(on('reset', subscription.reset));\n            }\n            if (subscription.dispose) {\n                unsubs.push(on('dispose', subscription.dispose));\n            }\n            return unsubs;\n        }, []);\n        return () => unsubs.forEach((unsub) => unsub());\n    };\n    const forceUpdate = (key) => {\n        const oldValue = states.get(key);\n        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));\n    };\n    return {\n        state,\n        get,\n        set,\n        on,\n        onChange,\n        use,\n        dispose,\n        reset,\n        forceUpdate,\n    };\n};\nconst removeFromArray = (array, item) => {\n    const index = array.indexOf(item);\n    if (index >= 0) {\n        array[index] = array[array.length - 1];\n        array.length--;\n    }\n};\n\nconst createStore = (defaultState, shouldUpdate) => {\n    const map = createObservableMap(defaultState, shouldUpdate);\n    map.use(stencilSubscription());\n    return map;\n};\n\nexport { createObservableMap, createStore };\n","import { createStore } from '@stencil/store';\r\nexport interface ILocale {\r\n  entries: LocalizationStrings | null;\r\n  direction: 'ltr' | 'rtl';\r\n}\r\nexport type LocalizationStrings = {\r\n  Lcz_Adding: string;\r\n  Lcz_AddingRoomNightsTo: string;\r\n  Lcz_AddingUnitToBooking: string;\r\n  Lcz_Address: string;\r\n  Lcz_AddRoom: string;\r\n  Lcz_AdultsCaption: string;\r\n  Lcz_AllAssignForThisDay: string;\r\n  Lcz_AllBookingsAreAssigned: string;\r\n  Lcz_AlternativeEmail: string;\r\n  Lcz_Amount: string;\r\n  Lcz_AnyMessageForUs: string;\r\n  Lcz_AreYouSureDoYouWantToRemove: string;\r\n  Lcz_AreYouSureWantToMoveAnotherUnit: string;\r\n  Lcz_ArrivalTime: string;\r\n  Lcz_Assign: string;\r\n  Lcz_Assignments: string;\r\n  Lcz_AssignUnit: string;\r\n  Lcz_Assignunits: string;\r\n  Lcz_AssignUnitToExistingBooking: string;\r\n  Lcz_AutomaticReleaseIn: string;\r\n  Lcz_Back: string;\r\n  Lcz_BalanceWillBeCalculated: string;\r\n  Lcz_Blockdates: string;\r\n  Lcz_BlockDatesFor: string;\r\n  Lcz_BlockedTill: string;\r\n  Lcz_Book: string;\r\n  Lcz_BookAndChekcIn: string;\r\n  Lcz_BookedBy: string;\r\n  Lcz_Booking: string;\r\n  Lcz_BookingGuarantee: string;\r\n  Lcz_BookingNumber: string;\r\n  Lcz_Breakdown: string;\r\n  Lcz_Cancel: string;\r\n  Lcz_Cancellation: string;\r\n  Lcz_CannotChangeCHBookings: string;\r\n  Lcz_CannotModifyCHBooking: string;\r\n  Lcz_CardHolderName: string;\r\n  Lcz_CardNumber: string;\r\n  Lcz_Check: string;\r\n  Lcz_CheckIn: string;\r\n  Lcz_CheckInDateShouldBeMAx: string;\r\n  Lcz_CheckingRoomAvailability: string;\r\n  Lcz_CheckOut: string;\r\n  Lcz_ChildCaption: string;\r\n  Lcz_ChooseBookingNumber: string;\r\n  Lcz_City: string;\r\n  Lcz_Confirm: string;\r\n  Lcz_Confirmation: string;\r\n  Lcz_Confirmed: string;\r\n  Lcz_ContactNumber: string;\r\n  Lcz_ConvertToBooking: string;\r\n  Lcz_Country: string;\r\n  Lcz_CreateNewBooking: string;\r\n  Lcz_Current: string;\r\n  Lcz_Date: string;\r\n  Lcz_Dates: string;\r\n  Lcz_Delete: string;\r\n  Lcz_Designation: string;\r\n  Lcz_DueBalance: string;\r\n  Lcz_Edit: string;\r\n  Lcz_EditBookingFor: string;\r\n  Lcz_Email: string;\r\n  Lcz_EmailAddress: string;\r\n  Lcz_EmailTheGuest: string;\r\n  Lcz_ExpiryDate: string;\r\n  Lcz_FetchingUnAssignedUnits: string;\r\n  Lcz_FindUnit: string;\r\n  Lcz_FirstName: string;\r\n  Lcz_From: string;\r\n  Lcz_FromThisBooking: string;\r\n  Lcz_GuestDetails: string;\r\n  Lcz_GuestFirstnameAndLastname: string;\r\n  Lcz_In: string;\r\n  Lcz_InternalRemark: string;\r\n  Lcz_Isd: string;\r\n  Lcz_IsNotFound: string;\r\n  Lcz_LastName: string;\r\n  Lcz_Legend: string;\r\n  Lcz_Loading: string;\r\n  Lcz_MealPlan: string;\r\n  Lcz_MobilePhone: string;\r\n  Lcz_MonthAndYear: string;\r\n  Lcz_Navigate: string;\r\n  Lcz_NewBooking: string;\r\n  Lcz_NewBookingFor: string;\r\n  Lcz_Newsletter: string;\r\n  Lcz_Next: string;\r\n  Lcz_Night: string;\r\n  Lcz_Nights: string;\r\n  Lcz_NoAvailabilityForAdditionalNights: string;\r\n  Lcz_NonRefundable: string;\r\n  Lcz_NoResultsFound: string;\r\n  Lcz_Note: string;\r\n  Lcz_NumberOfGuests: string;\r\n  Lcz_Occupancy: string;\r\n  Lcz_OfflineAvailability: string;\r\n  Lcz_Ok: string;\r\n  Lcz_On: string;\r\n  Lcz_OptionalReason: string;\r\n  Lcz_Or: string;\r\n  Lcz_Out: string;\r\n  Lcz_OutOfservice: string;\r\n  Lcz_OverlappingDates: string;\r\n  Lcz_PaymentDueDates: string;\r\n  Lcz_Payments: string;\r\n  Lcz_Phone: string;\r\n  Lcz_PlzSelectNumberOfGuests: string;\r\n  Lcz_RatePlan: string;\r\n  Lcz_Reason: string;\r\n  Lcz_Refundable: string;\r\n  Lcz_SameRatesWillBeKept: string;\r\n  Lcz_Save: string;\r\n  Lcz_Select: string;\r\n  Lcz_Source: string;\r\n  Lcz_SpecialRate: string;\r\n  Lcz_TheBooking: string;\r\n  Lcz_To: string;\r\n  Lcz_Tobooking: string;\r\n  Lcz_Today: string;\r\n  Lcz_TotalAvailability: string;\r\n  Lcz_TotalPrice: string;\r\n  Lcz_Unassign: string;\r\n  Lcz_UnassignedUnits: string;\r\n  Lcz_UnassignedUnitsTooltip: string;\r\n  Lcz_Update: string;\r\n  Lcz_UpdateStatus: string;\r\n  Lcz_Year: string;\r\n  Lcz_Years: string;\r\n  Lcz_YourArrivalTime: string;\r\n  Lcz_Rate: string;\r\n  Lcz_YouWillLoseFutureUpdates: string;\r\n  Lcz_NoRatePlanDefined: string;\r\n  Lcz_Stay: string;\r\n  Lcz_BedConfiguration: string;\r\n  Lcz_SelectStatus: string;\r\n  Lcz_StatusUpdatedSuccessfully: string;\r\n  Lcz_Pickup: string;\r\n  Lcz_ArrivalDate: string;\r\n  Lcz_Time: string;\r\n  Lcz_FlightDetails: string;\r\n  Lcz_DueUponBooking: string;\r\n  Lcz_NbrOfVehicles: string;\r\n  Lcz_Pickup_YesFrom: string;\r\n  Lcz_Pickup_NoThankYou: string;\r\n};\r\n\r\nconst initialState: ILocale = {\r\n  entries: null,\r\n  direction: 'ltr',\r\n};\r\nexport const { state: locales, onChange: onCalendarDatesChange } = createStore<ILocale>(initialState);\r\n\r\nexport default locales;\r\n","import moment from 'moment';\r\nimport IBooking, { ICountry, PhysicalRoomType } from '../models/IBooking';\r\n\r\nexport function convertDateToCustomFormat(dayWithWeekday: string, monthWithYear: string): string {\r\n  const dateStr = `${dayWithWeekday.split(' ')[1]} ${monthWithYear}`;\r\n  const date = moment(dateStr, 'DD MMM YYYY');\r\n  if (!date.isValid()) {\r\n    throw new Error('Invalid Date');\r\n  }\r\n  return date.format('D_M_YYYY');\r\n}\r\n\r\nexport function convertDateToTime(dayWithWeekday: string, monthWithYear: string): number {\r\n  const months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\r\n\r\n  const [_, day] = dayWithWeekday.split(' ');\r\n  const [month, year] = monthWithYear.split(' ');\r\n\r\n  const monthIndex = months.indexOf(month);\r\n  if (monthIndex !== -1) {\r\n    let date = new Date(`${year}-${monthIndex + 1}-${day}`);\r\n    date.setHours(0, 0, 0, 0);\r\n    return date.getTime();\r\n  } else {\r\n    throw new Error('Invalid Month');\r\n  }\r\n}\r\nexport function dateDifference(FROM_DATE: string, TO_DATE: string): number {\r\n  const startDate = new Date(FROM_DATE);\r\n  const endDate = new Date(TO_DATE);\r\n  return Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n}\r\nexport const getBrowserLanguage = (): string => {\r\n  const defaultLang = 'en';\r\n  const lang = navigator.language || defaultLang;\r\n  return lang.toUpperCase().split('-')[0];\r\n};\r\n\r\nexport const transformBooking = (physicalRoom: PhysicalRoomType[]): IBooking[] => {\r\n  const myBookings: IBooking[] = [];\r\n  physicalRoom.forEach(room => {\r\n    Object.keys(room.calendar_cell).forEach(key => {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        if (myBookings.find(b => b.ID === room.id.toString())) {\r\n        } else {\r\n          //myBookings.push({})\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return myBookings;\r\n};\r\n\r\nexport function dateToFormattedString(date: Date): string {\r\n  const year = date.getFullYear();\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // +1 because months are 0-based in JS\r\n  const day = date.getDate().toString().padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport function formatLegendColors(legendData) {\r\n  let formattedLegendData: any = {};\r\n\r\n  const statusId = {\r\n    'IN-HOUSE': { id: 1, clsName: 'IN_HOUSE' },\r\n    'CONFIRMED': { id: 2, clsName: 'CONFIRMED' },\r\n    'PENDING-CONFIRMATION': { id: 3, clsName: 'PENDING_CONFIRMATION' },\r\n    'SPLIT-UNIT': { id: 4, clsName: 'SPLIT_UNIT' },\r\n    'CHECKED-IN': { id: 5, clsName: 'CHECKED_IN' },\r\n    'CHECKED-OUT': { id: 5, clsName: 'CHECKED_OUT' },\r\n    'BLOCKED': { id: 6, clsName: 'BLOCKED' },\r\n    'BLOCKED-WITH-DATES': { id: 7, clsName: 'BLOCKED_WITH_DATES' },\r\n    'NOTES': { id: 8, clsName: 'NOTES' },\r\n    'OUTSTANDING-BALANCE': { id: 9, clsName: 'OUTSTANDING_BALANCE' },\r\n    'TEMP-EVENT': { id: 10, clsName: 'PENDING_CONFIRMATION' },\r\n  };\r\n  legendData.forEach(legend => {\r\n    formattedLegendData[legend.id] = legend;\r\n    formattedLegendData.statusId = statusId; // NOTE: This will overwrite the 'statusId' property with every iteration.\r\n  });\r\n\r\n  return formattedLegendData;\r\n}\r\nexport function isBlockUnit(status_code: any) {\r\n  return ['003', '002', '004'].includes(status_code);\r\n}\r\nexport function getCurrencySymbol(currencyCode) {\r\n  const formatter = new Intl.NumberFormat(undefined, {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  });\r\n  return formatter.format(0).replace(/[0-9]/g, '').trim();\r\n}\r\nexport const findCountry = (id: number, countries: ICountry[]): ICountry => countries.find(country => country.id === id);\r\n\r\nexport function getReleaseHoursString(releaseDate: number) {\r\n  const dt = new Date();\r\n  const releaseAfterHours = releaseDate;\r\n\r\n  dt.setHours(dt.getHours() + releaseAfterHours, dt.getMinutes(), 0, 0);\r\n\r\n  return {\r\n    BLOCKED_TILL_DATE: dateToFormattedString(dt),\r\n    BLOCKED_TILL_HOUR: dt.getHours().toString(),\r\n    BLOCKED_TILL_MINUTE: dt.getMinutes().toString(),\r\n  };\r\n}\r\n\r\nexport function computeEndDate(startDate: string, numberOfDays: number): string {\r\n  const dateObj = moment(startDate, 'D_M_YYYY');\r\n  dateObj.add(numberOfDays, 'days');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDMYToISO(date: string) {\r\n  const dateObj = moment(date, 'D_M_YYYY');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\nexport function addTwoMonthToDate(date: Date) {\r\n  return moment(date).add(2, 'months').format('YYYY-MM-DD');\r\n}\r\nexport function formatDate(dateString, option = 'DD MMM YYYY') {\r\n  const formattedDate = moment(dateString, option).format('ddd, DD MMM YYYY');\r\n  return formattedDate;\r\n}\r\nexport function getNextDay(date: Date) {\r\n  return moment(date).add(1, 'days').format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDatePrice(date: string) {\r\n  return moment(date, 'YYYY-MM-DD').format('DD/MM ddd');\r\n}\r\nexport function getDaysArray(date1: string, date2: string) {\r\n  let dates = [];\r\n  let start = moment.min(moment(date1).add(1, 'days'), moment(date2));\r\n  let end = moment.max(moment(date1), moment(date2));\r\n  while (start < end) {\r\n    dates.push(start.format('YYYY-MM-DD'));\r\n    start = start.clone().add(1, 'days');\r\n  }\r\n\r\n  return dates;\r\n}\r\n"],"mappings":"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"}