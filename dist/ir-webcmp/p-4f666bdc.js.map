{"version":3,"names":["async","getMyBookings","months","myBookings","stayStatus","getStayStatus","month","day","days","room","room_types","assignBooking","physicalrooms","physicalRoom","key","calendar_cell","Is_Available","addOrUpdateBooking","status","bookingStatus","formatName","firstName","lastName","token","calendar_data","data","axios","post","TBL_NAMES","My_Result","map","d","code","CODE_NAME","value","CODE_VALUE_EN","Error","error","console","log","renderBlock003Date","date","hour","minute","dt","Date","setHours","setMinutes","locales","entries","Lcz_BlockedTill","moment","format","getDefaultData","cell","isBlockUnit","STAY_STATUS_CODE","blockedFromDate","My_Block_Info","from_date","isAfter","DATE","blockedToDate","to_date","ID","POOL","NOTES","BALANCE","NAME","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","find","st","RELEASE_AFTER_HOURS","DESCRIPTION","PR_ID","pr_id","ENTRY_DATE","ENTRY_HOUR","ENTRY_MINUTE","OPTIONAL_REASON","FROM_DATE","TO_DATE","NO_OF_DAYS","dateDifference","STATUS","STATUS_CODE","OUT_OF_SERVICE","FROM_DATE_STR","TO_DATE_STR","booking","booking_nbr","bookingFromDate","bookingToDate","_a","guest","first_name","last_name","IDENTIFIER","identifier","BOOKING_NUMBER","is_direct","remark","_b","financial","due_amount","channel_booking_nbr","ARRIVAL_TIME","arrival","description","index","findIndex","newData","push","transformNewBooking","bookings","renderStatus","now","toDate","fromDate","isSame","isBefore","rooms","filter","forEach","length","ARRIVAL","IS_EDITABLE","PHONE","mobile","RATE","total","RATE_PLAN","rateplan","name","SPLIT_BOOKING","RATE_PLAN_ID","id","RATE_TYPE","roomtype","ADULTS_COUNT","occupancy","adult_nbr","CHILDREN_COUNT","children_nbr","unit","GUEST","ROOMS","cancelation","guarantee","TOTAL_PRICE","gross_total","COUNTRY","country_id","adult_child_offering","selected_variation","origin","SOURCE","source","tag","ota_notes","transformNewBLockedRooms","calculateDaysBetweenDates","startDate","endDate","daysDiff","diff"],"sources":["src/utils/booking.ts"],"sourcesContent":["import moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const token = calendar_data.token;\r\n    if (token) {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi?Ticket=${token}`, {\r\n        TBL_NAMES: ['_STAY_STATUS'],\r\n      });\r\n      return data.My_Result.map(d => ({\r\n        code: d.CODE_NAME,\r\n        value: d.CODE_VALUE_EN,\r\n      }));\r\n    } else {\r\n      throw new Error('Invalid Token');\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\r\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: blockedFromDate,\r\n      TO_DATE: blockedToDate,\r\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n    };\r\n  }\r\n  // console.log('booking', cell);\r\n  if (cell.booking.booking_nbr === '57243250') {\r\n    console.log('cell');\r\n    console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\r\n    console.log(cell);\r\n  }\r\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\r\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\r\n  return {\r\n    ID: cell.POOL,\r\n    FROM_DATE: bookingFromDate,\r\n    TO_DATE: bookingToDate,\r\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(cell.room.guest.first_name, cell.room.guest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ARRIVAL_TIME: cell.booking.arrival.description,\r\n    ///from here\r\n    //ENTRY_DATE: cell.booking.booked_on.date,\r\n    // IS_EDITABLE: cell.booking.is_editable,\r\n    // ARRIVAL: cell.booking.arrival,\r\n    // PHONE: cell.booking.guest.mobile ?? '',\r\n    // RATE: cell.room.total,\r\n    // RATE_PLAN: cell.room.rateplan.name,\r\n    // SPLIT_BOOKING: false,\r\n    // RATE_PLAN_ID: cell.room.rateplan.id,\r\n    // RATE_TYPE: 1,\r\n    // ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    // CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    // origin: cell.booking.origin,\r\n    // GUEST: cell.booking.guest,\r\n    // ROOMS: cell.booking.rooms,\r\n    // cancelation: cell.room.rateplan.cancelation,\r\n    // guarantee: cell.room.rateplan.guarantee,\r\n    // TOTAL_PRICE: cell.room.total,\r\n    // COUNTRY: cell.booking.guest.country_id,\r\n    // FROM_DATE_STR: cell.booking.format.from_date,\r\n    // TO_DATE_STR: cell.booking.format.to_date,\r\n    // adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    // SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n  };\r\n}\r\n\r\n// function updateBookingWithStayData(data: any, cell: CellType): any {\r\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n//   data.TO_DATE = cell.DATE;\r\n//   if (cell.booking) {\r\n//     const { arrival } = cell.booking;\r\n//     if (cell.booking.booking_nbr === '88231897') {\r\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\r\n//     }\r\n//     Object.assign(data, {\r\n//       ARRIVAL_TIME: arrival.description,\r\n//     });\r\n//   }\r\n//   return data;\r\n// }\r\n\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  }\r\n  //else {\r\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n  //   myBookings[index] = updatedData;\r\n  // }\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  //console.log(data);\r\n  const renderStatus = room => {\r\n    const now = moment();\r\n    const toDate = moment(room.to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(room.from_date, 'YYYY-MM-DD');\r\n\r\n    if (fromDate.isSame(now, 'day') && now.hour() >= 12) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && now.hour() < 12) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && now.hour() >= 12) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[data?.status.code || '001'];\r\n    }\r\n    // if (toDate.isBefore(now, 'day') || (toDate.isSame(now, 'day') && now.hour() >= 12)) {\r\n    //   return bookingStatus['003'];\r\n    // } else {\r\n    //   return bookingStatus[fromDate.isSameOrBefore(now, 'day') ? '000' : data?.status.code || '001'];\r\n    // }\r\n  };\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    bookings.push({\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: room.to_date,\r\n      FROM_DATE: room.from_date,\r\n      NO_OF_DAYS: room.days.length,\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: renderStatus(room),\r\n      NAME: formatName(room.guest.first_name, room.guest.last_name),\r\n      PHONE: data.guest.mobile ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: room.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n    });\r\n  });\r\n\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\n"],"mappings":"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"}