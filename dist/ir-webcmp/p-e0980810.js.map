{"version":3,"names":["convertDateToCustomFormat","dayWithWeekday","monthWithYear","dateStr","split","date","moment","isValid","Error","format","convertDateToTime","toDate","setHours","getTime","dateDifference","FROM_DATE","TO_DATE","startDate","Date","endDate","Math","ceil","dateToFormattedString","year","getFullYear","month","getMonth","toString","padStart","day","getDate","formatLegendColors","legendData","formattedLegendData","statusId","id","clsName","CONFIRMED","BLOCKED","NOTES","forEach","legend","isBlockUnit","status_code","includes","getCurrencySymbol","currencyCode","formatter","Intl","NumberFormat","undefined","style","currency","minimumFractionDigits","maximumFractionDigits","replace","trim","findCountry","countries","find","country","getReleaseHoursString","releaseDate","dt","releaseAfterHours","getHours","getMinutes","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","computeEndDate","numberOfDays","dateObj","add","convertDMYToISO","addTwoMonthToDate","formatDate","dateString","option","formattedDate","getNextDay","convertDatePrice","getDaysArray","date1","date2","dates","start","min","end","max","push","clone"],"sources":["src/utils/utils.ts"],"sourcesContent":["import moment from 'moment';\r\nimport IBooking, { ICountry, PhysicalRoomType } from '../models/IBooking';\r\n\r\nexport function convertDateToCustomFormat(dayWithWeekday: string, monthWithYear: string): string {\r\n  const dateStr = `${dayWithWeekday.split(' ')[1]} ${monthWithYear}`;\r\n  const date = moment(dateStr, 'DD MMM YYYY');\r\n  if (!date.isValid()) {\r\n    throw new Error('Invalid Date');\r\n  }\r\n  return date.format('D_M_YYYY');\r\n}\r\n\r\nexport function convertDateToTime(dayWithWeekday: string, monthWithYear: string): number {\r\n  const date = moment(dayWithWeekday + ' ' + monthWithYear, 'ddd DD MMM YYYY').toDate();\r\n  date.setHours(0, 0, 0, 0);\r\n  return date.getTime();\r\n}\r\nexport function dateDifference(FROM_DATE: string, TO_DATE: string): number {\r\n  const startDate = new Date(FROM_DATE);\r\n  const endDate = new Date(TO_DATE);\r\n  return Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n}\r\nexport const getBrowserLanguage = (): string => {\r\n  const defaultLang = 'en';\r\n  const lang = navigator.language || defaultLang;\r\n  return lang.toUpperCase().split('-')[0];\r\n};\r\n\r\nexport const transformBooking = (physicalRoom: PhysicalRoomType[]): IBooking[] => {\r\n  const myBookings: IBooking[] = [];\r\n  physicalRoom.forEach(room => {\r\n    Object.keys(room.calendar_cell).forEach(key => {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        if (myBookings.find(b => b.ID === room.id.toString())) {\r\n        } else {\r\n          //myBookings.push({})\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return myBookings;\r\n};\r\n\r\nexport function dateToFormattedString(date: Date): string {\r\n  const year = date.getFullYear();\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // +1 because months are 0-based in JS\r\n  const day = date.getDate().toString().padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport function formatLegendColors(legendData) {\r\n  let formattedLegendData: any = {};\r\n\r\n  const statusId = {\r\n    'IN-HOUSE': { id: 1, clsName: 'IN_HOUSE' },\r\n    'CONFIRMED': { id: 2, clsName: 'CONFIRMED' },\r\n    'PENDING-CONFIRMATION': { id: 3, clsName: 'PENDING_CONFIRMATION' },\r\n    'SPLIT-UNIT': { id: 4, clsName: 'SPLIT_UNIT' },\r\n    'CHECKED-IN': { id: 5, clsName: 'CHECKED_IN' },\r\n    'CHECKED-OUT': { id: 5, clsName: 'CHECKED_OUT' },\r\n    'BLOCKED': { id: 6, clsName: 'BLOCKED' },\r\n    'BLOCKED-WITH-DATES': { id: 7, clsName: 'BLOCKED_WITH_DATES' },\r\n    'NOTES': { id: 8, clsName: 'NOTES' },\r\n    'OUTSTANDING-BALANCE': { id: 9, clsName: 'OUTSTANDING_BALANCE' },\r\n    'TEMP-EVENT': { id: 10, clsName: 'PENDING_CONFIRMATION' },\r\n  };\r\n  legendData.forEach(legend => {\r\n    formattedLegendData[legend.id] = legend;\r\n    formattedLegendData.statusId = statusId; // NOTE: This will overwrite the 'statusId' property with every iteration.\r\n  });\r\n\r\n  return formattedLegendData;\r\n}\r\nexport function isBlockUnit(status_code: any) {\r\n  return ['003', '002', '004'].includes(status_code);\r\n}\r\nexport function getCurrencySymbol(currencyCode) {\r\n  const formatter = new Intl.NumberFormat(undefined, {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  });\r\n  return formatter.format(0).replace(/[0-9]/g, '').trim();\r\n}\r\nexport const findCountry = (id: number, countries: ICountry[]): ICountry => countries.find(country => country.id === id);\r\n\r\nexport function getReleaseHoursString(releaseDate: number) {\r\n  const dt = new Date();\r\n  const releaseAfterHours = releaseDate;\r\n\r\n  dt.setHours(dt.getHours() + releaseAfterHours, dt.getMinutes(), 0, 0);\r\n\r\n  return {\r\n    BLOCKED_TILL_DATE: dateToFormattedString(dt),\r\n    BLOCKED_TILL_HOUR: dt.getHours().toString(),\r\n    BLOCKED_TILL_MINUTE: dt.getMinutes().toString(),\r\n  };\r\n}\r\n\r\nexport function computeEndDate(startDate: string, numberOfDays: number): string {\r\n  const dateObj = moment(startDate, 'D_M_YYYY');\r\n  dateObj.add(numberOfDays, 'days');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDMYToISO(date: string) {\r\n  const dateObj = moment(date, 'D_M_YYYY');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\nexport function addTwoMonthToDate(date: Date) {\r\n  return moment(date).add(2, 'months').format('YYYY-MM-DD');\r\n}\r\nexport function formatDate(dateString, option = 'DD MMM YYYY') {\r\n  const formattedDate = moment(dateString, option).format('ddd, DD MMM YYYY');\r\n  return formattedDate;\r\n}\r\nexport function getNextDay(date: Date) {\r\n  return moment(date).add(1, 'days').format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDatePrice(date: string) {\r\n  return moment(date, 'YYYY-MM-DD').format('DD/MM ddd');\r\n}\r\nexport function getDaysArray(date1: string, date2: string) {\r\n  let dates = [];\r\n  let start = moment.min(moment(date1).add(1, 'days'), moment(date2));\r\n  let end = moment.max(moment(date1), moment(date2));\r\n  while (start < end) {\r\n    dates.push(start.format('YYYY-MM-DD'));\r\n    start = start.clone().add(1, 'days');\r\n  }\r\n\r\n  return dates;\r\n}\r\nexport function renderTime(time: number) {\r\n  return time < 10 ? time.toString().padStart(2, '0') : time.toString();\r\n}\r\n\r\nexport function formatAmount(currency: string, amount: number) {\r\n  const symbol = getCurrencySymbol(currency);\r\n  return symbol + amount.toFixed(2);\r\n}\r\n"],"mappings":"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"}