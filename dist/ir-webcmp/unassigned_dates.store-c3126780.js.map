{"file":"unassigned_dates.store-c3126780.js","mappings":";;AAgBA,MAAM,YAAY,GAA0B;EAC1C,gBAAgB,EAAE,EAAE;CACrB,CAAC;IACS,EAAE,KAAK,EAAE,gBAAgB,EAAE,QAAQ,EAAE,2BAA2B,EAAE,GAAG,WAAW,CAAwB,YAAY,EAAE;SAEjH,kBAAkB,CAAC,IAAqB;EACtD,gBAAgB,CAAC,gBAAgB,mCAAQ,gBAAgB,CAAC,gBAAgB,GAAK,IAAI,CAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;AAuBxF,CAAC;SACe,kBAAkB;EAChC,OAAO,gBAAgB,CAAC,gBAAgB,CAAC;AAC3C,CAAC;SACe,qBAAqB,CAAC,SAAiB,EAAE,OAAe;EACtE,MAAM,aAAa,GAAG,sBAAsB,CAAC,SAAS,CAAC,CAAC;EACxD,MAAM,WAAW,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;EACpD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,GAAG;IACvC,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IACnC,IAAI,aAAa,IAAI,YAAY,IAAI,YAAY,IAAI,WAAW,EAAE;MAChE,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAC;KAC9B;GACF,CAAC,CAAC;AACL,CAAC;AACD,SAAS,sBAAsB,CAAC,OAAe;EAC7C,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;EAC/B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1B,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;AACxB;;;;","names":[],"sources":["src/stores/unassigned_dates.store.ts"],"sourcesContent":["import { createStore } from '@stencil/store';\r\n\r\ntype EventCategories = {};\r\n\r\ntype EventInfo = {\r\n  categories: EventCategories;\r\n  dateStr: string;\r\n};\r\n\r\ntype UnassignedDates = {\r\n  [timestamp: string]: EventInfo;\r\n};\r\ninterface IUnassignedDatesStore {\r\n  unassigned_dates: UnassignedDates;\r\n}\r\n\r\nconst initialState: IUnassignedDatesStore = {\r\n  unassigned_dates: {},\r\n};\r\nexport let { state: unassigned_dates, onChange: handleUnAssignedDatesChange } = createStore<IUnassignedDatesStore>(initialState);\r\n\r\nexport function addUnassingedDates(data: UnassignedDates) {\r\n  unassigned_dates.unassigned_dates = { ...unassigned_dates.unassigned_dates, ...data };\r\n  /*\r\n   try {\r\n      //console.log(\"called\")\r\n      let categorisedRooms = {};\r\n      const result = await this.toBeAssignedService.getUnassignedRooms(\r\n        this.propertyid,\r\n        dateToFormattedString(new Date(+key)),\r\n        calendarData.roomsInfo,\r\n        calendarData.formattedLegendData,\r\n      );\r\n      result.forEach(room => {\r\n        if (!categorisedRooms.hasOwnProperty(room.RT_ID)) {\r\n          categorisedRooms[room.RT_ID] = [room];\r\n        } else {\r\n          categorisedRooms[room.RT_ID].push(room);\r\n        }\r\n      });\r\n      this.unassignedDates[key].categories = categorisedRooms;\r\n    } catch (error) {\r\n      //  toastr.error(error);\r\n    }\r\n  */\r\n}\r\nexport function getUnassignedDates() {\r\n  return unassigned_dates.unassigned_dates;\r\n}\r\nexport function removeUnassignedDates(from_date: string, to_date: string) {\r\n  const fromTimestamp = convertToDateTimestamp(from_date);\r\n  const toTimestamp = convertToDateTimestamp(to_date);\r\n  Object.keys(unassigned_dates).forEach(key => {\r\n    const keyTimestamp = parseInt(key);\r\n    if (fromTimestamp <= keyTimestamp && keyTimestamp <= toTimestamp) {\r\n      delete unassigned_dates[key];\r\n    }\r\n  });\r\n}\r\nfunction convertToDateTimestamp(dateStr: string) {\r\n  const date = new Date(dateStr);\r\n  date.setHours(0, 0, 0, 0);\r\n  return date.getTime();\r\n}\r\n\r\nexport default unassigned_dates;\r\n"],"version":3}