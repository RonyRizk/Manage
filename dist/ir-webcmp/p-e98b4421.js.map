{"version":3,"names":["RoomService","fetchData","id","language","token","JSON","parse","sessionStorage","getItem","data","axios","post","ExceptionMsg","Error","results","My_Result","calendar_data","adultChildConstraints","adult_child_constraints","allowedBookingSources","allowed_booking_sources","allowed_payment_methods","allowed_booking_methods","currency","is_vacation_rental","pickup_service","max_nights","roomsInfo","roomtypes","channels_data","connected_channels","taxes","is_frontdesk_enabled","error","console","log","getExposedChannels","channels","fetchLanguage","code","entries","this","transformArrayToObject","locales","direction","object","d","description","initialState","days","months","state","calendar_dates","onChange","onCalendarDatesChange","createStore","unassigned_dates","addUnassingedDates","Object","assign","getUnassignedDates","removeUnassignedDates","from_date","to_date","fromTimestamp","convertToDateTimestamp","toTimestamp","keys","forEach","key","keyTimestamp","parseInt","dateStr","date","Date","setHours","getTime"],"sources":["src/services/room.service.ts","src/stores/calendar-dates.store.ts","src/stores/unassigned_dates.store.ts"],"sourcesContent":["import calendar_data from '@/stores/calendar-data';\r\nimport channels_data from '@/stores/channel.store';\r\nimport { locales } from '@/stores/locales.store';\r\nimport axios from 'axios';\r\n\r\nexport class RoomService {\r\n  public async fetchData(id: number, language: string) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Property?Ticket=${token}`, { id, language });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const results = data.My_Result;\r\n        calendar_data.adultChildConstraints = results.adult_child_constraints;\r\n        calendar_data.allowedBookingSources = results.allowed_booking_sources;\r\n        calendar_data.allowed_payment_methods = results.allowed_booking_methods;\r\n        calendar_data.currency = results.currency;\r\n        calendar_data.is_vacation_rental = results.is_vacation_rental;\r\n        calendar_data.pickup_service = results.pickup_service;\r\n        calendar_data.max_nights = results.max_nights;\r\n        calendar_data.roomsInfo = results.roomtypes;\r\n        channels_data.connected_channels = results.connected_channels;\r\n        calendar_data.taxes = results.taxes;\r\n        calendar_data.is_frontdesk_enabled = results.is_frontdesk_enabled;\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedChannels() {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Channels?Ticket=${token}`, {});\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const results = data.My_Result;\r\n        channels_data.channels = results;\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchLanguage(code: string) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Language?Ticket=${token}`, { code });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        let entries = this.transformArrayToObject(data.My_Result.entries);\r\n        locales.entries = entries;\r\n        locales.direction = data.My_Result.direction;\r\n        return { entries, direction: data.My_Result.direction };\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  private transformArrayToObject(data: any) {\r\n    let object: any = {};\r\n    for (const d of data) {\r\n      object[d.code] = d.description;\r\n    }\r\n    return object;\r\n  }\r\n}\r\n","import { DayData } from '@/models/DayType';\r\nimport { createStore } from '@stencil/store';\r\nexport interface ICalendarDates {\r\n  days: DayData[];\r\n  months: { daysCount: number; monthName: string }[];\r\n}\r\nconst initialState: ICalendarDates = {\r\n  days: [],\r\n  months: [],\r\n};\r\nexport const { state: calendar_dates, onChange: onCalendarDatesChange } = createStore<ICalendarDates>(initialState);\r\n\r\nexport default calendar_dates;\r\n","import { createStore } from '@stencil/store';\r\n\r\ntype EventCategories = {};\r\n\r\ntype EventInfo = {\r\n  categories: EventCategories;\r\n  dateStr: string;\r\n};\r\n\r\ntype UnassignedDates = {\r\n  [timestamp: string]: EventInfo;\r\n};\r\n\r\nconst initialState: UnassignedDates = {};\r\nlet { state: unassigned_dates } = createStore<UnassignedDates>(initialState);\r\nexport function addUnassingedDates(data: UnassignedDates) {\r\n  unassigned_dates = { ...unassigned_dates, ...data };\r\n}\r\nexport function getUnassignedDates() {\r\n  return unassigned_dates;\r\n}\r\nexport function removeUnassignedDates(from_date: string, to_date: string) {\r\n  const fromTimestamp = convertToDateTimestamp(from_date);\r\n  const toTimestamp = convertToDateTimestamp(to_date);\r\n  Object.keys(unassigned_dates).forEach(key => {\r\n    const keyTimestamp = parseInt(key);\r\n    if (fromTimestamp <= keyTimestamp && keyTimestamp <= toTimestamp) {\r\n      delete unassigned_dates[key];\r\n    }\r\n  });\r\n}\r\nfunction convertToDateTimestamp(dateStr: string) {\r\n  const date = new Date(dateStr);\r\n  date.setHours(0, 0, 0, 0);\r\n  return date.getTime();\r\n}\r\n\r\nexport default unassigned_dates;\r\n"],"mappings":"gIAKaA,EACJ,eAAMC,CAAUC,EAAYC,GACjC,IACE,MAAMC,EAAQC,KAAKC,MAAMC,eAAeC,QAAQ,UAChD,GAAIJ,IAAU,KAAM,CAClB,MAAMK,KAAEA,SAAeC,EAAMC,KAAK,gCAAgCP,IAAS,CAAEF,KAAIC,aACjF,GAAIM,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,MAAME,EAAUL,EAAKM,UACrBC,EAAcC,sBAAwBH,EAAQI,wBAC9CF,EAAcG,sBAAwBL,EAAQM,wBAC9CJ,EAAcK,wBAA0BP,EAAQQ,wBAChDN,EAAcO,SAAWT,EAAQS,SACjCP,EAAcQ,mBAAqBV,EAAQU,mBAC3CR,EAAcS,eAAiBX,EAAQW,eACvCT,EAAcU,WAAaZ,EAAQY,WACnCV,EAAcW,UAAYb,EAAQc,UAClCC,EAAcC,mBAAqBhB,EAAQgB,mBAC3Cd,EAAce,MAAQjB,EAAQiB,MAC9Bf,EAAcgB,qBAAuBlB,EAAQkB,qBAC7C,OAAOvB,C,EAET,MAAOwB,GACPC,QAAQC,IAAIF,GACZ,MAAM,IAAIpB,MAAMoB,E,EAGb,wBAAMG,GACX,IACE,MAAMhC,EAAQC,KAAKC,MAAMC,eAAeC,QAAQ,UAChD,GAAIJ,IAAU,KAAM,CAClB,MAAMK,KAAEA,SAAeC,EAAMC,KAAK,gCAAgCP,IAAS,IAC3E,GAAIK,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,MAAME,EAAUL,EAAKM,UACrBc,EAAcQ,SAAWvB,EACzB,OAAOL,C,EAET,MAAOwB,GACPC,QAAQC,IAAIF,GACZ,MAAM,IAAIpB,MAAMoB,E,EAGb,mBAAMK,CAAcC,GACzB,IACE,MAAMnC,EAAQC,KAAKC,MAAMC,eAAeC,QAAQ,UAChD,GAAIJ,IAAU,KAAM,CAClB,MAAMK,KAAEA,SAAeC,EAAMC,KAAK,gCAAgCP,IAAS,CAAEmC,SAC7E,GAAI9B,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,IAAI4B,EAAUC,KAAKC,uBAAuBjC,EAAKM,UAAUyB,SACzDG,EAAQH,QAAUA,EAClBG,EAAQC,UAAYnC,EAAKM,UAAU6B,UACnC,MAAO,CAAEJ,UAASI,UAAWnC,EAAKM,UAAU6B,U,EAE9C,MAAOX,GACPC,QAAQC,IAAIF,GACZ,MAAM,IAAIpB,MAAMoB,E,EAGZ,sBAAAS,CAAuBjC,GAC7B,IAAIoC,EAAc,GAClB,IAAK,MAAMC,KAAKrC,EAAM,CACpBoC,EAAOC,EAAEP,MAAQO,EAAEC,W,CAErB,OAAOF,C,ECnEX,MAAMG,EAA+B,CACnCC,KAAM,GACNC,OAAQ,I,MAEKC,MAAOC,EAAgBC,SAAUC,GAA0BC,EAA4BP,GCGtG,MAAMA,EAAgC,GACtC,IAAMG,MAAOK,GAAqBD,EAA6BP,G,SAC/CS,EAAmBhD,GACjC+C,EAAgBE,OAAAC,OAAAD,OAAAC,OAAA,GAAQH,GAAqB/C,EAC/C,C,SACgBmD,IACd,OAAOJ,CACT,C,SACgBK,EAAsBC,EAAmBC,GACvD,MAAMC,EAAgBC,EAAuBH,GAC7C,MAAMI,EAAcD,EAAuBF,GAC3CL,OAAOS,KAAKX,GAAkBY,SAAQC,IACpC,MAAMC,EAAeC,SAASF,GAC9B,GAAIL,GAAiBM,GAAgBA,GAAgBJ,EAAa,QACzDV,EAAiBa,E,IAG9B,CACA,SAASJ,EAAuBO,GAC9B,MAAMC,EAAO,IAAIC,KAAKF,GACtBC,EAAKE,SAAS,EAAG,EAAG,EAAG,GACvB,OAAOF,EAAKG,SACd,Q"}