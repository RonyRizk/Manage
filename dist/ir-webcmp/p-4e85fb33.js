import{a as o}from"./p-539b691e.js";import{B as t}from"./p-fb9fe682.js";import{a as e}from"./p-34fcab72.js";class r{constructor(){this.bookingService=new t}async reallocateEvent(t,e,r,n){try{const s=JSON.parse(sessionStorage.getItem("token"));if(s){console.log(t,e,r,n);const{data:a}=await o.post(`/ReAllocate_Exposed_Room?Ticket=${s}`,{pool:t,destination_pr_id:e,from_date:r,to_date:n});if(a.ExceptionMsg!==""){throw new Error(a.ExceptionMsg)}console.log(a);return a}else{throw new Error("Invalid Token")}}catch(o){console.error(o);throw new Error(o)}}async deleteEvent(t){try{const e=JSON.parse(sessionStorage.getItem("token"));if(e){const{data:r}=await o.post(`/UnBlock_Exposed_Unit?Ticket=${e}`,{POOL:t});if(r.ExceptionMsg!==""){throw new Error(r.ExceptionMsg)}return r.My_Result}else{throw new Error("Invalid Token")}}catch(o){console.log(o);throw new Error(o)}}async updateBlockedEvent(o){try{const t=JSON.parse(sessionStorage.getItem("token"));if(t){const t=e(+o.RELEASE_AFTER_HOURS);await this.deleteEvent(o.POOL);const r=await this.bookingService.blockUnit(Object.assign({from_date:this.formatDate(o.FROM_DATE),to_date:this.formatDate(o.TO_DATE),pr_id:o.PR_ID,STAY_STATUS_CODE:o.OUT_OF_SERVICE?"004":o.RELEASE_AFTER_HOURS===0?"002":"003",DESCRIPTION:o.RELEASE_AFTER_HOURS||"",NOTES:o.OPTIONAL_REASON||""},t));return r}else{throw new Error("Invalid Token")}}catch(o){console.error(o);throw new Error(o)}}formatDate(o){return o.split("/").join("-")}}export{r as E};
//# sourceMappingURL=p-4e85fb33.js.map