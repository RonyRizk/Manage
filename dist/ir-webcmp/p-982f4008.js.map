{"version":3,"names":["convertDateToCustomFormat","dayWithWeekday","monthWithYear","dateStr","split","date","moment","isValid","Error","format","convertDateToTime","toDate","setHours","getTime","dateDifference","FROM_DATE","TO_DATE","startDate","Date","endDate","Math","ceil","dateToFormattedString","year","getFullYear","month","getMonth","toString","padStart","day","getDate","formatLegendColors","legendData","formattedLegendData","statusId","id","clsName","CONFIRMED","BLOCKED","NOTES","forEach","legend","isBlockUnit","status_code","includes","getCurrencySymbol","currencyCode","formatter","Intl","NumberFormat","undefined","style","currency","minimumFractionDigits","maximumFractionDigits","replace","trim","findCountry","countries","find","country","getReleaseHoursString","releaseDate","dt","releaseAfterHours","getHours","getMinutes","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","computeEndDate","numberOfDays","dateObj","add","convertDMYToISO","addTwoMonthToDate","formatDate","dateString","option","formattedDate","getNextDay","convertDatePrice","getDaysArray","date1","date2","dates","start","min","end","max","push","clone","async","getMyBookings","months","myBookings","stayStatus","getStayStatus","days","room","room_types","assignBooking","physicalrooms","physicalRoom","key","calendar_cell","Is_Available","addOrUpdateBooking","status","bookingStatus","formatName","firstName","lastName","token","calendar_data","data","axios","post","TBL_NAMES","My_Result","map","d","code","CODE_NAME","value","CODE_VALUE_EN","error","console","log","renderBlock003Date","hour","minute","setMinutes","locales","entries","Lcz_BlockedTill","getDefaultData","cell","STAY_STATUS_CODE","blockedFromDate","My_Block_Info","from_date","isAfter","DATE","blockedToDate","to_date","ID","POOL","BALANCE","NAME","st","RELEASE_AFTER_HOURS","DESCRIPTION","PR_ID","pr_id","ENTRY_DATE","ENTRY_HOUR","ENTRY_MINUTE","OPTIONAL_REASON","NO_OF_DAYS","STATUS","STATUS_CODE","OUT_OF_SERVICE","FROM_DATE_STR","TO_DATE_STR","booking","booking_nbr","bookingFromDate","bookingToDate","_a","guest","first_name","last_name","IDENTIFIER","identifier","BOOKING_NUMBER","is_direct","remark","_b","financial","due_amount","channel_booking_nbr","ARRIVAL_TIME","arrival","description","index","findIndex","newData","transformNewBooking","bookings","renderStatus","now","fromDate","isSame","isBefore","rooms","filter","length","ARRIVAL","IS_EDITABLE","PHONE","mobile","RATE","total","RATE_PLAN","rateplan","name","SPLIT_BOOKING","RATE_PLAN_ID","RATE_TYPE","roomtype","ADULTS_COUNT","occupancy","adult_nbr","CHILDREN_COUNT","children_nbr","unit","GUEST","ROOMS","cancelation","guarantee","TOTAL_PRICE","gross_total","COUNTRY","country_id","adult_child_offering","selected_variation","origin","SOURCE","source","tag","ota_notes","transformNewBLockedRooms","calculateDaysBetweenDates","daysDiff","diff","BookingService","Token","getCalendarData","propertyid","this","getToken","ExceptionMsg","customMonths","myBooking","daysCount","monthName","currentDate","dayDisplayName","rate","unassigned_units_nbr","flat","Promise","resolve","ExceptionCode","My_Params_Get_Rooming_Data","AC_ID","FROM","My_Params_Get_Exposed_Calendar","TO","defaultMonths","fetchGuest","email","fetchPMSLogs","editExposedGuest","book_nbr","Object","assign","getBookingAvailability","adultChildCount","language","room_type_ids","adult","child_nbr","child","currency_ref","getCountries","fetchSetupEntries","res","arrivalTime","e","TBL_NAME","ratePricingMode","bedPreferenceType","getBlockedInfo","getUserDefaultCountry","IP","blockUnit","params","getUserInfo","getExposedBooking","generateDays","amount","toISOString","cost","setDate","calculateTotalRate","totalNights","isRateModified","preference","fetchExposedGuest","property_id","fetchExposedBookings","getPCICardInfoURL","BOOK_NBR","bookUser","bookedByInfoData","check_in","guestData","bookingNumber","defaultGuest","fromDateStr","toDateStr","countryId","city","contactNumber","address","dob","subscribe_to_news_letter","emailGuest","cci","cardNumber","nbr","holder_name","cardHolderName","expiry_month","expiryMonth","expiry_year","expiryYear","body","assign_units","is_pms","is_in_loyalty_mode","promo_key","message","property","selectedArrivalTime","roomCategoryId","roomCategoryName","rateplans","availabilities","inventory","ratePlanId","ratePlanName","rate_restrictions","variations","roomId","adultCount","childrenCount","infant_nbr","bed_preference","notes","rateType","guestName"],"sources":["src/utils/utils.ts","src/utils/booking.ts","src/services/booking.service.ts"],"sourcesContent":["import moment from 'moment';\r\nimport IBooking, { ICountry, PhysicalRoomType } from '../models/IBooking';\r\n\r\nexport function convertDateToCustomFormat(dayWithWeekday: string, monthWithYear: string): string {\r\n  const dateStr = `${dayWithWeekday.split(' ')[1]} ${monthWithYear}`;\r\n  const date = moment(dateStr, 'DD MMM YYYY');\r\n  if (!date.isValid()) {\r\n    throw new Error('Invalid Date');\r\n  }\r\n  return date.format('D_M_YYYY');\r\n}\r\n\r\nexport function convertDateToTime(dayWithWeekday: string, monthWithYear: string): number {\r\n  const date = moment(dayWithWeekday + ' ' + monthWithYear, 'ddd DD MMM YYYY').toDate();\r\n  date.setHours(0, 0, 0, 0);\r\n  return date.getTime();\r\n}\r\nexport function dateDifference(FROM_DATE: string, TO_DATE: string): number {\r\n  const startDate = new Date(FROM_DATE);\r\n  const endDate = new Date(TO_DATE);\r\n  return Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n}\r\nexport const getBrowserLanguage = (): string => {\r\n  const defaultLang = 'en';\r\n  const lang = navigator.language || defaultLang;\r\n  return lang.toUpperCase().split('-')[0];\r\n};\r\n\r\nexport const transformBooking = (physicalRoom: PhysicalRoomType[]): IBooking[] => {\r\n  const myBookings: IBooking[] = [];\r\n  physicalRoom.forEach(room => {\r\n    Object.keys(room.calendar_cell).forEach(key => {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        if (myBookings.find(b => b.ID === room.id.toString())) {\r\n        } else {\r\n          //myBookings.push({})\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return myBookings;\r\n};\r\n\r\nexport function dateToFormattedString(date: Date): string {\r\n  const year = date.getFullYear();\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // +1 because months are 0-based in JS\r\n  const day = date.getDate().toString().padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport function formatLegendColors(legendData) {\r\n  let formattedLegendData: any = {};\r\n\r\n  const statusId = {\r\n    'IN-HOUSE': { id: 1, clsName: 'IN_HOUSE' },\r\n    'CONFIRMED': { id: 2, clsName: 'CONFIRMED' },\r\n    'PENDING-CONFIRMATION': { id: 3, clsName: 'PENDING_CONFIRMATION' },\r\n    'SPLIT-UNIT': { id: 4, clsName: 'SPLIT_UNIT' },\r\n    'CHECKED-IN': { id: 5, clsName: 'CHECKED_IN' },\r\n    'CHECKED-OUT': { id: 5, clsName: 'CHECKED_OUT' },\r\n    'BLOCKED': { id: 6, clsName: 'BLOCKED' },\r\n    'BLOCKED-WITH-DATES': { id: 7, clsName: 'BLOCKED_WITH_DATES' },\r\n    'NOTES': { id: 8, clsName: 'NOTES' },\r\n    'OUTSTANDING-BALANCE': { id: 9, clsName: 'OUTSTANDING_BALANCE' },\r\n    'TEMP-EVENT': { id: 10, clsName: 'PENDING_CONFIRMATION' },\r\n  };\r\n  legendData.forEach(legend => {\r\n    formattedLegendData[legend.id] = legend;\r\n    formattedLegendData.statusId = statusId; // NOTE: This will overwrite the 'statusId' property with every iteration.\r\n  });\r\n\r\n  return formattedLegendData;\r\n}\r\nexport function isBlockUnit(status_code: any) {\r\n  return ['003', '002', '004'].includes(status_code);\r\n}\r\nexport function getCurrencySymbol(currencyCode) {\r\n  const formatter = new Intl.NumberFormat(undefined, {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  });\r\n  return formatter.format(0).replace(/[0-9]/g, '').trim();\r\n}\r\nexport const findCountry = (id: number, countries: ICountry[]): ICountry => countries.find(country => country.id === id);\r\n\r\nexport function getReleaseHoursString(releaseDate: number) {\r\n  const dt = new Date();\r\n  const releaseAfterHours = releaseDate;\r\n\r\n  dt.setHours(dt.getHours() + releaseAfterHours, dt.getMinutes(), 0, 0);\r\n\r\n  return {\r\n    BLOCKED_TILL_DATE: dateToFormattedString(dt),\r\n    BLOCKED_TILL_HOUR: dt.getHours().toString(),\r\n    BLOCKED_TILL_MINUTE: dt.getMinutes().toString(),\r\n  };\r\n}\r\n\r\nexport function computeEndDate(startDate: string, numberOfDays: number): string {\r\n  const dateObj = moment(startDate, 'D_M_YYYY');\r\n  dateObj.add(numberOfDays, 'days');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDMYToISO(date: string) {\r\n  const dateObj = moment(date, 'D_M_YYYY');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\nexport function addTwoMonthToDate(date: Date) {\r\n  return moment(date).add(2, 'months').format('YYYY-MM-DD');\r\n}\r\nexport function formatDate(dateString, option = 'DD MMM YYYY') {\r\n  const formattedDate = moment(dateString, option).format('ddd, DD MMM YYYY');\r\n  return formattedDate;\r\n}\r\nexport function getNextDay(date: Date) {\r\n  return moment(date).add(1, 'days').format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDatePrice(date: string) {\r\n  return moment(date, 'YYYY-MM-DD').format('DD/MM ddd');\r\n}\r\nexport function getDaysArray(date1: string, date2: string) {\r\n  let dates = [];\r\n  let start = moment.min(moment(date1).add(1, 'days'), moment(date2));\r\n  let end = moment.max(moment(date1), moment(date2));\r\n  while (start < end) {\r\n    dates.push(start.format('YYYY-MM-DD'));\r\n    start = start.clone().add(1, 'days');\r\n  }\r\n\r\n  return dates;\r\n}\r\nexport function renderTime(time: number) {\r\n  return time < 10 ? time.toString().padStart(2, '0') : time.toString();\r\n}\r\n\r\nexport function formatAmount(currency: string, amount: number) {\r\n  const symbol = getCurrencySymbol(currency);\r\n  return symbol + amount.toFixed(2);\r\n}\r\n","import moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const token = calendar_data.token;\r\n    if (token) {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi?Ticket=${token}`, {\r\n        TBL_NAMES: ['_STAY_STATUS'],\r\n      });\r\n      return data.My_Result.map(d => ({\r\n        code: d.CODE_NAME,\r\n        value: d.CODE_VALUE_EN,\r\n      }));\r\n    } else {\r\n      throw new Error('Invalid Token');\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\r\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: blockedFromDate,\r\n      TO_DATE: blockedToDate,\r\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n    };\r\n  }\r\n  // console.log('booking', cell);\r\n  if (cell.booking.booking_nbr === '57243250') {\r\n    console.log('cell');\r\n    console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\r\n    console.log(cell);\r\n  }\r\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\r\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\r\n  return {\r\n    ID: cell.POOL,\r\n    FROM_DATE: bookingFromDate,\r\n    TO_DATE: bookingToDate,\r\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(cell.room.guest.first_name, cell.room.guest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ARRIVAL_TIME: cell.booking.arrival.description,\r\n    ///from here\r\n    //ENTRY_DATE: cell.booking.booked_on.date,\r\n    // IS_EDITABLE: cell.booking.is_editable,\r\n    // ARRIVAL: cell.booking.arrival,\r\n    // PHONE: cell.booking.guest.mobile ?? '',\r\n    // RATE: cell.room.total,\r\n    // RATE_PLAN: cell.room.rateplan.name,\r\n    // SPLIT_BOOKING: false,\r\n    // RATE_PLAN_ID: cell.room.rateplan.id,\r\n    // RATE_TYPE: 1,\r\n    // ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    // CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    // origin: cell.booking.origin,\r\n    // GUEST: cell.booking.guest,\r\n    // ROOMS: cell.booking.rooms,\r\n    // cancelation: cell.room.rateplan.cancelation,\r\n    // guarantee: cell.room.rateplan.guarantee,\r\n    // TOTAL_PRICE: cell.room.total,\r\n    // COUNTRY: cell.booking.guest.country_id,\r\n    // FROM_DATE_STR: cell.booking.format.from_date,\r\n    // TO_DATE_STR: cell.booking.format.to_date,\r\n    // adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    // SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n  };\r\n}\r\n\r\n// function updateBookingWithStayData(data: any, cell: CellType): any {\r\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n//   data.TO_DATE = cell.DATE;\r\n//   if (cell.booking) {\r\n//     const { arrival } = cell.booking;\r\n//     if (cell.booking.booking_nbr === '88231897') {\r\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\r\n//     }\r\n//     Object.assign(data, {\r\n//       ARRIVAL_TIME: arrival.description,\r\n//     });\r\n//   }\r\n//   return data;\r\n// }\r\n\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  }\r\n  //else {\r\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n  //   myBookings[index] = updatedData;\r\n  // }\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  //console.log(data);\r\n  const renderStatus = room => {\r\n    const now = moment();\r\n    const toDate = moment(room.to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(room.from_date, 'YYYY-MM-DD');\r\n\r\n    if (fromDate.isSame(now, 'day') && now.hour() >= 12) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && now.hour() < 12) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && now.hour() >= 12) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[data?.status.code || '001'];\r\n    }\r\n    // if (toDate.isBefore(now, 'day') || (toDate.isSame(now, 'day') && now.hour() >= 12)) {\r\n    //   return bookingStatus['003'];\r\n    // } else {\r\n    //   return bookingStatus[fromDate.isSameOrBefore(now, 'day') ? '000' : data?.status.code || '001'];\r\n    // }\r\n  };\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    bookings.push({\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: room.to_date,\r\n      FROM_DATE: room.from_date,\r\n      NO_OF_DAYS: room.days.length,\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: renderStatus(room),\r\n      NAME: formatName(room.guest.first_name, room.guest.last_name),\r\n      PHONE: data.guest.mobile ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: room.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n    });\r\n  });\r\n\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\n","import { DayData } from '../models/DayType';\r\nimport axios from 'axios';\r\nimport { BookingDetails, IBlockUnit, ICountry, IEntries, ISetupEntries, MonthType } from '../models/IBooking';\r\n\r\nimport { convertDateToCustomFormat, convertDateToTime, dateToFormattedString } from '../utils/utils';\r\nimport { getMyBookings } from '../utils/booking';\r\nimport { Booking, Day, Guest, IPmsLog } from '../models/booking.dto';\r\nimport { Token } from '@/models/Token';\r\n\r\nexport class BookingService extends Token {\r\n  public async getCalendarData(propertyid: number, from_date: string, to_date: string): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Calendar?Ticket=${token}`, {\r\n          propertyid,\r\n          from_date,\r\n          to_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const months: MonthType[] = data.My_Result.months;\r\n        const customMonths: { daysCount: number; monthName: string }[] = [];\r\n        const myBooking = await getMyBookings(months);\r\n        const days: DayData[] = months\r\n          .map(month => {\r\n            customMonths.push({\r\n              daysCount: month.days.length,\r\n              monthName: month.description,\r\n            });\r\n            return month.days.map(day => ({\r\n              day: convertDateToCustomFormat(day.description, month.description),\r\n              currentDate: convertDateToTime(day.description, month.description),\r\n              dayDisplayName: day.description,\r\n              rate: day.room_types,\r\n              unassigned_units_nbr: day.unassigned_units_nbr,\r\n              occupancy: day.occupancy,\r\n            }));\r\n          })\r\n          .flat();\r\n\r\n        return Promise.resolve({\r\n          ExceptionCode: null,\r\n          ExceptionMsg: '',\r\n          My_Params_Get_Rooming_Data: {\r\n            AC_ID: propertyid,\r\n            FROM: data.My_Params_Get_Exposed_Calendar.from_date,\r\n            TO: data.My_Params_Get_Exposed_Calendar.to_date,\r\n          },\r\n          days,\r\n          months: customMonths,\r\n          myBookings: myBooking,\r\n          defaultMonths: months,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  public async fetchGuest(email: string): Promise<Guest> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Guest?Ticket=${token}`, { email });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchPMSLogs(booking_nbr: string | number): Promise<IPmsLog> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_PMS_Logs?Ticket=${token}`, { booking_nbr });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async editExposedGuest(guest: Guest, book_nbr: string): Promise<any> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Edit_Exposed_Guest?Ticket=${token}`, { ...guest, book_nbr });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBookingAvailability(\r\n    from_date: string,\r\n    to_date: string,\r\n    propertyid: number,\r\n    adultChildCount: { adult: number; child: number },\r\n    language: string,\r\n    room_type_ids: number[],\r\n    currency: { id: number; code: string },\r\n  ): Promise<BookingDetails> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Booking_Availability?Ticket=${token}`, {\r\n          propertyid,\r\n          from_date,\r\n          to_date,\r\n          adult_nbr: adultChildCount.adult,\r\n          child_nbr: adultChildCount.child,\r\n          language,\r\n          currency_ref: currency.code,\r\n          room_type_ids,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getCountries(language: string): Promise<ICountry[]> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Countries?Ticket=${token}`, {\r\n          language,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI?Ticket=${token}`, {\r\n          TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const res: any[] = data.My_Result;\r\n        return {\r\n          arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n\r\n          ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n          bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBlockedInfo(): Promise<IEntries[]> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI?Ticket=${token}`, { TBL_NAMES: ['_CALENDAR_BLOCKED_TILL'] });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUserDefaultCountry() {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Country_By_IP?Ticket=${token}`, {\r\n          IP: '',\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async blockUnit(params: IBlockUnit) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Block_Exposed_Unit?Ticket=${token}`, params);\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data);\r\n        return data['My_Params_Block_Exposed_Unit'];\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getUserInfo(email: string) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/GET_EXPOSED_GUEST?Ticket=${token}`, {\r\n          email,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBooking(booking_nbr: string, language: string): Promise<Booking> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Booking?Ticket=${token}`, {\r\n          booking_nbr,\r\n          language,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private generateDays(from_date: string, to_date: string, amount: number): Day[] {\r\n    const startDate = new Date(from_date);\r\n    const endDate = new Date(to_date);\r\n    const days: Day[] = [];\r\n\r\n    while (startDate < endDate) {\r\n      days.push({\r\n        date: startDate.toISOString().split('T')[0],\r\n        amount: amount,\r\n        cost: null,\r\n      });\r\n      startDate.setDate(startDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n  private calculateTotalRate(rate: number, totalNights: number, isRateModified: boolean, preference: number) {\r\n    if (isRateModified && preference === 2) {\r\n      return +rate;\r\n    }\r\n    return +rate / +totalNights;\r\n  }\r\n  public async fetchExposedGuest(email: string, property_id: number) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Fetch_Exposed_Guests?Ticket=${token}`, {\r\n          email,\r\n          property_id,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchExposedBookings(booking_nbr: string, property_id: number, from_date: string, to_date: string) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Fetch_Exposed_Bookings?Ticket=${token}`, {\r\n          booking_nbr,\r\n          property_id,\r\n          from_date,\r\n          to_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getPCICardInfoURL(BOOK_NBR: string) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_PCI_Card_Info_URL?Ticket=${token}`, {\r\n          BOOK_NBR,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async bookUser(\r\n    bookedByInfoData,\r\n    check_in: boolean,\r\n    fromDate: Date,\r\n    toDate: Date,\r\n    guestData,\r\n    totalNights: number,\r\n    source: { code: string; description: string },\r\n    propertyid: number,\r\n    rooms: any[],\r\n    currency: { id: number; code: string },\r\n    bookingNumber?: string,\r\n    defaultGuest?: any,\r\n    arrivalTime?: any,\r\n    pr_id?: number,\r\n    identifier?: string,\r\n  ) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const fromDateStr = dateToFormattedString(fromDate);\r\n        const toDateStr = dateToFormattedString(toDate);\r\n        let guest: any = {\r\n          email: bookedByInfoData.email === '' ? null : bookedByInfoData.email || null,\r\n          first_name: bookedByInfoData.firstName,\r\n          last_name: bookedByInfoData.lastName,\r\n          country_id: bookedByInfoData.countryId === '' ? null : bookedByInfoData.countryId,\r\n          city: null,\r\n          mobile: bookedByInfoData.contactNumber === null ? '' : bookedByInfoData.contactNumber,\r\n          address: '',\r\n          dob: null,\r\n          subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n          cci: bookedByInfoData.cardNumber\r\n            ? {\r\n                nbr: bookedByInfoData.cardNumber,\r\n                holder_name: bookedByInfoData.cardHolderName,\r\n                expiry_month: bookedByInfoData.expiryMonth,\r\n                expiry_year: bookedByInfoData.expiryYear,\r\n              }\r\n            : null,\r\n        };\r\n        if (defaultGuest) {\r\n          guest = { ...defaultGuest, email: defaultGuest.email === '' ? null : defaultGuest.email };\r\n        }\r\n        if (bookedByInfoData.id) {\r\n          guest = { ...guest, id: bookedByInfoData.id };\r\n        }\r\n        const body = {\r\n          assign_units: true,\r\n          check_in,\r\n          is_pms: true,\r\n          is_direct: true,\r\n          is_in_loyalty_mode: false,\r\n          promo_key: null,\r\n          booking: {\r\n            booking_nbr: bookingNumber || '',\r\n            from_date: fromDateStr,\r\n            to_date: toDateStr,\r\n            remark: bookedByInfoData.message || null,\r\n            property: {\r\n              id: propertyid,\r\n            },\r\n            source,\r\n            currency,\r\n            arrival: { code: arrivalTime ? arrivalTime : bookedByInfoData.selectedArrivalTime },\r\n\r\n            guest,\r\n            rooms: [\r\n              ...guestData.map(data => ({\r\n                identifier: identifier || null,\r\n                roomtype: {\r\n                  id: data.roomCategoryId,\r\n                  name: data.roomCategoryName,\r\n                  physicalrooms: null,\r\n                  rateplans: null,\r\n                  availabilities: null,\r\n                  inventory: data.inventory,\r\n                  rate: data.rate / totalNights,\r\n                },\r\n                rateplan: {\r\n                  id: data.ratePlanId,\r\n                  name: data.ratePlanName,\r\n                  rate_restrictions: null,\r\n                  variations: null,\r\n                  cancelation: data.cancelation,\r\n                  guarantee: data.guarantee,\r\n                },\r\n                unit: typeof pr_id === 'undefined' && data.roomId === '' ? null : { id: +pr_id || +data.roomId },\r\n                occupancy: {\r\n                  adult_nbr: data.adultCount,\r\n                  children_nbr: data.childrenCount,\r\n                  infant_nbr: null,\r\n                },\r\n                bed_preference: data.preference,\r\n                from_date: fromDateStr,\r\n                to_date: toDateStr,\r\n                notes: null,\r\n                days: this.generateDays(fromDateStr, toDateStr, this.calculateTotalRate(data.rate, totalNights, data.isRateModified, data.rateType)),\r\n                guest: {\r\n                  email: null,\r\n                  first_name: data.guestName,\r\n                  last_name: null,\r\n                  country_id: null,\r\n                  city: null,\r\n                  mobile: null,\r\n                  address: null,\r\n                  dob: null,\r\n                  subscribe_to_news_letter: null,\r\n                },\r\n              })),\r\n              ...rooms,\r\n            ],\r\n          },\r\n        };\r\n        console.log('book user payload', body);\r\n        const { data } = await axios.post(`/DoReservation?Ticket=${token}`, body);\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data['My_Result']);\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error('Invalid token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"}