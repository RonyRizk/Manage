{"version":3,"names":["initialState","channels","selectedChannel","mappedChannels","connected_channels","isConnectedToChannel","channel_settings","property_id","channel_id","is_active","state","channels_data","onChange","onChannelChange","dispose","createStore","setChannelIdAndActiveState","id","selectChannel","find","c","toString","name","properties","setMappedChannel","updateChannelSettings","key","value","hotel_id","hotel_title","selectedChannelMap","channel","map","resetStore","addMapping","ir_id","fr_id","isRoomType","push","type","testConnection","hotelConnection","property","length","_a"],"sources":["src/stores/channel.store.ts"],"sourcesContent":["import { IChannel, IExposedChannel, IMap } from '@/models/calendarData';\r\nimport { createStore } from '@stencil/store';\r\nexport interface IChannelSettings {\r\n  hotel_id: string;\r\n  hotel_title: string;\r\n}\r\nexport interface IChannelStore {\r\n  channels: IExposedChannel[];\r\n  connected_channels: IChannel[];\r\n  selectedChannel: IExposedChannel | null;\r\n  mappedChannels: IMap[];\r\n  isConnectedToChannel: boolean;\r\n  channel_settings: IChannelSettings | null;\r\n  property_id: number | null;\r\n  channel_id: number;\r\n  is_active: boolean;\r\n}\r\nconst initialState: IChannelStore = {\r\n  channels: [],\r\n  selectedChannel: null,\r\n  mappedChannels: [],\r\n  connected_channels: [],\r\n  isConnectedToChannel: false,\r\n  channel_settings: null,\r\n  property_id: null,\r\n  channel_id: -1,\r\n  is_active: false,\r\n};\r\nexport const { state: channels_data, onChange: onChannelChange, dispose } = createStore<IChannelStore>(initialState);\r\nexport function setChannelIdAndActiveState(id: number, is_active: boolean) {\r\n  channels_data.channel_id = id;\r\n  channels_data.is_active = is_active;\r\n}\r\nexport function selectChannel(channel_id: string) {\r\n  if (channel_id === '') {\r\n    channels_data.selectedChannel = null;\r\n    return;\r\n  }\r\n  const selectedChannel = channels_data.channels.find(c => c.id.toString() === channel_id);\r\n  if (selectedChannel) {\r\n    channels_data.selectedChannel = selectedChannel;\r\n  } else {\r\n    channels_data.selectedChannel = {\r\n      id: channel_id,\r\n      name: '',\r\n      properties: [],\r\n    };\r\n  }\r\n  setMappedChannel();\r\n}\r\nexport function updateChannelSettings(key: keyof IChannelSettings, value: string) {\r\n  if (!channels_data.channel_settings) {\r\n    channels_data.channel_settings = {\r\n      hotel_id: '',\r\n      hotel_title: '',\r\n    };\r\n  }\r\n  channels_data.channel_settings[key] = value;\r\n}\r\nexport function setMappedChannel() {\r\n  let selectedChannelMap = channels_data.connected_channels.find(c => c.channel.id.toString() === channels_data.selectedChannel.id.toString());\r\n  if (!selectedChannelMap) {\r\n    channels_data.mappedChannels = [];\r\n    return;\r\n  }\r\n  channels_data.mappedChannels = [...selectedChannelMap.map];\r\n}\r\nexport function resetStore() {\r\n  channels_data.selectedChannel = null;\r\n  channels_data.mappedChannels = [];\r\n  channels_data.isConnectedToChannel = false;\r\n  channels_data.channel_settings = null;\r\n}\r\nexport function addMapping(ir_id: string, fr_id: string, isRoomType: boolean) {\r\n  channels_data.mappedChannels.push({\r\n    channel_id: fr_id,\r\n    ir_id,\r\n    type: isRoomType ? 'room_type' : 'rate_plan',\r\n  });\r\n}\r\nexport function testConnection() {\r\n  // const hotelConnection = channels_data.selectedChannel.properties.find(property => property.id === 'd09e6374-1ebf-45e0-a130-64c8c9930987');\r\n  const hotelConnection = channels_data.selectedChannel.properties.find(property => property.id === channels_data.channel_settings.hotel_id);\r\n  if (!hotelConnection) {\r\n    if (channels_data.isConnectedToChannel) {\r\n      channels_data.isConnectedToChannel = false;\r\n    }\r\n    return false;\r\n  }\r\n  channels_data.selectedChannel.property = hotelConnection;\r\n  if (channels_data.mappedChannels.length === 0) {\r\n    channels_data.mappedChannels.push({ ir_id: (channels_data.property_id ?? -1).toString(), channel_id: channels_data.channel_settings.hotel_id, type: 'property' });\r\n  }\r\n  channels_data.isConnectedToChannel = true;\r\n  return true;\r\n}\r\n\r\nexport function saveChannel() {\r\n  console.log(channels_data.channel_settings, channels_data.mappedChannels, channels_data.selectedChannel);\r\n}\r\nexport default channels_data;\r\n"],"mappings":"oCAiBA,MAAMA,EAA8B,CAClCC,SAAU,GACVC,gBAAiB,KACjBC,eAAgB,GAChBC,mBAAoB,GACpBC,qBAAsB,MACtBC,iBAAkB,KAClBC,YAAa,KACbC,YAAa,EACbC,UAAW,O,MAEEC,MAAOC,EAAeC,SAAUC,EAAeC,QAAEA,GAAYC,EAA2Bf,G,SACvFgB,EAA2BC,EAAYR,GACrDE,EAAcH,WAAaS,EAC3BN,EAAcF,UAAYA,CAC5B,C,SACgBS,EAAcV,GAC5B,GAAIA,IAAe,GAAI,CACrBG,EAAcT,gBAAkB,KAChC,M,CAEF,MAAMA,EAAkBS,EAAcV,SAASkB,MAAKC,GAAKA,EAAEH,GAAGI,aAAeb,IAC7E,GAAIN,EAAiB,CACnBS,EAAcT,gBAAkBA,C,KAC3B,CACLS,EAAcT,gBAAkB,CAC9Be,GAAIT,EACJc,KAAM,GACNC,WAAY,G,CAGhBC,GACF,C,SACgBC,EAAsBC,EAA6BC,GACjE,IAAKhB,EAAcL,iBAAkB,CACnCK,EAAcL,iBAAmB,CAC/BsB,SAAU,GACVC,YAAa,G,CAGjBlB,EAAcL,iBAAiBoB,GAAOC,CACxC,C,SACgBH,IACd,IAAIM,EAAqBnB,EAAcP,mBAAmBe,MAAKC,GAAKA,EAAEW,QAAQd,GAAGI,aAAeV,EAAcT,gBAAgBe,GAAGI,aACjI,IAAKS,EAAoB,CACvBnB,EAAcR,eAAiB,GAC/B,M,CAEFQ,EAAcR,eAAiB,IAAI2B,EAAmBE,IACxD,C,SACgBC,IACdtB,EAAcT,gBAAkB,KAChCS,EAAcR,eAAiB,GAC/BQ,EAAcN,qBAAuB,MACrCM,EAAcL,iBAAmB,IACnC,C,SACgB4B,EAAWC,EAAeC,EAAeC,GACvD1B,EAAcR,eAAemC,KAAK,CAChC9B,WAAY4B,EACZD,QACAI,KAAMF,EAAa,YAAc,aAErC,C,SACgBG,I,MAEd,MAAMC,EAAkB9B,EAAcT,gBAAgBqB,WAAWJ,MAAKuB,GAAYA,EAASzB,KAAON,EAAcL,iBAAiBsB,WACjI,IAAKa,EAAiB,CACpB,GAAI9B,EAAcN,qBAAsB,CACtCM,EAAcN,qBAAuB,K,CAEvC,OAAO,K,CAETM,EAAcT,gBAAgBwC,SAAWD,EACzC,GAAI9B,EAAcR,eAAewC,SAAW,EAAG,CAC7ChC,EAAcR,eAAemC,KAAK,CAAEH,QAAQS,EAAAjC,EAAcJ,eAAW,MAAAqC,SAAA,EAAAA,GAAK,GAAGvB,WAAYb,WAAYG,EAAcL,iBAAiBsB,SAAUW,KAAM,Y,CAEtJ5B,EAAcN,qBAAuB,KACrC,OAAO,IACT,Q"}