{"version":3,"names":["initialState","channels","selectedChannel","mappedChannel","connected_channels","state","channels_data","onChange","onChannelChange","createStore","selectChannel","channel_id","find","c","id","toString","selectedChannelMap","channel","map","addMapping","ir_id","fr_id","push"],"sources":["src/stores/channel.store.ts"],"sourcesContent":["import { IChannel, IExposedChannel, IMap } from '@/models/calendarData';\r\nimport { createStore } from '@stencil/store';\r\nexport interface IChannelStore {\r\n  channels: IExposedChannel[];\r\n  connected_channels: IChannel[];\r\n  selectedChannel: IExposedChannel | null;\r\n  mappedChannel: IMap[];\r\n}\r\nconst initialState: IChannelStore = {\r\n  channels: [],\r\n  selectedChannel: null,\r\n  mappedChannel: [],\r\n  connected_channels: [],\r\n};\r\nexport const { state: channels_data, onChange: onChannelChange } = createStore<IChannelStore>(initialState);\r\nexport function selectChannel(channel_id: string) {\r\n  if (channel_id === '') {\r\n    channels_data.selectedChannel = null;\r\n    return;\r\n  }\r\n  const selectedChannel = channels_data.channels.find(c => c.id.toString() === channel_id);\r\n  let selectedChannelMap = channels_data.connected_channels.find(c => c.channel.id === selectedChannel.id);\r\n  channels_data.mappedChannel = selectedChannelMap.map;\r\n  channels_data.selectedChannel = selectedChannel;\r\n}\r\nexport function addMapping(ir_id: string, fr_id: string) {\r\n  channels_data.mappedChannel.push({\r\n    channel_id: fr_id,\r\n    ir_id,\r\n  });\r\n}\r\nexport default channels_data;\r\n"],"mappings":"oCAQA,MAAMA,EAA8B,CAClCC,SAAU,GACVC,gBAAiB,KACjBC,cAAe,GACfC,mBAAoB,I,MAEPC,MAAOC,EAAeC,SAAUC,GAAoBC,EAA2BT,G,SAC9EU,EAAcC,GAC5B,GAAIA,IAAe,GAAI,CACrBL,EAAcJ,gBAAkB,KAChC,M,CAEF,MAAMA,EAAkBI,EAAcL,SAASW,MAAKC,GAAKA,EAAEC,GAAGC,aAAeJ,IAC7E,IAAIK,EAAqBV,EAAcF,mBAAmBQ,MAAKC,GAAKA,EAAEI,QAAQH,KAAOZ,EAAgBY,KACrGR,EAAcH,cAAgBa,EAAmBE,IACjDZ,EAAcJ,gBAAkBA,CAClC,C,SACgBiB,EAAWC,EAAeC,GACxCf,EAAcH,cAAcmB,KAAK,CAC/BX,WAAYU,EACZD,SAEJ,Q"}