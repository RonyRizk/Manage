{"version":3,"names":["BookingService","getCalendarData","propertyid","from_date","to_date","token","JSON","parse","sessionStorage","getItem","data","axios","post","ExceptionMsg","Error","months","My_Result","customMonths","myBooking","getMyBookings","days","map","month","push","daysCount","length","monthName","description","day","convertDateToCustomFormat","currentDate","convertDateToTime","dayDisplayName","rate","room_types","unassigned_units_nbr","occupancy","flat","Promise","resolve","ExceptionCode","My_Params_Get_Rooming_Data","AC_ID","FROM","My_Params_Get_Exposed_Calendar","TO","myBookings","defaultMonths","error","console","fetchGuest","email","log","editExposedGuest","guest","book_nbr","Object","assign","getBookingAvailability","adultChildCount","language","room_type_ids","currency","adult_nbr","adult","child_nbr","child","currency_ref","code","getCountries","fetchSetupEntries","TBL_NAMES","res","arrivalTime","filter","e","TBL_NAME","ratePricingMode","bedPreferenceType","getBlockedInfo","getUserDefaultCountry","IP","blockUnit","params","getUserInfo","getExposedBooking","booking_nbr","generateDays","amount","startDate","Date","endDate","date","toISOString","split","setDate","getDate","calculateTotalRate","totalNights","isRateModified","preference","fetchExposedGuest","property_id","fetchExposedBookings","getPCICardInfoURL","BOOK_NBR","bookUser","bookedByInfoData","check_in","fromDate","toDate","guestData","source","rooms","bookingNumber","defaultGuest","pr_id","identifier","fromDateStr","dateToFormattedString","toDateStr","first_name","firstName","last_name","lastName","country_id","countryId","city","mobile","contactNumber","address","dob","subscribe_to_news_letter","emailGuest","cci","cardNumber","nbr","holder_name","cardHolderName","expiry_month","expiryMonth","expiry_year","expiryYear","id","body","assign_units","is_pms","is_direct","booking","remark","message","property","arrival","selectedArrivalTime","roomtype","roomCategoryId","name","roomCategoryName","physicalrooms","rateplans","availabilities","inventory","rateplan","ratePlanId","ratePlanName","rate_restrictions","variations","cancelation","guarantee","unit","roomId","adultCount","children_nbr","childrenCount","infant_nbr","bed_preference","notes","this","rateType","guestName"],"sources":["src/services/booking.service.ts"],"sourcesContent":["import { DayData } from '../models/DayType';\r\nimport axios from 'axios';\r\nimport { BookingDetails, IBlockUnit, ICountry, IEntries, ISetupEntries, MonthType } from '../models/IBooking';\r\n\r\nimport { convertDateToCustomFormat, convertDateToTime, dateToFormattedString } from '../utils/utils';\r\nimport { getMyBookings } from '../utils/booking';\r\nimport { Booking, Day, Guest } from '../models/booking.dto';\r\n\r\nexport class BookingService {\r\n  public async getCalendarData(propertyid: number, from_date: string, to_date: string): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Calendar?Ticket=${token}`, {\r\n          propertyid,\r\n          from_date,\r\n          to_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const months: MonthType[] = data.My_Result.months;\r\n        const customMonths: { daysCount: number; monthName: string }[] = [];\r\n        const myBooking = await getMyBookings(months);\r\n        const days: DayData[] = months\r\n          .map(month => {\r\n            customMonths.push({\r\n              daysCount: month.days.length,\r\n              monthName: month.description,\r\n            });\r\n            return month.days.map(day => ({\r\n              day: convertDateToCustomFormat(day.description, month.description),\r\n              currentDate: convertDateToTime(day.description, month.description),\r\n              dayDisplayName: day.description,\r\n              rate: day.room_types,\r\n              unassigned_units_nbr: day.unassigned_units_nbr,\r\n              occupancy: day.occupancy,\r\n            }));\r\n          })\r\n          .flat();\r\n\r\n        return Promise.resolve({\r\n          ExceptionCode: null,\r\n          ExceptionMsg: '',\r\n          My_Params_Get_Rooming_Data: {\r\n            AC_ID: propertyid,\r\n            FROM: data.My_Params_Get_Exposed_Calendar.from_date,\r\n            TO: data.My_Params_Get_Exposed_Calendar.to_date,\r\n          },\r\n          days,\r\n          months: customMonths,\r\n          myBookings: myBooking,\r\n          defaultMonths: months,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  public async fetchGuest(email: string): Promise<Guest> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Guest?Ticket=${token}`, { email });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async editExposedGuest(guest: Guest, book_nbr: string): Promise<any> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Edit_Exposed_Guest?Ticket=${token}`, { ...guest, book_nbr });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBookingAvailability(\r\n    from_date: string,\r\n    to_date: string,\r\n    propertyid: number,\r\n    adultChildCount: { adult: number; child: number },\r\n    language: string,\r\n    room_type_ids: number[],\r\n    currency: { id: number; code: string },\r\n  ): Promise<BookingDetails> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Booking_Availability?Ticket=${token}`, {\r\n          propertyid,\r\n          from_date,\r\n          to_date,\r\n          adult_nbr: adultChildCount.adult,\r\n          child_nbr: adultChildCount.child,\r\n          language,\r\n          currency_ref: currency.code,\r\n          room_type_ids,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getCountries(language: string): Promise<ICountry[]> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Countries?Ticket=${token}`, {\r\n          language,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI?Ticket=${token}`, {\r\n          TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const res: any[] = data.My_Result;\r\n        return {\r\n          arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n\r\n          ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n          bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBlockedInfo(): Promise<IEntries[]> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI?Ticket=${token}`, { TBL_NAMES: ['_CALENDAR_BLOCKED_TILL'] });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUserDefaultCountry() {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Country_By_IP?Ticket=${token}`, {\r\n          IP: '',\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async blockUnit(params: IBlockUnit) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Block_Exposed_Unit?Ticket=${token}`, params);\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data);\r\n        return data['My_Params_Block_Exposed_Unit'];\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getUserInfo(email: string) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/GET_EXPOSED_GUEST?Ticket=${token}`, {\r\n          email,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBooking(booking_nbr: string, language: string): Promise<Booking> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Booking?Ticket=${token}`, {\r\n          booking_nbr,\r\n          language,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private generateDays(from_date: string, to_date: string, amount: number): Day[] {\r\n    const startDate = new Date(from_date);\r\n    const endDate = new Date(to_date);\r\n    const days: Day[] = [];\r\n\r\n    while (startDate < endDate) {\r\n      days.push({\r\n        date: startDate.toISOString().split('T')[0],\r\n        amount: amount,\r\n      });\r\n      startDate.setDate(startDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n  private calculateTotalRate(rate: number, totalNights: number, isRateModified: boolean, preference: number) {\r\n    if (isRateModified && preference === 2) {\r\n      return +rate;\r\n    }\r\n    return +rate / +totalNights;\r\n  }\r\n  public async fetchExposedGuest(email: string, property_id: number) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Fetch_Exposed_Guests?Ticket=${token}`, {\r\n          email,\r\n          property_id,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchExposedBookings(booking_nbr: string, property_id: number, from_date: string, to_date: string) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Fetch_Exposed_Bookings?Ticket=${token}`, {\r\n          booking_nbr,\r\n          property_id,\r\n          from_date,\r\n          to_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getPCICardInfoURL(BOOK_NBR: string) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_PCI_Card_Info_URL?Ticket=${token}`, {\r\n          BOOK_NBR,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async bookUser(\r\n    bookedByInfoData,\r\n    check_in: boolean,\r\n    fromDate: Date,\r\n    toDate: Date,\r\n    guestData,\r\n    totalNights: number,\r\n    source: { code: string; description: string },\r\n    propertyid: number,\r\n    rooms: any[],\r\n    currency: { id: number; code: string },\r\n    bookingNumber?: string,\r\n    defaultGuest?: any,\r\n    arrivalTime?: any,\r\n    pr_id?: number,\r\n    identifier?: string,\r\n  ) {\r\n    console.log(arrivalTime);\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const fromDateStr = dateToFormattedString(fromDate);\r\n        const toDateStr = dateToFormattedString(toDate);\r\n        let guest: any = {\r\n          email: bookedByInfoData.email || null,\r\n          first_name: bookedByInfoData.firstName,\r\n          last_name: bookedByInfoData.lastName,\r\n          country_id: bookedByInfoData.countryId,\r\n          city: null,\r\n          mobile: bookedByInfoData.contactNumber,\r\n          address: '',\r\n          dob: null,\r\n          subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n          cci: bookedByInfoData.cardNumber\r\n            ? {\r\n                nbr: bookedByInfoData.cardNumber,\r\n                holder_name: bookedByInfoData.cardHolderName,\r\n                expiry_month: bookedByInfoData.expiryMonth,\r\n                expiry_year: bookedByInfoData.expiryYear,\r\n              }\r\n            : null,\r\n        };\r\n        if (bookedByInfoData.id) {\r\n          guest = { ...guest, id: bookedByInfoData.id };\r\n        }\r\n        const body = {\r\n          assign_units: true,\r\n          check_in,\r\n          is_pms: true,\r\n          is_direct: true,\r\n          booking: {\r\n            booking_nbr: bookingNumber || '',\r\n            from_date: fromDateStr,\r\n            to_date: toDateStr,\r\n            remark: bookedByInfoData.message || null,\r\n            property: {\r\n              id: propertyid,\r\n            },\r\n            source,\r\n            currency,\r\n            arrival: arrivalTime\r\n              ? { code: arrivalTime }\r\n              : {\r\n                  ...bookedByInfoData.selectedArrivalTime,\r\n                },\r\n            guest: defaultGuest || guest,\r\n            rooms: [\r\n              ...guestData.map(data => ({\r\n                identifier: identifier || null,\r\n                roomtype: {\r\n                  id: data.roomCategoryId,\r\n                  name: data.roomCategoryName,\r\n                  physicalrooms: null,\r\n                  rateplans: null,\r\n                  availabilities: null,\r\n                  inventory: data.inventory,\r\n                  rate: data.rate / totalNights,\r\n                },\r\n                rateplan: {\r\n                  id: data.ratePlanId,\r\n                  name: data.ratePlanName,\r\n                  rate_restrictions: null,\r\n                  variations: null,\r\n                  cancelation: data.cancelation,\r\n                  guarantee: data.guarantee,\r\n                },\r\n                unit: typeof pr_id === 'undefined' && data.roomId === '' ? null : { id: +pr_id || +data.roomId },\r\n                occupancy: {\r\n                  adult_nbr: data.adultCount,\r\n                  children_nbr: data.childrenCount,\r\n                  infant_nbr: null,\r\n                },\r\n                bed_preference: data.preference,\r\n                from_date: fromDateStr,\r\n                to_date: toDateStr,\r\n                notes: null,\r\n                days: this.generateDays(fromDateStr, toDateStr, this.calculateTotalRate(data.rate, totalNights, data.isRateModified, data.rateType)),\r\n                guest: {\r\n                  email: null,\r\n                  first_name: data.guestName,\r\n                  last_name: null,\r\n                  country_id: null,\r\n                  city: null,\r\n                  mobile: null,\r\n                  address: null,\r\n                  dob: null,\r\n                  subscribe_to_news_letter: null,\r\n                },\r\n              })),\r\n              ...rooms,\r\n            ],\r\n          },\r\n        };\r\n        console.log('book user payload', body);\r\n        const { data } = await axios.post(`/DoReservation?Ticket=${token}`, body);\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data['My_Result']);\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error('Invalid token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"}