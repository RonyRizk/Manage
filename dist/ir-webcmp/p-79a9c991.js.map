{"version":3,"names":["initialState","days","months","state","calendar_dates","onChange","onCalendarDatesChange","createStore","unassigned_dates","handleUnAssignedDatesChange","addUnassingedDates","data","Object","assign","console","log","getUnassignedDates","removeUnassignedDates","from_date","to_date","fromTimestamp","convertToDateTimestamp","toTimestamp","keys","forEach","key","keyTimestamp","parseInt","dateStr","date","Date","setHours","getTime"],"sources":["src/stores/calendar-dates.store.ts","src/stores/unassigned_dates.store.ts"],"sourcesContent":["import { DayData } from '@/models/DayType';\r\nimport { createStore } from '@stencil/store';\r\nexport interface ICalendarDates {\r\n  days: DayData[];\r\n  months: { daysCount: number; monthName: string }[];\r\n}\r\nconst initialState: ICalendarDates = {\r\n  days: [],\r\n  months: [],\r\n};\r\nexport const { state: calendar_dates, onChange: onCalendarDatesChange } = createStore<ICalendarDates>(initialState);\r\n\r\nexport default calendar_dates;\r\n","import { createStore } from '@stencil/store';\r\n\r\ntype EventCategories = {};\r\n\r\ntype EventInfo = {\r\n  categories: EventCategories;\r\n  dateStr: string;\r\n};\r\n\r\ntype UnassignedDates = {\r\n  [timestamp: string]: EventInfo;\r\n};\r\ninterface IUnassignedDatesStore {\r\n  unassigned_dates: UnassignedDates;\r\n}\r\n\r\nconst initialState: IUnassignedDatesStore = {\r\n  unassigned_dates: {},\r\n};\r\nexport let { state: unassigned_dates, onChange: handleUnAssignedDatesChange } = createStore<IUnassignedDatesStore>(initialState);\r\n\r\nexport function addUnassingedDates(data: UnassignedDates) {\r\n  unassigned_dates.unassigned_dates = { ...unassigned_dates.unassigned_dates, ...data };\r\n  /*\r\n   try {\r\n      //console.log(\"called\")\r\n      let categorisedRooms = {};\r\n      const result = await this.toBeAssignedService.getUnassignedRooms(\r\n        this.propertyid,\r\n        dateToFormattedString(new Date(+key)),\r\n        calendarData.roomsInfo,\r\n        calendarData.formattedLegendData,\r\n      );\r\n      result.forEach(room => {\r\n        if (!categorisedRooms.hasOwnProperty(room.RT_ID)) {\r\n          categorisedRooms[room.RT_ID] = [room];\r\n        } else {\r\n          categorisedRooms[room.RT_ID].push(room);\r\n        }\r\n      });\r\n      this.unassignedDates[key].categories = categorisedRooms;\r\n    } catch (error) {\r\n      //  toastr.error(error);\r\n    }\r\n  */\r\n  console.log(unassigned_dates.unassigned_dates);\r\n}\r\nexport function getUnassignedDates() {\r\n  return unassigned_dates.unassigned_dates;\r\n}\r\nexport function removeUnassignedDates(from_date: string, to_date: string) {\r\n  const fromTimestamp = convertToDateTimestamp(from_date);\r\n  const toTimestamp = convertToDateTimestamp(to_date);\r\n  Object.keys(unassigned_dates.unassigned_dates).forEach(key => {\r\n    const keyTimestamp = parseInt(key);\r\n    if (fromTimestamp <= keyTimestamp && keyTimestamp <= toTimestamp) {\r\n      delete unassigned_dates.unassigned_dates[key];\r\n    }\r\n  });\r\n}\r\nfunction convertToDateTimestamp(dateStr: string) {\r\n  const date = new Date(dateStr);\r\n  date.setHours(0, 0, 0, 0);\r\n  return date.getTime();\r\n}\r\n\r\nexport default unassigned_dates;\r\n"],"mappings":"oCAMA,MAAMA,EAA+B,CACnCC,KAAM,GACNC,OAAQ,I,MAEKC,MAAOC,EAAgBC,SAAUC,GAA0BC,EAA4BP,GCMtG,MAAMA,EAAsC,CAC1CQ,iBAAkB,I,IAEPL,MAAOK,EAAkBH,SAAUI,GAAgCF,EAAmCP,G,SAEnGU,EAAmBC,GACjCH,EAAiBA,iBAAgBI,OAAAC,OAAAD,OAAAC,OAAA,GAAQL,EAAiBA,kBAAqBG,GAuB/EG,QAAQC,IAAIP,EAAiBA,iBAC/B,C,SACgBQ,IACd,OAAOR,EAAiBA,gBAC1B,C,SACgBS,EAAsBC,EAAmBC,GACvD,MAAMC,EAAgBC,EAAuBH,GAC7C,MAAMI,EAAcD,EAAuBF,GAC3CP,OAAOW,KAAKf,EAAiBA,kBAAkBgB,SAAQC,IACrD,MAAMC,EAAeC,SAASF,GAC9B,GAAIL,GAAiBM,GAAgBA,GAAgBJ,EAAa,QACzDd,EAAiBA,iBAAiBiB,E,IAG/C,CACA,SAASJ,EAAuBO,GAC9B,MAAMC,EAAO,IAAIC,KAAKF,GACtBC,EAAKE,SAAS,EAAG,EAAG,EAAG,GACvB,OAAOF,EAAKG,SACd,Q"}