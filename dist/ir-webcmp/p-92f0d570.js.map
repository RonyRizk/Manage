{"version":3,"names":["async","getMyBookings","months","myBookings","stayStatus","getStayStatus","month","day","days","room","room_types","assignBooking","physicalrooms","physicalRoom","key","calendar_cell","Is_Available","addOrUpdateBooking","status","bookingStatus","formatName","firstName","lastName","token","JSON","parse","sessionStorage","getItem","data","axios","post","TBL_NAMES","My_Result","map","d","code","CODE_NAME","value","CODE_VALUE_EN","Error","error","console","log","renderBlock003Date","date","hour","minute","dt","Date","setHours","setMinutes","locales","entries","Lcz_BlockedTill","moment","format","getDefaultData","cell","isBlockUnit","STAY_STATUS_CODE","ID","POOL","NOTES","BALANCE","NAME","My_Block_Info","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","find","st","RELEASE_AFTER_HOURS","DESCRIPTION","PR_ID","pr_id","ENTRY_DATE","ENTRY_HOUR","ENTRY_MINUTE","OPTIONAL_REASON","FROM_DATE","DATE","TO_DATE","NO_OF_DAYS","STATUS","STATUS_CODE","OUT_OF_SERVICE","FROM_DATE_STR","from_date","TO_DATE_STR","to_date","_a","booking","guest","first_name","last_name","IDENTIFIER","identifier","BOOKING_NUMBER","booking_nbr","remark","is_direct","_b","financial","due_amount","updateBookingWithStayData","dateDifference","arrival","Object","assign","ARRIVAL_TIME","description","index","findIndex","newData","push","updatedData","transformNewBooking","bookings","renderStatus","now","toDate","fromDate","isSame","isAfter","isBefore","rooms","forEach","length","ARRIVAL","IS_EDITABLE","PHONE","mobile","RATE","total","RATE_PLAN","rateplan","name","SPLIT_BOOKING","RATE_PLAN_ID","id","RATE_TYPE","roomtype","ADULTS_COUNT","occupancy","adult_nbr","CHILDREN_COUNT","children_nbr","unit","GUEST","ROOMS","cancelation","guarantee","TOTAL_PRICE","COUNTRY","country_id","adult_child_offering","selected_variation","origin","channel_booking_nbr","SOURCE","source","tag","transformNewBLockedRooms","calculateDaysBetweenDates","startDate","endDate","daysDiff","diff","BookingService","getCalendarData","propertyid","ExceptionMsg","customMonths","myBooking","daysCount","monthName","convertDateToCustomFormat","currentDate","convertDateToTime","dayDisplayName","rate","unassigned_units_nbr","flat","Promise","resolve","ExceptionCode","My_Params_Get_Rooming_Data","AC_ID","FROM","My_Params_Get_Exposed_Calendar","TO","defaultMonths","fetchGuest","email","editExposedGuest","book_nbr","getBookingAvailability","adultChildCount","language","room_type_ids","currency","adult","child_nbr","child","currency_ref","getCountries","fetchSetupEntries","res","arrivalTime","filter","e","TBL_NAME","ratePricingMode","bedPreferenceType","getBlockedInfo","getUserDefaultCountry","IP","blockUnit","params","getUserInfo","getExposedBooking","generateDays","amount","toISOString","split","setDate","getDate","calculateTotalRate","totalNights","isRateModified","preference","fetchExposedGuest","property_id","fetchExposedBookings","getPCICardInfoURL","BOOK_NBR","bookUser","bookedByInfoData","check_in","guestData","bookingNumber","defaultGuest","fromDateStr","dateToFormattedString","toDateStr","countryId","city","contactNumber","address","dob","subscribe_to_news_letter","emailGuest","cci","cardNumber","nbr","holder_name","cardHolderName","expiry_month","expiryMonth","expiry_year","expiryYear","body","assign_units","is_pms","message","property","selectedArrivalTime","roomCategoryId","roomCategoryName","rateplans","availabilities","inventory","ratePlanId","ratePlanName","rate_restrictions","variations","roomId","adultCount","childrenCount","infant_nbr","bed_preference","notes","this","rateType","guestName"],"sources":["src/utils/booking.ts","src/services/booking.service.ts"],"sourcesContent":["import moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null) {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const token = JSON.parse(sessionStorage.getItem('token'));\r\n    if (token) {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi?Ticket=${token}`, {\r\n        TBL_NAMES: ['_STAY_STATUS'],\r\n      });\r\n      return data.My_Result.map(d => ({\r\n        code: d.CODE_NAME,\r\n        value: d.CODE_VALUE_EN,\r\n      }));\r\n    } else {\r\n      throw new Error('Invalid Token');\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: cell.DATE,\r\n      TO_DATE: cell.DATE,\r\n      NO_OF_DAYS: 1,\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n    };\r\n  }\r\n  //console.log('booking', cell);\r\n  return {\r\n    ID: cell.POOL,\r\n    TO_DATE: cell.DATE,\r\n    FROM_DATE: cell.DATE,\r\n    NO_OF_DAYS: 1,\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(cell.room.guest.first_name, cell.room.guest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.remark,\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    ///from here\r\n    //ENTRY_DATE: cell.booking.booked_on.date,\r\n    // IS_EDITABLE: cell.booking.is_editable,\r\n    // ARRIVAL: cell.booking.arrival,\r\n    // PHONE: cell.booking.guest.mobile ?? '',\r\n    // RATE: cell.room.total,\r\n    // RATE_PLAN: cell.room.rateplan.name,\r\n    // SPLIT_BOOKING: false,\r\n    // RATE_PLAN_ID: cell.room.rateplan.id,\r\n    // RATE_TYPE: 1,\r\n    // ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    // CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    // channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    // origin: cell.booking.origin,\r\n    // GUEST: cell.booking.guest,\r\n    // ROOMS: cell.booking.rooms,\r\n    // cancelation: cell.room.rateplan.cancelation,\r\n    // guarantee: cell.room.rateplan.guarantee,\r\n    // TOTAL_PRICE: cell.room.total,\r\n    // COUNTRY: cell.booking.guest.country_id,\r\n    // FROM_DATE_STR: cell.booking.format.from_date,\r\n    // TO_DATE_STR: cell.booking.format.to_date,\r\n    // adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    // SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n  };\r\n}\r\n\r\nfunction updateBookingWithStayData(data: any, cell: CellType): any {\r\n  data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n  data.TO_DATE = cell.DATE;\r\n  if (cell.booking) {\r\n    const { arrival } = cell.booking;\r\n    Object.assign(data, {\r\n      ARRIVAL_TIME: arrival.description,\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  } else {\r\n    const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n    myBookings[index] = updatedData;\r\n  }\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  //console.log(data);\r\n  const renderStatus = room => {\r\n    const now = moment();\r\n    const toDate = moment(room.to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(room.from_date, 'YYYY-MM-DD');\r\n\r\n    if (fromDate.isSame(now, 'day') && now.hour() >= 12) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && now.hour() < 12) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && now.hour() >= 12) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[data?.status.code || '001'];\r\n    }\r\n    // if (toDate.isBefore(now, 'day') || (toDate.isSame(now, 'day') && now.hour() >= 12)) {\r\n    //   return bookingStatus['003'];\r\n    // } else {\r\n    //   return bookingStatus[fromDate.isSameOrBefore(now, 'day') ? '000' : data?.status.code || '001'];\r\n    // }\r\n  };\r\n\r\n  data.rooms.forEach(room => {\r\n    bookings.push({\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: room.to_date,\r\n      FROM_DATE: room.from_date,\r\n      NO_OF_DAYS: room.days.length,\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: renderStatus(room),\r\n      NAME: formatName(room.guest.first_name, room.guest.last_name),\r\n      PHONE: data.guest.mobile ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: room.total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.remark,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n    });\r\n  });\r\n\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff;\r\n}\r\n","import { DayData } from '../models/DayType';\r\nimport axios from 'axios';\r\nimport { BookingDetails, IBlockUnit, ICountry, IEntries, ISetupEntries, MonthType } from '../models/IBooking';\r\n\r\nimport { convertDateToCustomFormat, convertDateToTime, dateToFormattedString } from '../utils/utils';\r\nimport { getMyBookings } from '../utils/booking';\r\nimport { Booking, Day, Guest } from '../models/booking.dto';\r\n\r\nexport class BookingService {\r\n  public async getCalendarData(propertyid: number, from_date: string, to_date: string): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Calendar?Ticket=${token}`, {\r\n          propertyid,\r\n          from_date,\r\n          to_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const months: MonthType[] = data.My_Result.months;\r\n        const customMonths: { daysCount: number; monthName: string }[] = [];\r\n        const myBooking = await getMyBookings(months);\r\n        const days: DayData[] = months\r\n          .map(month => {\r\n            customMonths.push({\r\n              daysCount: month.days.length,\r\n              monthName: month.description,\r\n            });\r\n            return month.days.map(day => ({\r\n              day: convertDateToCustomFormat(day.description, month.description),\r\n              currentDate: convertDateToTime(day.description, month.description),\r\n              dayDisplayName: day.description,\r\n              rate: day.room_types,\r\n              unassigned_units_nbr: day.unassigned_units_nbr,\r\n              occupancy: day.occupancy,\r\n            }));\r\n          })\r\n          .flat();\r\n\r\n        return Promise.resolve({\r\n          ExceptionCode: null,\r\n          ExceptionMsg: '',\r\n          My_Params_Get_Rooming_Data: {\r\n            AC_ID: propertyid,\r\n            FROM: data.My_Params_Get_Exposed_Calendar.from_date,\r\n            TO: data.My_Params_Get_Exposed_Calendar.to_date,\r\n          },\r\n          days,\r\n          months: customMonths,\r\n          myBookings: myBooking,\r\n          defaultMonths: months,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  public async fetchGuest(email: string): Promise<Guest> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Guest?Ticket=${token}`, { email });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async editExposedGuest(guest: Guest, book_nbr: string): Promise<any> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Edit_Exposed_Guest?Ticket=${token}`, { ...guest, book_nbr });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBookingAvailability(\r\n    from_date: string,\r\n    to_date: string,\r\n    propertyid: number,\r\n    adultChildCount: { adult: number; child: number },\r\n    language: string,\r\n    room_type_ids: number[],\r\n    currency: { id: number; code: string },\r\n  ): Promise<BookingDetails> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Booking_Availability?Ticket=${token}`, {\r\n          propertyid,\r\n          from_date,\r\n          to_date,\r\n          adult_nbr: adultChildCount.adult,\r\n          child_nbr: adultChildCount.child,\r\n          language,\r\n          currency_ref: currency.code,\r\n          room_type_ids,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getCountries(language: string): Promise<ICountry[]> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Countries?Ticket=${token}`, {\r\n          language,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI?Ticket=${token}`, {\r\n          TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const res: any[] = data.My_Result;\r\n        return {\r\n          arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n\r\n          ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n          bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBlockedInfo(): Promise<IEntries[]> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI?Ticket=${token}`, { TBL_NAMES: ['_CALENDAR_BLOCKED_TILL'] });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUserDefaultCountry() {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Country_By_IP?Ticket=${token}`, {\r\n          IP: '',\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async blockUnit(params: IBlockUnit) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Block_Exposed_Unit?Ticket=${token}`, params);\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data);\r\n        return data['My_Params_Block_Exposed_Unit'];\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getUserInfo(email: string) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/GET_EXPOSED_GUEST?Ticket=${token}`, {\r\n          email,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBooking(booking_nbr: string, language: string): Promise<Booking> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Booking?Ticket=${token}`, {\r\n          booking_nbr,\r\n          language,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private generateDays(from_date: string, to_date: string, amount: number): Day[] {\r\n    const startDate = new Date(from_date);\r\n    const endDate = new Date(to_date);\r\n    const days: Day[] = [];\r\n\r\n    while (startDate < endDate) {\r\n      days.push({\r\n        date: startDate.toISOString().split('T')[0],\r\n        amount: amount,\r\n      });\r\n      startDate.setDate(startDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n  private calculateTotalRate(rate: number, totalNights: number, isRateModified: boolean, preference: number) {\r\n    if (isRateModified && preference === 2) {\r\n      return +rate;\r\n    }\r\n    return +rate / +totalNights;\r\n  }\r\n  public async fetchExposedGuest(email: string, property_id: number) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Fetch_Exposed_Guests?Ticket=${token}`, {\r\n          email,\r\n          property_id,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchExposedBookings(booking_nbr: string, property_id: number, from_date: string, to_date: string) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Fetch_Exposed_Bookings?Ticket=${token}`, {\r\n          booking_nbr,\r\n          property_id,\r\n          from_date,\r\n          to_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getPCICardInfoURL(BOOK_NBR: string) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_PCI_Card_Info_URL?Ticket=${token}`, {\r\n          BOOK_NBR,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async bookUser(\r\n    bookedByInfoData,\r\n    check_in: boolean,\r\n    fromDate: Date,\r\n    toDate: Date,\r\n    guestData,\r\n    totalNights: number,\r\n    source: { code: string; description: string },\r\n    propertyid: number,\r\n    rooms: any[],\r\n    currency: { id: number; code: string },\r\n    bookingNumber?: string,\r\n    defaultGuest?: any,\r\n    arrivalTime?: any,\r\n    pr_id?: number,\r\n    identifier?: string,\r\n  ) {\r\n    console.log(arrivalTime);\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem('token'));\r\n      if (token) {\r\n        const fromDateStr = dateToFormattedString(fromDate);\r\n        const toDateStr = dateToFormattedString(toDate);\r\n        let guest: any = {\r\n          email: bookedByInfoData.email || null,\r\n          first_name: bookedByInfoData.firstName,\r\n          last_name: bookedByInfoData.lastName,\r\n          country_id: bookedByInfoData.countryId,\r\n          city: null,\r\n          mobile: bookedByInfoData.contactNumber,\r\n          address: '',\r\n          dob: null,\r\n          subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n          cci: bookedByInfoData.cardNumber\r\n            ? {\r\n                nbr: bookedByInfoData.cardNumber,\r\n                holder_name: bookedByInfoData.cardHolderName,\r\n                expiry_month: bookedByInfoData.expiryMonth,\r\n                expiry_year: bookedByInfoData.expiryYear,\r\n              }\r\n            : null,\r\n        };\r\n        if (bookedByInfoData.id) {\r\n          guest = { ...guest, id: bookedByInfoData.id };\r\n        }\r\n        const body = {\r\n          assign_units: true,\r\n          check_in,\r\n          is_pms: true,\r\n          is_direct: true,\r\n          booking: {\r\n            booking_nbr: bookingNumber || '',\r\n            from_date: fromDateStr,\r\n            to_date: toDateStr,\r\n            remark: bookedByInfoData.message || null,\r\n            property: {\r\n              id: propertyid,\r\n            },\r\n            source,\r\n            currency,\r\n            arrival: arrivalTime\r\n              ? { code: arrivalTime }\r\n              : {\r\n                  ...bookedByInfoData.selectedArrivalTime,\r\n                },\r\n            guest: defaultGuest || guest,\r\n            rooms: [\r\n              ...guestData.map(data => ({\r\n                identifier: identifier || null,\r\n                roomtype: {\r\n                  id: data.roomCategoryId,\r\n                  name: data.roomCategoryName,\r\n                  physicalrooms: null,\r\n                  rateplans: null,\r\n                  availabilities: null,\r\n                  inventory: data.inventory,\r\n                  rate: data.rate / totalNights,\r\n                },\r\n                rateplan: {\r\n                  id: data.ratePlanId,\r\n                  name: data.ratePlanName,\r\n                  rate_restrictions: null,\r\n                  variations: null,\r\n                  cancelation: data.cancelation,\r\n                  guarantee: data.guarantee,\r\n                },\r\n                unit: typeof pr_id === 'undefined' && data.roomId === '' ? null : { id: +pr_id || +data.roomId },\r\n                occupancy: {\r\n                  adult_nbr: data.adultCount,\r\n                  children_nbr: data.childrenCount,\r\n                  infant_nbr: null,\r\n                },\r\n                bed_preference: data.preference,\r\n                from_date: fromDateStr,\r\n                to_date: toDateStr,\r\n                notes: null,\r\n                days: this.generateDays(fromDateStr, toDateStr, this.calculateTotalRate(data.rate, totalNights, data.isRateModified, data.rateType)),\r\n                guest: {\r\n                  email: null,\r\n                  first_name: data.guestName,\r\n                  last_name: null,\r\n                  country_id: null,\r\n                  city: null,\r\n                  mobile: null,\r\n                  address: null,\r\n                  dob: null,\r\n                  subscribe_to_news_letter: null,\r\n                },\r\n              })),\r\n              ...rooms,\r\n            ],\r\n          },\r\n        };\r\n        console.log('book user payload', body);\r\n        const { data } = await axios.post(`/DoReservation?Ticket=${token}`, body);\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data['My_Result']);\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error('Invalid token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"}