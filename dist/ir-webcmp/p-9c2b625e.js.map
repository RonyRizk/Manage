{"version":3,"names":["BookingService","Token","getCalendarData","propertyid","from_date","to_date","token","this","getToken","data","axios","post","ExceptionMsg","Error","months","My_Result","customMonths","myBooking","getMyBookings","days","map","month","push","daysCount","length","monthName","description","day","convertDateToCustomFormat","currentDate","convertDateToTime","dayDisplayName","rate","room_types","unassigned_units_nbr","occupancy","flat","Promise","resolve","ExceptionCode","My_Params_Get_Rooming_Data","AC_ID","FROM","My_Params_Get_Exposed_Calendar","TO","myBookings","defaultMonths","error","console","fetchGuest","email","log","editExposedGuest","guest","book_nbr","Object","assign","getBookingAvailability","adultChildCount","language","room_type_ids","currency","adult_nbr","adult","child_nbr","child","currency_ref","code","getCountries","fetchSetupEntries","TBL_NAMES","res","arrivalTime","filter","e","TBL_NAME","ratePricingMode","bedPreferenceType","getBlockedInfo","getUserDefaultCountry","IP","blockUnit","params","getUserInfo","getExposedBooking","booking_nbr","generateDays","amount","startDate","Date","endDate","date","toISOString","split","setDate","getDate","calculateTotalRate","totalNights","isRateModified","preference","fetchExposedGuest","property_id","fetchExposedBookings","getPCICardInfoURL","BOOK_NBR","bookUser","bookedByInfoData","check_in","fromDate","toDate","guestData","source","rooms","bookingNumber","defaultGuest","pr_id","identifier","fromDateStr","dateToFormattedString","toDateStr","first_name","firstName","last_name","lastName","country_id","countryId","city","mobile","contactNumber","address","dob","subscribe_to_news_letter","emailGuest","cci","cardNumber","nbr","holder_name","cardHolderName","expiry_month","expiryMonth","expiry_year","expiryYear","id","body","assign_units","is_pms","is_direct","booking","remark","message","property","arrival","selectedArrivalTime","roomtype","roomCategoryId","name","roomCategoryName","physicalrooms","rateplans","availabilities","inventory","rateplan","ratePlanId","ratePlanName","rate_restrictions","variations","cancelation","guarantee","unit","roomId","adultCount","children_nbr","childrenCount","infant_nbr","bed_preference","notes","rateType","guestName","bookingStatus","formatName","transformNewBooking","bookings","renderStatus","room","now","moment","isSame","hour","isAfter","isBefore","status","forEach","ID","TO_DATE","FROM_DATE","NO_OF_DAYS","ARRIVAL","IS_EDITABLE","BALANCE","_a","financial","due_amount","STATUS","NAME","PHONE","_b","ENTRY_DATE","RATE","total","RATE_PLAN","SPLIT_BOOKING","RATE_PLAN_ID","IDENTIFIER","RATE_TYPE","ADULTS_COUNT","CHILDREN_COUNT","PR_ID","POOL","GUEST","ROOMS","BOOKING_NUMBER","TOTAL_PRICE","gross_total","COUNTRY","FROM_DATE_STR","format","TO_DATE_STR","adult_child_offering","selected_variation","ARRIVAL_TIME","origin","channel_booking_nbr","NOTES","SOURCE","tag","ota_notes","calculateDaysBetweenDates","daysDiff","diff","isBlockUnit","status_code","includes","getCurrencySymbol","currencyCode","formatter","Intl","NumberFormat","undefined","style","minimumFractionDigits","maximumFractionDigits","replace","trim","renderTime","time","toString","padStart","formatAmount","symbol","toFixed"],"sources":["src/services/booking.service.ts","src/utils/booking.ts","src/utils/utils.ts"],"sourcesContent":["import { DayData } from '../models/DayType';\r\nimport axios from 'axios';\r\nimport { BookingDetails, IBlockUnit, ICountry, IEntries, ISetupEntries, MonthType } from '../models/IBooking';\r\n\r\nimport { convertDateToCustomFormat, convertDateToTime, dateToFormattedString } from '../utils/utils';\r\nimport { getMyBookings } from '../utils/booking';\r\nimport { Booking, Day, Guest } from '../models/booking.dto';\r\nimport { Token } from '@/models/Token';\r\n\r\nexport class BookingService extends Token {\r\n  public async getCalendarData(propertyid: number, from_date: string, to_date: string): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Calendar?Ticket=${token}`, {\r\n          propertyid,\r\n          from_date,\r\n          to_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const months: MonthType[] = data.My_Result.months;\r\n        const customMonths: { daysCount: number; monthName: string }[] = [];\r\n        const myBooking = await getMyBookings(months);\r\n        const days: DayData[] = months\r\n          .map(month => {\r\n            customMonths.push({\r\n              daysCount: month.days.length,\r\n              monthName: month.description,\r\n            });\r\n            return month.days.map(day => ({\r\n              day: convertDateToCustomFormat(day.description, month.description),\r\n              currentDate: convertDateToTime(day.description, month.description),\r\n              dayDisplayName: day.description,\r\n              rate: day.room_types,\r\n              unassigned_units_nbr: day.unassigned_units_nbr,\r\n              occupancy: day.occupancy,\r\n            }));\r\n          })\r\n          .flat();\r\n\r\n        return Promise.resolve({\r\n          ExceptionCode: null,\r\n          ExceptionMsg: '',\r\n          My_Params_Get_Rooming_Data: {\r\n            AC_ID: propertyid,\r\n            FROM: data.My_Params_Get_Exposed_Calendar.from_date,\r\n            TO: data.My_Params_Get_Exposed_Calendar.to_date,\r\n          },\r\n          days,\r\n          months: customMonths,\r\n          myBookings: myBooking,\r\n          defaultMonths: months,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  public async fetchGuest(email: string): Promise<Guest> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Get_Exposed_Guest?Ticket=${token}`, { email });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async editExposedGuest(guest: Guest, book_nbr: string): Promise<any> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token !== null) {\r\n        const { data } = await axios.post(`/Edit_Exposed_Guest?Ticket=${token}`, { ...guest, book_nbr });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBookingAvailability(\r\n    from_date: string,\r\n    to_date: string,\r\n    propertyid: number,\r\n    adultChildCount: { adult: number; child: number },\r\n    language: string,\r\n    room_type_ids: number[],\r\n    currency: { id: number; code: string },\r\n  ): Promise<BookingDetails> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Booking_Availability?Ticket=${token}`, {\r\n          propertyid,\r\n          from_date,\r\n          to_date,\r\n          adult_nbr: adultChildCount.adult,\r\n          child_nbr: adultChildCount.child,\r\n          language,\r\n          currency_ref: currency.code,\r\n          room_type_ids,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getCountries(language: string): Promise<ICountry[]> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Countries?Ticket=${token}`, {\r\n          language,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI?Ticket=${token}`, {\r\n          TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const res: any[] = data.My_Result;\r\n        return {\r\n          arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n\r\n          ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n          bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBlockedInfo(): Promise<IEntries[]> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI?Ticket=${token}`, { TBL_NAMES: ['_CALENDAR_BLOCKED_TILL'] });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUserDefaultCountry() {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Country_By_IP?Ticket=${token}`, {\r\n          IP: '',\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async blockUnit(params: IBlockUnit) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Block_Exposed_Unit?Ticket=${token}`, params);\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data);\r\n        return data['My_Params_Block_Exposed_Unit'];\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getUserInfo(email: string) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/GET_EXPOSED_GUEST?Ticket=${token}`, {\r\n          email,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBooking(booking_nbr: string, language: string): Promise<Booking> {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Exposed_Booking?Ticket=${token}`, {\r\n          booking_nbr,\r\n          language,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private generateDays(from_date: string, to_date: string, amount: number): Day[] {\r\n    const startDate = new Date(from_date);\r\n    const endDate = new Date(to_date);\r\n    const days: Day[] = [];\r\n\r\n    while (startDate < endDate) {\r\n      days.push({\r\n        date: startDate.toISOString().split('T')[0],\r\n        amount: amount,\r\n      });\r\n      startDate.setDate(startDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n  private calculateTotalRate(rate: number, totalNights: number, isRateModified: boolean, preference: number) {\r\n    if (isRateModified && preference === 2) {\r\n      return +rate;\r\n    }\r\n    return +rate / +totalNights;\r\n  }\r\n  public async fetchExposedGuest(email: string, property_id: number) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Fetch_Exposed_Guests?Ticket=${token}`, {\r\n          email,\r\n          property_id,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchExposedBookings(booking_nbr: string, property_id: number, from_date: string, to_date: string) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Fetch_Exposed_Bookings?Ticket=${token}`, {\r\n          booking_nbr,\r\n          property_id,\r\n          from_date,\r\n          to_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getPCICardInfoURL(BOOK_NBR: string) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_PCI_Card_Info_URL?Ticket=${token}`, {\r\n          BOOK_NBR,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async bookUser(\r\n    bookedByInfoData,\r\n    check_in: boolean,\r\n    fromDate: Date,\r\n    toDate: Date,\r\n    guestData,\r\n    totalNights: number,\r\n    source: { code: string; description: string },\r\n    propertyid: number,\r\n    rooms: any[],\r\n    currency: { id: number; code: string },\r\n    bookingNumber?: string,\r\n    defaultGuest?: any,\r\n    arrivalTime?: any,\r\n    pr_id?: number,\r\n    identifier?: string,\r\n  ) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const fromDateStr = dateToFormattedString(fromDate);\r\n        const toDateStr = dateToFormattedString(toDate);\r\n        let guest: any = {\r\n          email: bookedByInfoData.email || null,\r\n          first_name: bookedByInfoData.firstName,\r\n          last_name: bookedByInfoData.lastName,\r\n          country_id: bookedByInfoData.countryId === '' ? null : bookedByInfoData.countryId,\r\n          city: null,\r\n          mobile: bookedByInfoData.contactNumber === null ? '' : bookedByInfoData.contactNumber,\r\n          address: '',\r\n          dob: null,\r\n          subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n          cci: bookedByInfoData.cardNumber\r\n            ? {\r\n                nbr: bookedByInfoData.cardNumber,\r\n                holder_name: bookedByInfoData.cardHolderName,\r\n                expiry_month: bookedByInfoData.expiryMonth,\r\n                expiry_year: bookedByInfoData.expiryYear,\r\n              }\r\n            : null,\r\n        };\r\n        if (bookedByInfoData.id) {\r\n          guest = { ...guest, id: bookedByInfoData.id };\r\n        }\r\n        const body = {\r\n          assign_units: true,\r\n          check_in,\r\n          is_pms: true,\r\n          is_direct: true,\r\n          booking: {\r\n            booking_nbr: bookingNumber || '',\r\n            from_date: fromDateStr,\r\n            to_date: toDateStr,\r\n            remark: bookedByInfoData.message || null,\r\n            property: {\r\n              id: propertyid,\r\n            },\r\n            source,\r\n            currency,\r\n            arrival: { code: arrivalTime ? arrivalTime : bookedByInfoData.selectedArrivalTime },\r\n\r\n            guest: defaultGuest || guest,\r\n            rooms: [\r\n              ...guestData.map(data => ({\r\n                identifier: identifier || null,\r\n                roomtype: {\r\n                  id: data.roomCategoryId,\r\n                  name: data.roomCategoryName,\r\n                  physicalrooms: null,\r\n                  rateplans: null,\r\n                  availabilities: null,\r\n                  inventory: data.inventory,\r\n                  rate: data.rate / totalNights,\r\n                },\r\n                rateplan: {\r\n                  id: data.ratePlanId,\r\n                  name: data.ratePlanName,\r\n                  rate_restrictions: null,\r\n                  variations: null,\r\n                  cancelation: data.cancelation,\r\n                  guarantee: data.guarantee,\r\n                },\r\n                unit: typeof pr_id === 'undefined' && data.roomId === '' ? null : { id: +pr_id || +data.roomId },\r\n                occupancy: {\r\n                  adult_nbr: data.adultCount,\r\n                  children_nbr: data.childrenCount,\r\n                  infant_nbr: null,\r\n                },\r\n                bed_preference: data.preference,\r\n                from_date: fromDateStr,\r\n                to_date: toDateStr,\r\n                notes: null,\r\n                days: this.generateDays(fromDateStr, toDateStr, this.calculateTotalRate(data.rate, totalNights, data.isRateModified, data.rateType)),\r\n                guest: {\r\n                  email: null,\r\n                  first_name: data.guestName,\r\n                  last_name: null,\r\n                  country_id: null,\r\n                  city: null,\r\n                  mobile: null,\r\n                  address: null,\r\n                  dob: null,\r\n                  subscribe_to_news_letter: null,\r\n                },\r\n              })),\r\n              ...rooms,\r\n            ],\r\n          },\r\n        };\r\n        console.log('book user payload', body);\r\n        const { data } = await axios.post(`/DoReservation?Ticket=${token}`, body);\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data['My_Result']);\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error('Invalid token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n}\r\n","import moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const token = calendar_data.token;\r\n    if (token) {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi?Ticket=${token}`, {\r\n        TBL_NAMES: ['_STAY_STATUS'],\r\n      });\r\n      return data.My_Result.map(d => ({\r\n        code: d.CODE_NAME,\r\n        value: d.CODE_VALUE_EN,\r\n      }));\r\n    } else {\r\n      throw new Error('Invalid Token');\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: cell.DATE,\r\n      TO_DATE: cell.DATE,\r\n      NO_OF_DAYS: 1,\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n    };\r\n  }\r\n  //console.log('booking', cell);\r\n  // if (!cell.booking.is_direct) {\r\n  //   console.log(formatName(cell.room.guest.first_name, cell.room.guest.last_name), cell.booking.channel_booking_nbr);\r\n  // }\r\n  return {\r\n    ID: cell.POOL,\r\n    TO_DATE: cell.DATE,\r\n    FROM_DATE: cell.DATE,\r\n    NO_OF_DAYS: 1,\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(cell.room.guest.first_name, cell.room.guest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ///from here\r\n    //ENTRY_DATE: cell.booking.booked_on.date,\r\n    // IS_EDITABLE: cell.booking.is_editable,\r\n    // ARRIVAL: cell.booking.arrival,\r\n    // PHONE: cell.booking.guest.mobile ?? '',\r\n    // RATE: cell.room.total,\r\n    // RATE_PLAN: cell.room.rateplan.name,\r\n    // SPLIT_BOOKING: false,\r\n    // RATE_PLAN_ID: cell.room.rateplan.id,\r\n    // RATE_TYPE: 1,\r\n    // ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    // CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    // origin: cell.booking.origin,\r\n    // GUEST: cell.booking.guest,\r\n    // ROOMS: cell.booking.rooms,\r\n    // cancelation: cell.room.rateplan.cancelation,\r\n    // guarantee: cell.room.rateplan.guarantee,\r\n    // TOTAL_PRICE: cell.room.total,\r\n    // COUNTRY: cell.booking.guest.country_id,\r\n    // FROM_DATE_STR: cell.booking.format.from_date,\r\n    // TO_DATE_STR: cell.booking.format.to_date,\r\n    // adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    // SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n  };\r\n}\r\n\r\nfunction updateBookingWithStayData(data: any, cell: CellType): any {\r\n  data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n  data.TO_DATE = cell.DATE;\r\n  if (cell.booking) {\r\n    const { arrival } = cell.booking;\r\n    Object.assign(data, {\r\n      ARRIVAL_TIME: arrival.description,\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  } else {\r\n    const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n    myBookings[index] = updatedData;\r\n  }\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  //console.log(data);\r\n  const renderStatus = room => {\r\n    const now = moment();\r\n    const toDate = moment(room.to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(room.from_date, 'YYYY-MM-DD');\r\n\r\n    if (fromDate.isSame(now, 'day') && now.hour() >= 12) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && now.hour() < 12) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && now.hour() >= 12) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[data?.status.code || '001'];\r\n    }\r\n    // if (toDate.isBefore(now, 'day') || (toDate.isSame(now, 'day') && now.hour() >= 12)) {\r\n    //   return bookingStatus['003'];\r\n    // } else {\r\n    //   return bookingStatus[fromDate.isSameOrBefore(now, 'day') ? '000' : data?.status.code || '001'];\r\n    // }\r\n  };\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    bookings.push({\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: room.to_date,\r\n      FROM_DATE: room.from_date,\r\n      NO_OF_DAYS: room.days.length,\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: renderStatus(room),\r\n      NAME: formatName(room.guest.first_name, room.guest.last_name),\r\n      PHONE: data.guest.mobile ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: room.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n    });\r\n  });\r\n\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff;\r\n}\r\n","import moment from 'moment';\r\nimport IBooking, { ICountry, PhysicalRoomType } from '../models/IBooking';\r\n\r\nexport function convertDateToCustomFormat(dayWithWeekday: string, monthWithYear: string): string {\r\n  const dateStr = `${dayWithWeekday.split(' ')[1]} ${monthWithYear}`;\r\n  const date = moment(dateStr, 'DD MMM YYYY');\r\n  if (!date.isValid()) {\r\n    throw new Error('Invalid Date');\r\n  }\r\n  return date.format('D_M_YYYY');\r\n}\r\n\r\nexport function convertDateToTime(dayWithWeekday: string, monthWithYear: string): number {\r\n  const date = moment(dayWithWeekday + ' ' + monthWithYear, 'ddd DD MMM YYYY').toDate();\r\n  date.setHours(0, 0, 0, 0);\r\n  return date.getTime();\r\n}\r\nexport function dateDifference(FROM_DATE: string, TO_DATE: string): number {\r\n  const startDate = new Date(FROM_DATE);\r\n  const endDate = new Date(TO_DATE);\r\n  return Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n}\r\nexport const getBrowserLanguage = (): string => {\r\n  const defaultLang = 'en';\r\n  const lang = navigator.language || defaultLang;\r\n  return lang.toUpperCase().split('-')[0];\r\n};\r\n\r\nexport const transformBooking = (physicalRoom: PhysicalRoomType[]): IBooking[] => {\r\n  const myBookings: IBooking[] = [];\r\n  physicalRoom.forEach(room => {\r\n    Object.keys(room.calendar_cell).forEach(key => {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        if (myBookings.find(b => b.ID === room.id.toString())) {\r\n        } else {\r\n          //myBookings.push({})\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return myBookings;\r\n};\r\n\r\nexport function dateToFormattedString(date: Date): string {\r\n  const year = date.getFullYear();\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // +1 because months are 0-based in JS\r\n  const day = date.getDate().toString().padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport function formatLegendColors(legendData) {\r\n  let formattedLegendData: any = {};\r\n\r\n  const statusId = {\r\n    'IN-HOUSE': { id: 1, clsName: 'IN_HOUSE' },\r\n    'CONFIRMED': { id: 2, clsName: 'CONFIRMED' },\r\n    'PENDING-CONFIRMATION': { id: 3, clsName: 'PENDING_CONFIRMATION' },\r\n    'SPLIT-UNIT': { id: 4, clsName: 'SPLIT_UNIT' },\r\n    'CHECKED-IN': { id: 5, clsName: 'CHECKED_IN' },\r\n    'CHECKED-OUT': { id: 5, clsName: 'CHECKED_OUT' },\r\n    'BLOCKED': { id: 6, clsName: 'BLOCKED' },\r\n    'BLOCKED-WITH-DATES': { id: 7, clsName: 'BLOCKED_WITH_DATES' },\r\n    'NOTES': { id: 8, clsName: 'NOTES' },\r\n    'OUTSTANDING-BALANCE': { id: 9, clsName: 'OUTSTANDING_BALANCE' },\r\n    'TEMP-EVENT': { id: 10, clsName: 'PENDING_CONFIRMATION' },\r\n  };\r\n  legendData.forEach(legend => {\r\n    formattedLegendData[legend.id] = legend;\r\n    formattedLegendData.statusId = statusId; // NOTE: This will overwrite the 'statusId' property with every iteration.\r\n  });\r\n\r\n  return formattedLegendData;\r\n}\r\nexport function isBlockUnit(status_code: any) {\r\n  return ['003', '002', '004'].includes(status_code);\r\n}\r\nexport function getCurrencySymbol(currencyCode) {\r\n  const formatter = new Intl.NumberFormat(undefined, {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  });\r\n  return formatter.format(0).replace(/[0-9]/g, '').trim();\r\n}\r\nexport const findCountry = (id: number, countries: ICountry[]): ICountry => countries.find(country => country.id === id);\r\n\r\nexport function getReleaseHoursString(releaseDate: number) {\r\n  const dt = new Date();\r\n  const releaseAfterHours = releaseDate;\r\n\r\n  dt.setHours(dt.getHours() + releaseAfterHours, dt.getMinutes(), 0, 0);\r\n\r\n  return {\r\n    BLOCKED_TILL_DATE: dateToFormattedString(dt),\r\n    BLOCKED_TILL_HOUR: dt.getHours().toString(),\r\n    BLOCKED_TILL_MINUTE: dt.getMinutes().toString(),\r\n  };\r\n}\r\n\r\nexport function computeEndDate(startDate: string, numberOfDays: number): string {\r\n  const dateObj = moment(startDate, 'D_M_YYYY');\r\n  dateObj.add(numberOfDays, 'days');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDMYToISO(date: string) {\r\n  const dateObj = moment(date, 'D_M_YYYY');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\nexport function addTwoMonthToDate(date: Date) {\r\n  return moment(date).add(2, 'months').format('YYYY-MM-DD');\r\n}\r\nexport function formatDate(dateString, option = 'DD MMM YYYY') {\r\n  const formattedDate = moment(dateString, option).format('ddd, DD MMM YYYY');\r\n  return formattedDate;\r\n}\r\nexport function getNextDay(date: Date) {\r\n  return moment(date).add(1, 'days').format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDatePrice(date: string) {\r\n  return moment(date, 'YYYY-MM-DD').format('DD/MM ddd');\r\n}\r\nexport function getDaysArray(date1: string, date2: string) {\r\n  let dates = [];\r\n  let start = moment.min(moment(date1).add(1, 'days'), moment(date2));\r\n  let end = moment.max(moment(date1), moment(date2));\r\n  while (start < end) {\r\n    dates.push(start.format('YYYY-MM-DD'));\r\n    start = start.clone().add(1, 'days');\r\n  }\r\n\r\n  return dates;\r\n}\r\nexport function renderTime(time: number) {\r\n  return time < 10 ? time.toString().padStart(2, '0') : time.toString();\r\n}\r\n\r\nexport function formatAmount(currency: string, amount: number) {\r\n  const symbol = getCurrencySymbol(currency);\r\n  return symbol + amount.toFixed(2);\r\n}\r\n"],"mappings":"8LASaA,UAAuBC,EAC3B,qBAAMC,CAAgBC,EAAoBC,EAAmBC,GAClE,IACE,MAAMC,EAAQC,KAAKC,WACnB,GAAIF,IAAU,KAAM,CAClB,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,gCAAgCL,IAAS,CACzEH,aACAC,YACAC,YAEF,GAAII,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,MAAME,EAAsBL,EAAKM,UAAUD,OAC3C,MAAME,EAA2D,GACjE,MAAMC,QAAkBC,EAAcJ,GACtC,MAAMK,EAAkBL,EACrBM,KAAIC,IACHL,EAAaM,KAAK,CAChBC,UAAWF,EAAMF,KAAKK,OACtBC,UAAWJ,EAAMK,cAEnB,OAAOL,EAAMF,KAAKC,KAAIO,IAAG,CACvBA,IAAKC,EAA0BD,EAAID,YAAaL,EAAMK,aACtDG,YAAaC,EAAkBH,EAAID,YAAaL,EAAMK,aACtDK,eAAgBJ,EAAID,YACpBM,KAAML,EAAIM,WACVC,qBAAsBP,EAAIO,qBAC1BC,UAAWR,EAAIQ,aACd,IAEJC,OAEH,OAAOC,QAAQC,QAAQ,CACrBC,cAAe,KACf3B,aAAc,GACd4B,2BAA4B,CAC1BC,MAAOtC,EACPuC,KAAMjC,EAAKkC,+BAA+BvC,UAC1CwC,GAAInC,EAAKkC,+BAA+BtC,SAE1Cc,OACAL,OAAQE,EACR6B,WAAY5B,EACZ6B,cAAehC,G,EAGnB,MAAOiC,GACPC,QAAQD,MAAMA,E,EAGX,gBAAME,CAAWC,GACtB,IACE,MAAM5C,EAAQC,KAAKC,WACnB,GAAIF,IAAU,KAAM,CAClB,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,6BAA6BL,IAAS,CAAE4C,UAC1E,GAAIzC,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAKM,S,EAEd,MAAOgC,GACPC,QAAQG,IAAIJ,GACZ,MAAM,IAAIlC,MAAMkC,E,EAGb,sBAAMK,CAAiBC,EAAcC,GAC1C,IACE,MAAMhD,EAAQC,KAAKC,WACnB,GAAIF,IAAU,KAAM,CAClB,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,8BAA8BL,IAAOiD,OAAAC,OAAAD,OAAAC,OAAA,GAAOH,GAAK,CAAEC,cACrF,GAAI7C,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAKM,S,EAEd,MAAOgC,GACPC,QAAQG,IAAIJ,GACZ,MAAM,IAAIlC,MAAMkC,E,EAGb,4BAAMU,CACXrD,EACAC,EACAF,EACAuD,EACAC,EACAC,EACAC,GAEA,IACE,MAAMvD,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,4CAA4CL,IAAS,CACrFH,aACAC,YACAC,UACAyD,UAAWJ,EAAgBK,MAC3BC,UAAWN,EAAgBO,MAC3BN,WACAO,aAAcL,EAASM,KACvBP,kBAEF,GAAInD,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAK,Y,KACP,CACL,MAAM,IAAII,MAAM,sB,EAElB,MAAOkC,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,EAIb,kBAAMqB,CAAaT,GACxB,IACE,MAAMrD,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,iCAAiCL,IAAS,CAC1EqD,aAEF,GAAIlD,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAKM,S,EAEd,MAAOgC,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,EAIb,uBAAMsB,GACX,IACE,MAAM/D,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,+CAA+CL,IAAS,CACxFgE,UAAW,CAAC,gBAAiB,qBAAsB,0BAErD,GAAI7D,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,MAAM2D,EAAa9D,EAAKM,UACxB,MAAO,CACLyD,YAAaD,EAAIE,QAAOC,GAAKA,EAAEC,WAAa,kBAE5CC,gBAAiBL,EAAIE,QAAOC,GAAKA,EAAEC,WAAa,uBAChDE,kBAAmBN,EAAIE,QAAOC,GAAKA,EAAEC,WAAa,yB,EAGtD,MAAO5B,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,EAGb,oBAAM+B,GACX,IACE,MAAMxE,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,+CAA+CL,IAAS,CAAEgE,UAAW,CAAC,4BACxG,GAAI7D,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAKM,S,EAEd,MAAOgC,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,EAGb,2BAAMgC,GACX,IACE,MAAMzE,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,6BAA6BL,IAAS,CACtE0E,GAAI,KAEN,GAAIvE,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAK,Y,EAEd,MAAOsC,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,EAGb,eAAMkC,CAAUC,GACrB,IACE,MAAM5E,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,8BAA8BL,IAAS4E,GACzE,GAAIzE,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvBoC,QAAQG,IAAI1C,GACZ,OAAOA,EAAK,+B,EAEd,MAAOsC,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,EAIb,iBAAMoC,CAAYjC,GACvB,IACE,MAAM5C,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,6BAA6BL,IAAS,CACtE4C,UAEF,GAAIzC,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAKM,S,KACP,CACL,MAAM,IAAIF,MAAM,gB,EAElB,MAAOkC,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,EAGb,uBAAMqC,CAAkBC,EAAqB1B,GAClD,IACE,MAAMrD,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,+BAA+BL,IAAS,CACxE+E,cACA1B,aAEF,GAAIlD,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAKM,S,KACP,CACL,MAAM,IAAIF,MAAM,gB,EAElB,MAAOkC,GACPC,QAAQD,MAAMA,E,EAGV,YAAAuC,CAAalF,EAAmBC,EAAiBkF,GACvD,MAAMC,EAAY,IAAIC,KAAKrF,GAC3B,MAAMsF,EAAU,IAAID,KAAKpF,GACzB,MAAMc,EAAc,GAEpB,MAAOqE,EAAYE,EAAS,CAC1BvE,EAAKG,KAAK,CACRqE,KAAMH,EAAUI,cAAcC,MAAM,KAAK,GACzCN,OAAQA,IAEVC,EAAUM,QAAQN,EAAUO,UAAY,E,CAG1C,OAAO5E,C,CAED,kBAAA6E,CAAmBhE,EAAciE,EAAqBC,EAAyBC,GACrF,GAAID,GAAkBC,IAAe,EAAG,CACtC,OAAQnE,C,CAEV,OAAQA,GAAQiE,C,CAEX,uBAAMG,CAAkBlD,EAAemD,GAC5C,IACE,MAAM/F,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,gCAAgCL,IAAS,CACzE4C,QACAmD,gBAEF,GAAI5F,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAK,Y,KACP,CACL,MAAM,IAAII,MAAM,sB,EAElB,MAAOkC,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,EAGb,0BAAMuD,CAAqBjB,EAAqBgB,EAAqBjG,EAAmBC,GAC7F,IACE,MAAMC,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,kCAAkCL,IAAS,CAC3E+E,cACAgB,cACAjG,YACAC,YAEF,GAAII,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAK,Y,KACP,CACL,MAAM,IAAII,MAAM,sB,EAElB,MAAOkC,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,EAGb,uBAAMwD,CAAkBC,GAC7B,IACE,MAAMlG,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,iCAAiCL,IAAS,CAC1EkG,aAEF,GAAI/F,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAK,Y,KACP,CACL,MAAM,IAAII,MAAM,sB,EAElB,MAAOkC,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,EAGb,cAAM0D,CACXC,EACAC,EACAC,EACAC,EACAC,EACAb,EACAc,EACA5G,EACA6G,EACAnD,EACAoD,EACAC,EACA1C,EACA2C,EACAC,GAEA,IACE,MAAM9G,EAAQC,KAAKC,WACnB,GAAIF,EAAO,CACT,MAAM+G,EAAcC,EAAsBV,GAC1C,MAAMW,EAAYD,EAAsBT,GACxC,IAAIxD,EAAa,CACfH,MAAOwD,EAAiBxD,OAAS,KACjCsE,WAAYd,EAAiBe,UAC7BC,UAAWhB,EAAiBiB,SAC5BC,WAAYlB,EAAiBmB,YAAc,GAAK,KAAOnB,EAAiBmB,UACxEC,KAAM,KACNC,OAAQrB,EAAiBsB,gBAAkB,KAAO,GAAKtB,EAAiBsB,cACxEC,QAAS,GACTC,IAAK,KACLC,yBAA0BzB,EAAiB0B,YAAc,MACzDC,IAAK3B,EAAiB4B,WAClB,CACEC,IAAK7B,EAAiB4B,WACtBE,YAAa9B,EAAiB+B,eAC9BC,aAAchC,EAAiBiC,YAC/BC,YAAalC,EAAiBmC,YAEhC,MAEN,GAAInC,EAAiBoC,GAAI,CACvBzF,EAAKE,OAAAC,OAAAD,OAAAC,OAAA,GAAQH,GAAK,CAAEyF,GAAIpC,EAAiBoC,I,CAE3C,MAAMC,EAAO,CACXC,aAAc,KACdrC,WACAsC,OAAQ,KACRC,UAAW,KACXC,QAAS,CACP9D,YAAa4B,GAAiB,GAC9B7G,UAAWiH,EACXhH,QAASkH,EACT6B,OAAQ1C,EAAiB2C,SAAW,KACpCC,SAAU,CACRR,GAAI3I,GAEN4G,SACAlD,WACA0F,QAAS,CAAEpF,KAAMK,EAAcA,EAAckC,EAAiB8C,qBAE9DnG,MAAO6D,GAAgB7D,EACvB2D,MAAO,IACFF,EAAU1F,KAAIX,IAAI,CACnB2G,WAAYA,GAAc,KAC1BqC,SAAU,CACRX,GAAIrI,EAAKiJ,eACTC,KAAMlJ,EAAKmJ,iBACXC,cAAe,KACfC,UAAW,KACXC,eAAgB,KAChBC,UAAWvJ,EAAKuJ,UAChBhI,KAAMvB,EAAKuB,KAAOiE,GAEpBgE,SAAU,CACRnB,GAAIrI,EAAKyJ,WACTP,KAAMlJ,EAAK0J,aACXC,kBAAmB,KACnBC,WAAY,KACZC,YAAa7J,EAAK6J,YAClBC,UAAW9J,EAAK8J,WAElBC,YAAarD,IAAU,aAAe1G,EAAKgK,SAAW,GAAK,KAAO,CAAE3B,IAAK3B,IAAU1G,EAAKgK,QACxFtI,UAAW,CACT2B,UAAWrD,EAAKiK,WAChBC,aAAclK,EAAKmK,cACnBC,WAAY,MAEdC,eAAgBrK,EAAK0F,WACrB/F,UAAWiH,EACXhH,QAASkH,EACTwD,MAAO,KACP5J,KAAMZ,KAAK+E,aAAa+B,EAAaE,EAAWhH,KAAKyF,mBAAmBvF,EAAKuB,KAAMiE,EAAaxF,EAAKyF,eAAgBzF,EAAKuK,WAC1H3H,MAAO,CACLH,MAAO,KACPsE,WAAY/G,EAAKwK,UACjBvD,UAAW,KACXE,WAAY,KACZE,KAAM,KACNC,OAAQ,KACRE,QAAS,KACTC,IAAK,KACLC,yBAA0B,aAG3BnB,KAIThE,QAAQG,IAAI,oBAAqB4F,GACjC,MAAMtI,KAAEA,SAAeC,EAAMC,KAAK,yBAAyBL,IAASyI,GACpE,GAAItI,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvBoC,QAAQG,IAAI1C,EAAK,cACjB,OAAOA,EAAK,Y,KACP,CACL,MAAM,IAAII,MAAM,gB,EAElB,MAAOkC,GACPC,QAAQD,MAAMA,GACd,MAAM,IAAIlC,MAAMkC,E,GCraf,MAAMmI,EAAwC,CACnD,MAAO,WACP,MAAO,uBACP,MAAO,YACP,MAAO,e,SAGOC,EAAW1D,EAA0BE,GACnD,GAAIF,IAAc,MAAQE,IAAa,KAAM,MAAO,GACpD,GAAIA,IAAa,MAAQA,IAAa,GAAI,CACxC,MAAO,GAAGF,IAAS,MAATA,SAAS,EAATA,EAAa,QAAQE,IAAQ,MAARA,SAAQ,EAARA,EAAY,I,CAE7C,OAAOF,CACT,C,SA0HgB2D,EAAoB3K,GAClC,IAAI4K,EAAiC,GAErC,MAAMC,EAAeC,IACnB,MAAMC,EAAMC,IACZ,MAAM5E,EAAS4E,EAAOF,EAAKlL,QAAS,cACpC,MAAMuG,EAAW6E,EAAOF,EAAKnL,UAAW,cAExC,GAAIwG,EAAS8E,OAAOF,EAAK,QAAUA,EAAIG,QAAU,GAAI,CACnD,OAAOT,EAAc,M,MAChB,GAAIM,EAAII,QAAQhF,EAAU,QAAU4E,EAAIK,SAAShF,EAAQ,OAAQ,CACtE,OAAOqE,EAAc,M,MAChB,GAAIrE,EAAO6E,OAAOF,EAAK,QAAUA,EAAIG,OAAS,GAAI,CACvD,OAAOT,EAAc,M,MAChB,GAAKrE,EAAO6E,OAAOF,EAAK,QAAUA,EAAIG,QAAU,IAAO9E,EAAOgF,SAASL,EAAK,OAAQ,CACzF,OAAON,EAAc,M,KAChB,CACL,OAAOA,GAAczK,IAAI,MAAJA,SAAI,SAAJA,EAAMqL,OAAO3H,OAAQ,M,GAQ9C,MAAM6C,EAAQvG,EAAKuG,MAAMvC,QAAO8G,KAAUA,EAAK,yBAC/CvE,EAAM+E,SAAQR,I,QACZF,EAAS/J,KAAK,CACZ0K,GAAIT,EAAK,uBACTU,QAASV,EAAKlL,QACd6L,UAAWX,EAAKnL,UAChB+L,WAAYZ,EAAKpK,KAAKK,OACtB4K,QAAS3L,EAAK8I,QACd8C,YAAa,KACbC,SAASC,EAAA9L,EAAK+L,aAAS,MAAAD,SAAA,SAAAA,EAAEE,WACzBC,OAAQpB,EAAaC,GACrBoB,KAAMxB,EAAWI,EAAKlI,MAAMmE,WAAY+D,EAAKlI,MAAMqE,WACnDkF,OAAOC,EAAApM,EAAK4C,MAAM0E,UAAM,MAAA8E,SAAA,EAAAA,EAAI,GAC5BC,WAAY,aACZC,KAAMxB,EAAKyB,MACXC,UAAW1B,EAAKtB,SAASN,KACzBuD,cAAe,MACfC,aAAc5B,EAAKtB,SAASnB,GAC5BsE,WAAY7B,EAAKnE,WACjBiG,UAAW9B,EAAK9B,SAASX,GACzBwE,aAAc/B,EAAKpJ,UAAU2B,UAC7ByJ,eAAgBhC,EAAKpJ,UAAUwI,aAC/B6C,OAAQjC,EAAKf,KAAK1B,GAClB2E,KAAMlC,EAAK,uBACXmC,MAAOjN,EAAK4C,MACZsK,MAAOlN,EAAKuG,MACZ4G,eAAgBnN,EAAK4E,YACrBiF,YAAaiB,EAAKtB,SAASK,YAC3BC,UAAWgB,EAAKtB,SAASM,UACzBsD,YAAatC,EAAKuC,YAClBC,QAAStN,EAAK4C,MAAMuE,WACpBoG,cAAevN,EAAKwN,OAAO7N,UAC3B8N,YAAazN,EAAKwN,OAAO5N,QACzB8N,qBAAsB5C,EAAKtB,SAASmE,mBAAmBD,qBACvDE,aAAc5N,EAAK8I,QAAQ7H,YAC3B4M,OAAQ7N,EAAK6N,OACbC,oBAAqB9N,EAAK8N,oBAC1BrF,UAAWzI,EAAKyI,UAChBsF,MAAO/N,EAAKyI,UAAYzI,EAAK2I,OAAS,KACtCqF,OAAQ,CAAEtK,KAAM1D,EAAKsG,OAAO5C,KAAMzC,YAAajB,EAAKsG,OAAOrF,YAAagN,IAAKjO,EAAKsG,OAAO2H,KACzFC,UAAWlO,EAAKkO,WAChB,IAGJ,OAAOtD,CACT,C,SA8BgBuD,EAA0BxO,EAAmBC,GAC3D,MAAMmF,EAAYiG,EAAOrL,EAAW,cACpC,MAAMsF,EAAU+F,EAAOpL,EAAS,cAChC,MAAMwO,EAAWnJ,EAAQoJ,KAAKtJ,EAAW,QACzC,OAAOqJ,CACT,C,SC1MgBE,EAAYC,GAC1B,MAAO,CAAC,MAAO,MAAO,OAAOC,SAASD,EACxC,C,SACgBE,EAAkBC,GAChC,MAAMC,EAAY,IAAIC,KAAKC,aAAaC,UAAW,CACjDC,MAAO,WACP3L,SAAUsL,EACVM,sBAAuB,EACvBC,sBAAuB,IAEzB,OAAON,EAAUnB,OAAO,GAAG0B,QAAQ,SAAU,IAAIC,MACnD,C,SAmDgBC,EAAWC,GACzB,OAAOA,EAAO,GAAKA,EAAKC,WAAWC,SAAS,EAAG,KAAOF,EAAKC,UAC7D,C,SAEgBE,EAAapM,EAAkB0B,GAC7C,MAAM2K,EAAShB,EAAkBrL,GACjC,OAAOqM,EAAS3K,EAAO4K,QAAQ,EACjC,Q"}