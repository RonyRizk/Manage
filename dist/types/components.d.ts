/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { IglBookPropertyPayloadEditBooking, TAdultChildConstraints, TIglBookPropertyPayload, TPropertyButtonsTypes, TSourceOptions } from "./models/igl-book-property";
import { ICountry, RoomBlockDetails, RoomBookingDetails } from "./models/IBooking";
import { IToast } from "./components/ir-toast/toast";
import { IToast as IToast1, TPositions } from "./components/ir-toast/toast";
import { IReallocationPayload, IRoomNightsData } from "./models/property-types";
import { IPageTwoDataUpdateProps } from "./models/models";
import { Booking } from "./models/booking.dto";
import { checkboxes, selectOption as selectOption1 } from "./common/models";
import { ILocale as ILocale1, IToast as IToast2 } from "./components.d";
import { selectOption } from "./common/models";
import { ILocale } from "./stores/locales.store";
import { Booking as Booking1, IBookingPickupInfo, IOtaNotes } from "./models/booking.dto";
import { IRoomNightsDataEventPayload } from "./models/property-types";
export { IglBookPropertyPayloadEditBooking, TAdultChildConstraints, TIglBookPropertyPayload, TPropertyButtonsTypes, TSourceOptions } from "./models/igl-book-property";
export { ICountry, RoomBlockDetails, RoomBookingDetails } from "./models/IBooking";
export { IToast } from "./components/ir-toast/toast";
export { IToast as IToast1, TPositions } from "./components/ir-toast/toast";
export { IReallocationPayload, IRoomNightsData } from "./models/property-types";
export { IPageTwoDataUpdateProps } from "./models/models";
export { Booking } from "./models/booking.dto";
export { checkboxes, selectOption as selectOption1 } from "./common/models";
export { ILocale as ILocale1, IToast as IToast2 } from "./components.d";
export { selectOption } from "./common/models";
export { ILocale } from "./stores/locales.store";
export { Booking as Booking1, IBookingPickupInfo, IOtaNotes } from "./models/booking.dto";
export { IRoomNightsDataEventPayload } from "./models/property-types";
export namespace Components {
    interface IglApplicationInfo {
        "bedPreferenceType": any[];
        "bookingType": string;
        "currency": any;
        "dateDifference": number;
        "defaultGuestPreference": number | null;
        "defaultGuestRoomId": number;
        "guestInfo": { [key: string]: any };
        "guestRefKey": string;
        "index": number;
        "roomsList": { [key: string]: any }[];
        "selectedUnits": number[];
    }
    interface IglBlockDatesView {
        "defaultData": { [key: string]: any };
        "entryDate": string;
        "entryHour": number;
        "entryMinute": number;
        "fromDate": string;
        "isEventHover": boolean;
        "toDate": string;
    }
    interface IglBookProperty {
        "adultChildConstraints": TAdultChildConstraints;
        "allowedBookingSources": any;
        "bookingData": { [key: string]: any };
        "countryNodeList": any;
        "currency": { id: number; code: string };
        "language": string;
        "propertyid": number;
        "showPaymentDetails": boolean;
    }
    interface IglBookPropertyContainer {
        "baseurl": string;
        "from_date": string;
        "language": string;
        "propertyid": number;
        "ticket": string;
        "to_date": string;
        "withIrToastAndInterceptor": boolean;
    }
    interface IglBookPropertyFooter {
        "disabled": boolean;
        "eventType": string;
    }
    interface IglBookPropertyHeader {
        "adultChildConstraints": TAdultChildConstraints;
        "adultChildCount": { adult: number; child: number };
        "bookedByInfoData": any;
        "bookingData": any;
        "bookingDataDefaultDateRange": { [key: string]: any };
        "dateRangeData": any;
        "defaultDaterange": { from_date: string; to_date: string };
        "message": string;
        "minDate": string;
        "propertyId": number;
        "showSplitBookingOption": boolean;
        "sourceOptions": TSourceOptions[];
        "splitBookingId": any;
        "splitBookings": any[];
    }
    interface IglBookingEvent {
        "allBookingEvents": { [key: string]: any };
        "bookingEvent": { [key: string]: any };
        "countryNodeList": any;
        "currency": any;
        "is_vacation_rental": boolean;
        "language": string;
    }
    interface IglBookingEventHover {
        "bookingEvent": { [key: string]: any };
        "bubbleInfoTop": boolean;
        "countryNodeList": ICountry[];
        "currency": any;
        "is_vacation_rental": boolean;
    }
    interface IglBookingOverviewPage {
        "adultChildConstraints": TAdultChildConstraints;
        "adultChildCount": { adult: number; child: number };
        "bookedByInfoData": any;
        "bookingData": any;
        "currency": any;
        "dateRangeData": any;
        "defaultDaterange": { from_date: string; to_date: string };
        "eventType": string;
        "initialRoomIds": any;
        "message": string;
        "propertyId": number;
        "ratePricingMode": any;
        "selectedRooms": Map<string, Map<string, any>>;
        "showSplitBookingOption": boolean;
        "sourceOptions": TSourceOptions[];
    }
    interface IglBookingRoomRatePlan {
        "bookingType": string;
        "currency": any;
        "dateDifference": number;
        "defaultData": { [key: string]: any };
        "defaultRoomId": any;
        "fullyBlocked": boolean;
        "index": number;
        "isBookDisabled": boolean;
        "is_bed_configuration_enabled": boolean;
        "physicalrooms": any;
        "ratePlanData": { [key: string]: any };
        "ratePricingMode": any[];
        "selectedRoom": any;
        "shouldBeDisabled": boolean;
        "totalAvailableRooms": number;
    }
    interface IglBookingRooms {
        "bookingType": string;
        "currency": any;
        "dateDifference": number;
        "defaultData": Map<string, any>;
        "initialRoomIds": any;
        "isBookDisabled": boolean;
        "ratePricingMode": any[];
        "roomInfoId": number | null;
        "roomTypeData": { [key: string]: any };
    }
    interface IglCalBody {
        "calendarData": { [key: string]: any };
        "countryNodeList": any;
        "currency": any;
        "highlightedDate": string;
        "isScrollViewDragging": boolean;
        "language": string;
        "today": String;
    }
    interface IglCalFooter {
        "calendarData": { [key: string]: any };
        "highlightedDate": string;
        "today": String;
    }
    interface IglCalHeader {
        "calendarData": { [key: string]: any };
        "highlightedDate": string;
        "propertyid": number;
        "to_date": string;
        "today": String;
        "unassignedDates": any;
    }
    interface IglDateRange {
        "dateLabel": string;
        "defaultData": { [key: string]: any };
        "disabled": boolean;
        "maxDate": string;
        "minDate": string;
        "withDateDifference": boolean;
    }
    interface IglLegends {
        "legendData": { [key: string]: any };
    }
    interface IglPagetwo {
        "bedPreferenceType": any;
        "bookedByInfoData": { [key: string]: any };
        "bookingData": { [key: string]: any };
        "countryNodeList": any;
        "currency": any;
        "dateRangeData": { [key: string]: any };
        "defaultGuestData": IglBookPropertyPayloadEditBooking;
        "isEditOrAddRoomEvent": boolean;
        "isLoading": string;
        "language": string;
        "propertyId": number;
        "selectedGuestData": any;
        "selectedRooms": Map<string, Map<string, any>>;
        "showPaymentDetails": boolean;
        "showSplitBookingOption": boolean;
    }
    interface IglPropertyBookedBy {
        "countryNodeList": ICountry[];
        "defaultData": { [key: string]: any };
        "language": string;
        "propertyId": number;
        "showPaymentDetails": boolean;
    }
    interface IglTbaBookingView {
        "calendarData": { [key: string]: any };
        "categoriesData": { [key: string]: any };
        "categoryId": any;
        "categoryIndex": any;
        "eventData": { [key: string]: any };
        "eventIndex": any;
        "selectedDate": any;
    }
    interface IglTbaCategoryView {
        "calendarData": { [key: string]: any };
        "categoriesData": { [key: string]: any };
        "categoryId": any;
        "categoryIndex": any;
        "eventDatas": any;
        "selectedDate": any;
    }
    interface IglToBeAssigned {
        "calendarData": { [key: string]: any };
        "from_date": string;
        "propertyid": number;
        "to_date": string;
        "unassignedDatesProp": any;
    }
    interface IglooCalendar {
        "baseurl": string;
        "currencyName": string;
        "from_date": string;
        "language": string;
        "loadingMessage": string;
        "propertyid": number;
        "ticket": string;
        "to_date": string;
    }
    interface IrAutocomplete {
        "danger_border": boolean;
        "disabled": boolean;
        "duration": number;
        "from_date": string;
        "inputId": string;
        "isSplitBooking": boolean;
        "name": string;
        "placeholder": string;
        "propertyId": number;
        "required": boolean;
        "to_date": string;
        "type": 'email' | 'text' | 'password' | 'number' | 'search';
        "value": string;
    }
    interface IrBookingDetails {
        "baseurl": string;
        "bookingNumber": string;
        "hasCheckIn": boolean;
        "hasCheckOut": boolean;
        "hasDelete": boolean;
        "hasMenu": boolean;
        "hasPrint": boolean;
        "hasReceipt": boolean;
        "hasRoomAdd": boolean;
        "hasRoomDelete": boolean;
        "hasRoomEdit": boolean;
        "is_from_front_desk": boolean;
        "language": string;
        "propertyid": number;
        "ticket": string;
    }
    interface IrBookingListing {
        "baseurl": string;
        "language": string;
        "propertyid": number;
        "rowCount": number;
        "ticket": string;
    }
    interface IrButton {
        "btn_block": boolean;
        "btn_color": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "btn_disabled": boolean;
        "btn_id": string;
        "btn_styles": string;
        "btn_type": string;
        "icon": string;
        "isLoading": boolean;
        "name": string;
        "size": 'sm' | 'md' | 'lg';
        "text": any;
        "textSize": 'sm' | 'md' | 'lg';
    }
    interface IrChannel {
        "baseurl": string;
        "language": string;
        "propertyid": number;
        "ticket": string;
    }
    interface IrChannelEditor {
        "channel_status": 'create' | 'edit' | null;
        "ticket": string;
    }
    interface IrChannelGeneral {
        "channel_status": 'create' | 'edit' | null;
    }
    interface IrChannelHeader {
        "headerTitles": { id: string; name: string; disabled: boolean }[];
    }
    interface IrChannelMapping {
    }
    interface IrCheckbox {
        "checked": boolean;
        "disabled": boolean;
        "label": string;
        "labelPosition": 'before' | 'after';
        "name": string;
        "value": string;
    }
    interface IrCheckboxes {
        "checkboxes": checkboxes[];
    }
    interface IrCombobox {
        "autoFocus": boolean;
        "data": { id: string; name: string }[];
        "disabled": boolean;
        "duration": number;
        "input_id": string;
        "placeholder": string;
        "value": string;
    }
    interface IrCommon {
        "extraResources": string;
    }
    interface IrDatePicker {
        "applyLabel": string;
        "autoApply": boolean;
        "cancelLabel": string;
        "customRangeLabel": string;
        "daysOfWeek": string[];
        "disabled": boolean;
        "firstDay": number;
        "format": string;
        "fromDate": Date;
        "fromLabel": string;
        "maxDate": string;
        "maxSpan": moment.DurationInputArg1;
        "minDate": string;
        "monthNames": string[];
        "opens": 'left' | 'right' | 'center';
        "separator": string;
        "singleDatePicker": boolean;
        "toDate": Date;
        "toLabel": string;
        "weekLabel": string;
    }
    interface IrDateView {
        "dateOption": string;
        "from_date": string | Date | moment.Moment;
        "showDateDifference": boolean;
        "to_date": string | Date | moment.Moment;
    }
    interface IrDropdown {
        "data": {
    name: string;
    icon: string;
    children: {
      name: string;
      icon: string;
    }[];
  };
        "object": any;
    }
    interface IrGuestInfo {
        "booking_nbr": string;
        "defaultTexts": ILocale;
        "email": string;
        "language": string;
        "setupDataCountries": selectOption[];
        "setupDataCountriesCode": selectOption[];
    }
    interface IrHousekeeping {
        "baseurl": string;
        "language": string;
        "propertyid": number;
        "ticket": string;
    }
    interface IrIcon {
        "icon": string;
    }
    interface IrInputText {
        "LabelAvailable": boolean;
        "disabled": boolean;
        "error": boolean;
        "inputStyle": boolean;
        "inputStyles": string;
        "label": string;
        "labelBackground": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | null;
        "labelBorder": 'theme' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none';
        "labelColor": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelPosition": 'left' | 'right' | 'center';
        "labelWidth": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
        "name": string;
        "placeholder": string;
        "readonly": boolean;
        "required": boolean;
        "size": 'sm' | 'md' | 'lg';
        "submited": boolean;
        "textSize": 'sm' | 'md' | 'lg';
        "type": string;
        "value": any;
        "variant": 'default' | 'icon';
    }
    interface IrInterceptor {
        "handledEndpoints": string[];
    }
    interface IrLabel {
        "iconShown": boolean;
        "imageSrc": string;
        "label": string;
        "value": string;
    }
    interface IrListingHeader {
        "baseurl": string;
        "language": string;
        "propertyId": number;
    }
    interface IrListingModal {
        "closeModal": () => Promise<void>;
        "editBooking": { booking: Booking; cause: 'edit' | 'payment' | 'delete' };
        "modalTitle": string;
        "openModal": () => Promise<void>;
    }
    interface IrLoadingScreen {
        "message": string;
    }
    interface IrModal {
        "btnPosition": 'left' | 'right' | 'center';
        "closeModal": () => Promise<void>;
        "icon": string;
        "iconAvailable": boolean;
        "item": any;
        "leftBtnActive": boolean;
        "leftBtnColor": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "leftBtnText": string;
        "modalBody": string;
        "modalTitle": string;
        "openModal": () => Promise<void>;
        "rightBtnActive": boolean;
        "rightBtnColor": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "rightBtnText": string;
    }
    interface IrPaymentDetails {
        "bookingDetails": Booking;
        "defaultTexts": ILocale;
    }
    interface IrPickup {
        "bookingNumber": string;
        "defaultPickupData": IBookingPickupInfo | null;
        "numberOfPersons": number;
    }
    interface IrPopover {
        "irPopoverLeft": string;
        "popoverTitle": string;
    }
    interface IrRoom {
        "bookingEvent": Booking;
        "bookingIndex": number;
        "currency": string;
        "defaultTexts": ILocale;
        "hasCheckIn": boolean;
        "hasCheckOut": boolean;
        "hasRoomAdd": boolean;
        "hasRoomDelete": boolean;
        "hasRoomEdit": boolean;
        "legendData": any;
        "mealCodeName": string;
        "myRoomTypeFoodCat": string;
        "roomsInfo": any;
        "ticket": any;
    }
    interface IrRoomNights {
        "baseUrl": string;
        "bookingNumber": string;
        "fromDate": string;
        "identifier": string;
        "language": string;
        "pool": string;
        "propertyId": number;
        "ticket": string;
        "toDate": string;
    }
    interface IrSelect {
        "LabelAvailable": boolean;
        "data": selectOption1[];
        "firstOption": string;
        "label": string;
        "labelBackground": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | null;
        "labelBorder": 'theme' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none';
        "labelColor": 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelPosition": 'left' | 'right' | 'center';
        "labelWidth": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
        "name": string;
        "required": boolean;
        "selectContainerStyle": string;
        "selectStyle": boolean;
        "selectStyles": string;
        "select_id": string;
        "selectedValue": any;
        "showFirstOption": boolean;
        "size": 'sm' | 'md' | 'lg';
        "submited": boolean;
        "textSize": 'sm' | 'md' | 'lg';
    }
    interface IrSidebar {
        "name": string;
        "open": boolean;
        "showCloseButton": boolean;
        "side": 'right' | 'left';
        "sidebarStyles": Partial<CSSStyleDeclaration>;
        "toggleSidebar": () => Promise<void>;
    }
    interface IrSpan {
        "text": any;
    }
    interface IrSwitch {
        "checked": boolean;
        "disabled": boolean;
        "switchId": string;
    }
    interface IrTextarea {
        "cols": number;
        "label": string;
        "placeholder": string;
        "rows": number;
        "text": string;
    }
    interface IrToast {
        "position": TPositions;
    }
    interface IrTooltip {
        "customSlot": boolean;
        "message": string;
        "withHtml": boolean;
    }
    interface OtaLabel {
        "label": string;
        "remarks": IOtaNotes[];
    }
}
export interface IglApplicationInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglApplicationInfoElement;
}
export interface IglBlockDatesViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBlockDatesViewElement;
}
export interface IglBookPropertyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookPropertyElement;
}
export interface IglBookPropertyContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookPropertyContainerElement;
}
export interface IglBookPropertyFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookPropertyFooterElement;
}
export interface IglBookPropertyHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookPropertyHeaderElement;
}
export interface IglBookingEventCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookingEventElement;
}
export interface IglBookingEventHoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookingEventHoverElement;
}
export interface IglBookingOverviewPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookingOverviewPageElement;
}
export interface IglBookingRoomRatePlanCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookingRoomRatePlanElement;
}
export interface IglBookingRoomsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglBookingRoomsElement;
}
export interface IglCalBodyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglCalBodyElement;
}
export interface IglCalFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglCalFooterElement;
}
export interface IglCalHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglCalHeaderElement;
}
export interface IglDateRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglDateRangeElement;
}
export interface IglLegendsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglLegendsElement;
}
export interface IglPagetwoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglPagetwoElement;
}
export interface IglPropertyBookedByCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglPropertyBookedByElement;
}
export interface IglTbaBookingViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglTbaBookingViewElement;
}
export interface IglTbaCategoryViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglTbaCategoryViewElement;
}
export interface IglToBeAssignedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglToBeAssignedElement;
}
export interface IglooCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIglooCalendarElement;
}
export interface IrAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrAutocompleteElement;
}
export interface IrBookingDetailsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingDetailsElement;
}
export interface IrButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrButtonElement;
}
export interface IrChannelEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrChannelEditorElement;
}
export interface IrChannelHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrChannelHeaderElement;
}
export interface IrCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCheckboxElement;
}
export interface IrCheckboxesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCheckboxesElement;
}
export interface IrComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrComboboxElement;
}
export interface IrDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDatePickerElement;
}
export interface IrDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDropdownElement;
}
export interface IrGuestInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrGuestInfoElement;
}
export interface IrIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrIconElement;
}
export interface IrInputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrInputTextElement;
}
export interface IrInterceptorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrInterceptorElement;
}
export interface IrLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrLabelElement;
}
export interface IrListingModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrListingModalElement;
}
export interface IrModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrModalElement;
}
export interface IrPaymentDetailsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrPaymentDetailsElement;
}
export interface IrPickupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrPickupElement;
}
export interface IrRoomCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrRoomElement;
}
export interface IrRoomNightsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrRoomNightsElement;
}
export interface IrSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSelectElement;
}
export interface IrSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSidebarElement;
}
export interface IrSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSwitchElement;
}
declare global {
    interface HTMLIglApplicationInfoElement extends Components.IglApplicationInfo, HTMLStencilElement {
    }
    var HTMLIglApplicationInfoElement: {
        prototype: HTMLIglApplicationInfoElement;
        new (): HTMLIglApplicationInfoElement;
    };
    interface HTMLIglBlockDatesViewElement extends Components.IglBlockDatesView, HTMLStencilElement {
    }
    var HTMLIglBlockDatesViewElement: {
        prototype: HTMLIglBlockDatesViewElement;
        new (): HTMLIglBlockDatesViewElement;
    };
    interface HTMLIglBookPropertyElement extends Components.IglBookProperty, HTMLStencilElement {
    }
    var HTMLIglBookPropertyElement: {
        prototype: HTMLIglBookPropertyElement;
        new (): HTMLIglBookPropertyElement;
    };
    interface HTMLIglBookPropertyContainerElement extends Components.IglBookPropertyContainer, HTMLStencilElement {
    }
    var HTMLIglBookPropertyContainerElement: {
        prototype: HTMLIglBookPropertyContainerElement;
        new (): HTMLIglBookPropertyContainerElement;
    };
    interface HTMLIglBookPropertyFooterElement extends Components.IglBookPropertyFooter, HTMLStencilElement {
    }
    var HTMLIglBookPropertyFooterElement: {
        prototype: HTMLIglBookPropertyFooterElement;
        new (): HTMLIglBookPropertyFooterElement;
    };
    interface HTMLIglBookPropertyHeaderElement extends Components.IglBookPropertyHeader, HTMLStencilElement {
    }
    var HTMLIglBookPropertyHeaderElement: {
        prototype: HTMLIglBookPropertyHeaderElement;
        new (): HTMLIglBookPropertyHeaderElement;
    };
    interface HTMLIglBookingEventElement extends Components.IglBookingEvent, HTMLStencilElement {
    }
    var HTMLIglBookingEventElement: {
        prototype: HTMLIglBookingEventElement;
        new (): HTMLIglBookingEventElement;
    };
    interface HTMLIglBookingEventHoverElement extends Components.IglBookingEventHover, HTMLStencilElement {
    }
    var HTMLIglBookingEventHoverElement: {
        prototype: HTMLIglBookingEventHoverElement;
        new (): HTMLIglBookingEventHoverElement;
    };
    interface HTMLIglBookingOverviewPageElement extends Components.IglBookingOverviewPage, HTMLStencilElement {
    }
    var HTMLIglBookingOverviewPageElement: {
        prototype: HTMLIglBookingOverviewPageElement;
        new (): HTMLIglBookingOverviewPageElement;
    };
    interface HTMLIglBookingRoomRatePlanElement extends Components.IglBookingRoomRatePlan, HTMLStencilElement {
    }
    var HTMLIglBookingRoomRatePlanElement: {
        prototype: HTMLIglBookingRoomRatePlanElement;
        new (): HTMLIglBookingRoomRatePlanElement;
    };
    interface HTMLIglBookingRoomsElement extends Components.IglBookingRooms, HTMLStencilElement {
    }
    var HTMLIglBookingRoomsElement: {
        prototype: HTMLIglBookingRoomsElement;
        new (): HTMLIglBookingRoomsElement;
    };
    interface HTMLIglCalBodyElement extends Components.IglCalBody, HTMLStencilElement {
    }
    var HTMLIglCalBodyElement: {
        prototype: HTMLIglCalBodyElement;
        new (): HTMLIglCalBodyElement;
    };
    interface HTMLIglCalFooterElement extends Components.IglCalFooter, HTMLStencilElement {
    }
    var HTMLIglCalFooterElement: {
        prototype: HTMLIglCalFooterElement;
        new (): HTMLIglCalFooterElement;
    };
    interface HTMLIglCalHeaderElement extends Components.IglCalHeader, HTMLStencilElement {
    }
    var HTMLIglCalHeaderElement: {
        prototype: HTMLIglCalHeaderElement;
        new (): HTMLIglCalHeaderElement;
    };
    interface HTMLIglDateRangeElement extends Components.IglDateRange, HTMLStencilElement {
    }
    var HTMLIglDateRangeElement: {
        prototype: HTMLIglDateRangeElement;
        new (): HTMLIglDateRangeElement;
    };
    interface HTMLIglLegendsElement extends Components.IglLegends, HTMLStencilElement {
    }
    var HTMLIglLegendsElement: {
        prototype: HTMLIglLegendsElement;
        new (): HTMLIglLegendsElement;
    };
    interface HTMLIglPagetwoElement extends Components.IglPagetwo, HTMLStencilElement {
    }
    var HTMLIglPagetwoElement: {
        prototype: HTMLIglPagetwoElement;
        new (): HTMLIglPagetwoElement;
    };
    interface HTMLIglPropertyBookedByElement extends Components.IglPropertyBookedBy, HTMLStencilElement {
    }
    var HTMLIglPropertyBookedByElement: {
        prototype: HTMLIglPropertyBookedByElement;
        new (): HTMLIglPropertyBookedByElement;
    };
    interface HTMLIglTbaBookingViewElement extends Components.IglTbaBookingView, HTMLStencilElement {
    }
    var HTMLIglTbaBookingViewElement: {
        prototype: HTMLIglTbaBookingViewElement;
        new (): HTMLIglTbaBookingViewElement;
    };
    interface HTMLIglTbaCategoryViewElement extends Components.IglTbaCategoryView, HTMLStencilElement {
    }
    var HTMLIglTbaCategoryViewElement: {
        prototype: HTMLIglTbaCategoryViewElement;
        new (): HTMLIglTbaCategoryViewElement;
    };
    interface HTMLIglToBeAssignedElement extends Components.IglToBeAssigned, HTMLStencilElement {
    }
    var HTMLIglToBeAssignedElement: {
        prototype: HTMLIglToBeAssignedElement;
        new (): HTMLIglToBeAssignedElement;
    };
    interface HTMLIglooCalendarElement extends Components.IglooCalendar, HTMLStencilElement {
    }
    var HTMLIglooCalendarElement: {
        prototype: HTMLIglooCalendarElement;
        new (): HTMLIglooCalendarElement;
    };
    interface HTMLIrAutocompleteElement extends Components.IrAutocomplete, HTMLStencilElement {
    }
    var HTMLIrAutocompleteElement: {
        prototype: HTMLIrAutocompleteElement;
        new (): HTMLIrAutocompleteElement;
    };
    interface HTMLIrBookingDetailsElement extends Components.IrBookingDetails, HTMLStencilElement {
    }
    var HTMLIrBookingDetailsElement: {
        prototype: HTMLIrBookingDetailsElement;
        new (): HTMLIrBookingDetailsElement;
    };
    interface HTMLIrBookingListingElement extends Components.IrBookingListing, HTMLStencilElement {
    }
    var HTMLIrBookingListingElement: {
        prototype: HTMLIrBookingListingElement;
        new (): HTMLIrBookingListingElement;
    };
    interface HTMLIrButtonElement extends Components.IrButton, HTMLStencilElement {
    }
    var HTMLIrButtonElement: {
        prototype: HTMLIrButtonElement;
        new (): HTMLIrButtonElement;
    };
    interface HTMLIrChannelElement extends Components.IrChannel, HTMLStencilElement {
    }
    var HTMLIrChannelElement: {
        prototype: HTMLIrChannelElement;
        new (): HTMLIrChannelElement;
    };
    interface HTMLIrChannelEditorElement extends Components.IrChannelEditor, HTMLStencilElement {
    }
    var HTMLIrChannelEditorElement: {
        prototype: HTMLIrChannelEditorElement;
        new (): HTMLIrChannelEditorElement;
    };
    interface HTMLIrChannelGeneralElement extends Components.IrChannelGeneral, HTMLStencilElement {
    }
    var HTMLIrChannelGeneralElement: {
        prototype: HTMLIrChannelGeneralElement;
        new (): HTMLIrChannelGeneralElement;
    };
    interface HTMLIrChannelHeaderElement extends Components.IrChannelHeader, HTMLStencilElement {
    }
    var HTMLIrChannelHeaderElement: {
        prototype: HTMLIrChannelHeaderElement;
        new (): HTMLIrChannelHeaderElement;
    };
    interface HTMLIrChannelMappingElement extends Components.IrChannelMapping, HTMLStencilElement {
    }
    var HTMLIrChannelMappingElement: {
        prototype: HTMLIrChannelMappingElement;
        new (): HTMLIrChannelMappingElement;
    };
    interface HTMLIrCheckboxElement extends Components.IrCheckbox, HTMLStencilElement {
    }
    var HTMLIrCheckboxElement: {
        prototype: HTMLIrCheckboxElement;
        new (): HTMLIrCheckboxElement;
    };
    interface HTMLIrCheckboxesElement extends Components.IrCheckboxes, HTMLStencilElement {
    }
    var HTMLIrCheckboxesElement: {
        prototype: HTMLIrCheckboxesElement;
        new (): HTMLIrCheckboxesElement;
    };
    interface HTMLIrComboboxElement extends Components.IrCombobox, HTMLStencilElement {
    }
    var HTMLIrComboboxElement: {
        prototype: HTMLIrComboboxElement;
        new (): HTMLIrComboboxElement;
    };
    interface HTMLIrCommonElement extends Components.IrCommon, HTMLStencilElement {
    }
    var HTMLIrCommonElement: {
        prototype: HTMLIrCommonElement;
        new (): HTMLIrCommonElement;
    };
    interface HTMLIrDatePickerElement extends Components.IrDatePicker, HTMLStencilElement {
    }
    var HTMLIrDatePickerElement: {
        prototype: HTMLIrDatePickerElement;
        new (): HTMLIrDatePickerElement;
    };
    interface HTMLIrDateViewElement extends Components.IrDateView, HTMLStencilElement {
    }
    var HTMLIrDateViewElement: {
        prototype: HTMLIrDateViewElement;
        new (): HTMLIrDateViewElement;
    };
    interface HTMLIrDropdownElement extends Components.IrDropdown, HTMLStencilElement {
    }
    var HTMLIrDropdownElement: {
        prototype: HTMLIrDropdownElement;
        new (): HTMLIrDropdownElement;
    };
    interface HTMLIrGuestInfoElement extends Components.IrGuestInfo, HTMLStencilElement {
    }
    var HTMLIrGuestInfoElement: {
        prototype: HTMLIrGuestInfoElement;
        new (): HTMLIrGuestInfoElement;
    };
    interface HTMLIrHousekeepingElement extends Components.IrHousekeeping, HTMLStencilElement {
    }
    var HTMLIrHousekeepingElement: {
        prototype: HTMLIrHousekeepingElement;
        new (): HTMLIrHousekeepingElement;
    };
    interface HTMLIrIconElement extends Components.IrIcon, HTMLStencilElement {
    }
    var HTMLIrIconElement: {
        prototype: HTMLIrIconElement;
        new (): HTMLIrIconElement;
    };
    interface HTMLIrInputTextElement extends Components.IrInputText, HTMLStencilElement {
    }
    var HTMLIrInputTextElement: {
        prototype: HTMLIrInputTextElement;
        new (): HTMLIrInputTextElement;
    };
    interface HTMLIrInterceptorElement extends Components.IrInterceptor, HTMLStencilElement {
    }
    var HTMLIrInterceptorElement: {
        prototype: HTMLIrInterceptorElement;
        new (): HTMLIrInterceptorElement;
    };
    interface HTMLIrLabelElement extends Components.IrLabel, HTMLStencilElement {
    }
    var HTMLIrLabelElement: {
        prototype: HTMLIrLabelElement;
        new (): HTMLIrLabelElement;
    };
    interface HTMLIrListingHeaderElement extends Components.IrListingHeader, HTMLStencilElement {
    }
    var HTMLIrListingHeaderElement: {
        prototype: HTMLIrListingHeaderElement;
        new (): HTMLIrListingHeaderElement;
    };
    interface HTMLIrListingModalElement extends Components.IrListingModal, HTMLStencilElement {
    }
    var HTMLIrListingModalElement: {
        prototype: HTMLIrListingModalElement;
        new (): HTMLIrListingModalElement;
    };
    interface HTMLIrLoadingScreenElement extends Components.IrLoadingScreen, HTMLStencilElement {
    }
    var HTMLIrLoadingScreenElement: {
        prototype: HTMLIrLoadingScreenElement;
        new (): HTMLIrLoadingScreenElement;
    };
    interface HTMLIrModalElement extends Components.IrModal, HTMLStencilElement {
    }
    var HTMLIrModalElement: {
        prototype: HTMLIrModalElement;
        new (): HTMLIrModalElement;
    };
    interface HTMLIrPaymentDetailsElement extends Components.IrPaymentDetails, HTMLStencilElement {
    }
    var HTMLIrPaymentDetailsElement: {
        prototype: HTMLIrPaymentDetailsElement;
        new (): HTMLIrPaymentDetailsElement;
    };
    interface HTMLIrPickupElement extends Components.IrPickup, HTMLStencilElement {
    }
    var HTMLIrPickupElement: {
        prototype: HTMLIrPickupElement;
        new (): HTMLIrPickupElement;
    };
    interface HTMLIrPopoverElement extends Components.IrPopover, HTMLStencilElement {
    }
    var HTMLIrPopoverElement: {
        prototype: HTMLIrPopoverElement;
        new (): HTMLIrPopoverElement;
    };
    interface HTMLIrRoomElement extends Components.IrRoom, HTMLStencilElement {
    }
    var HTMLIrRoomElement: {
        prototype: HTMLIrRoomElement;
        new (): HTMLIrRoomElement;
    };
    interface HTMLIrRoomNightsElement extends Components.IrRoomNights, HTMLStencilElement {
    }
    var HTMLIrRoomNightsElement: {
        prototype: HTMLIrRoomNightsElement;
        new (): HTMLIrRoomNightsElement;
    };
    interface HTMLIrSelectElement extends Components.IrSelect, HTMLStencilElement {
    }
    var HTMLIrSelectElement: {
        prototype: HTMLIrSelectElement;
        new (): HTMLIrSelectElement;
    };
    interface HTMLIrSidebarElement extends Components.IrSidebar, HTMLStencilElement {
    }
    var HTMLIrSidebarElement: {
        prototype: HTMLIrSidebarElement;
        new (): HTMLIrSidebarElement;
    };
    interface HTMLIrSpanElement extends Components.IrSpan, HTMLStencilElement {
    }
    var HTMLIrSpanElement: {
        prototype: HTMLIrSpanElement;
        new (): HTMLIrSpanElement;
    };
    interface HTMLIrSwitchElement extends Components.IrSwitch, HTMLStencilElement {
    }
    var HTMLIrSwitchElement: {
        prototype: HTMLIrSwitchElement;
        new (): HTMLIrSwitchElement;
    };
    interface HTMLIrTextareaElement extends Components.IrTextarea, HTMLStencilElement {
    }
    var HTMLIrTextareaElement: {
        prototype: HTMLIrTextareaElement;
        new (): HTMLIrTextareaElement;
    };
    interface HTMLIrToastElement extends Components.IrToast, HTMLStencilElement {
    }
    var HTMLIrToastElement: {
        prototype: HTMLIrToastElement;
        new (): HTMLIrToastElement;
    };
    interface HTMLIrTooltipElement extends Components.IrTooltip, HTMLStencilElement {
    }
    var HTMLIrTooltipElement: {
        prototype: HTMLIrTooltipElement;
        new (): HTMLIrTooltipElement;
    };
    interface HTMLOtaLabelElement extends Components.OtaLabel, HTMLStencilElement {
    }
    var HTMLOtaLabelElement: {
        prototype: HTMLOtaLabelElement;
        new (): HTMLOtaLabelElement;
    };
    interface HTMLElementTagNameMap {
        "igl-application-info": HTMLIglApplicationInfoElement;
        "igl-block-dates-view": HTMLIglBlockDatesViewElement;
        "igl-book-property": HTMLIglBookPropertyElement;
        "igl-book-property-container": HTMLIglBookPropertyContainerElement;
        "igl-book-property-footer": HTMLIglBookPropertyFooterElement;
        "igl-book-property-header": HTMLIglBookPropertyHeaderElement;
        "igl-booking-event": HTMLIglBookingEventElement;
        "igl-booking-event-hover": HTMLIglBookingEventHoverElement;
        "igl-booking-overview-page": HTMLIglBookingOverviewPageElement;
        "igl-booking-room-rate-plan": HTMLIglBookingRoomRatePlanElement;
        "igl-booking-rooms": HTMLIglBookingRoomsElement;
        "igl-cal-body": HTMLIglCalBodyElement;
        "igl-cal-footer": HTMLIglCalFooterElement;
        "igl-cal-header": HTMLIglCalHeaderElement;
        "igl-date-range": HTMLIglDateRangeElement;
        "igl-legends": HTMLIglLegendsElement;
        "igl-pagetwo": HTMLIglPagetwoElement;
        "igl-property-booked-by": HTMLIglPropertyBookedByElement;
        "igl-tba-booking-view": HTMLIglTbaBookingViewElement;
        "igl-tba-category-view": HTMLIglTbaCategoryViewElement;
        "igl-to-be-assigned": HTMLIglToBeAssignedElement;
        "igloo-calendar": HTMLIglooCalendarElement;
        "ir-autocomplete": HTMLIrAutocompleteElement;
        "ir-booking-details": HTMLIrBookingDetailsElement;
        "ir-booking-listing": HTMLIrBookingListingElement;
        "ir-button": HTMLIrButtonElement;
        "ir-channel": HTMLIrChannelElement;
        "ir-channel-editor": HTMLIrChannelEditorElement;
        "ir-channel-general": HTMLIrChannelGeneralElement;
        "ir-channel-header": HTMLIrChannelHeaderElement;
        "ir-channel-mapping": HTMLIrChannelMappingElement;
        "ir-checkbox": HTMLIrCheckboxElement;
        "ir-checkboxes": HTMLIrCheckboxesElement;
        "ir-combobox": HTMLIrComboboxElement;
        "ir-common": HTMLIrCommonElement;
        "ir-date-picker": HTMLIrDatePickerElement;
        "ir-date-view": HTMLIrDateViewElement;
        "ir-dropdown": HTMLIrDropdownElement;
        "ir-guest-info": HTMLIrGuestInfoElement;
        "ir-housekeeping": HTMLIrHousekeepingElement;
        "ir-icon": HTMLIrIconElement;
        "ir-input-text": HTMLIrInputTextElement;
        "ir-interceptor": HTMLIrInterceptorElement;
        "ir-label": HTMLIrLabelElement;
        "ir-listing-header": HTMLIrListingHeaderElement;
        "ir-listing-modal": HTMLIrListingModalElement;
        "ir-loading-screen": HTMLIrLoadingScreenElement;
        "ir-modal": HTMLIrModalElement;
        "ir-payment-details": HTMLIrPaymentDetailsElement;
        "ir-pickup": HTMLIrPickupElement;
        "ir-popover": HTMLIrPopoverElement;
        "ir-room": HTMLIrRoomElement;
        "ir-room-nights": HTMLIrRoomNightsElement;
        "ir-select": HTMLIrSelectElement;
        "ir-sidebar": HTMLIrSidebarElement;
        "ir-span": HTMLIrSpanElement;
        "ir-switch": HTMLIrSwitchElement;
        "ir-textarea": HTMLIrTextareaElement;
        "ir-toast": HTMLIrToastElement;
        "ir-tooltip": HTMLIrTooltipElement;
        "ota-label": HTMLOtaLabelElement;
    }
}
declare namespace LocalJSX {
    interface IglApplicationInfo {
        "bedPreferenceType"?: any[];
        "bookingType"?: string;
        "currency"?: any;
        "dateDifference"?: number;
        "defaultGuestPreference"?: number | null;
        "defaultGuestRoomId"?: number;
        "guestInfo"?: { [key: string]: any };
        "guestRefKey"?: string;
        "index"?: number;
        "onDataUpdateEvent"?: (event: IglApplicationInfoCustomEvent<{ [key: string]: any }>) => void;
        "roomsList"?: { [key: string]: any }[];
        "selectedUnits"?: number[];
    }
    interface IglBlockDatesView {
        "defaultData"?: { [key: string]: any };
        "entryDate"?: string;
        "entryHour"?: number;
        "entryMinute"?: number;
        "fromDate"?: string;
        "isEventHover"?: boolean;
        "onDataUpdateEvent"?: (event: IglBlockDatesViewCustomEvent<{ [key: string]: any }>) => void;
        "toDate"?: string;
    }
    interface IglBookProperty {
        "adultChildConstraints"?: TAdultChildConstraints;
        "allowedBookingSources"?: any;
        "bookingData"?: { [key: string]: any };
        "countryNodeList"?: any;
        "currency"?: { id: number; code: string };
        "language"?: string;
        "onAnimateIrButton"?: (event: IglBookPropertyCustomEvent<string>) => void;
        "onAnimateIrSelect"?: (event: IglBookPropertyCustomEvent<string>) => void;
        "onBlockedCreated"?: (event: IglBookPropertyCustomEvent<RoomBlockDetails>) => void;
        "onBookingCreated"?: (event: IglBookPropertyCustomEvent<{ pool?: string; data: RoomBookingDetails[] }>) => void;
        "onCloseBookingWindow"?: (event: IglBookPropertyCustomEvent<{ [key: string]: any }>) => void;
        "onResetBookingData"?: (event: IglBookPropertyCustomEvent<null>) => void;
        "onToast"?: (event: IglBookPropertyCustomEvent<IToast>) => void;
        "propertyid"?: number;
        "showPaymentDetails"?: boolean;
    }
    interface IglBookPropertyContainer {
        "baseurl"?: string;
        "from_date"?: string;
        "language"?: string;
        "onResetBookingData"?: (event: IglBookPropertyContainerCustomEvent<null>) => void;
        "propertyid"?: number;
        "ticket"?: string;
        "to_date"?: string;
        "withIrToastAndInterceptor"?: boolean;
    }
    interface IglBookPropertyFooter {
        "disabled"?: boolean;
        "eventType"?: string;
        "onButtonClicked"?: (event: IglBookPropertyFooterCustomEvent<{ key: TPropertyButtonsTypes }>) => void;
    }
    interface IglBookPropertyHeader {
        "adultChildConstraints"?: TAdultChildConstraints;
        "adultChildCount"?: { adult: number; child: number };
        "bookedByInfoData"?: any;
        "bookingData"?: any;
        "bookingDataDefaultDateRange"?: { [key: string]: any };
        "dateRangeData"?: any;
        "defaultDaterange"?: { from_date: string; to_date: string };
        "message"?: string;
        "minDate"?: string;
        "onAdultChild"?: (event: IglBookPropertyHeaderCustomEvent<any>) => void;
        "onAnimateIrButton"?: (event: IglBookPropertyHeaderCustomEvent<string>) => void;
        "onAnimateIrSelect"?: (event: IglBookPropertyHeaderCustomEvent<string>) => void;
        "onButtonClicked"?: (event: IglBookPropertyHeaderCustomEvent<{ key: TPropertyButtonsTypes }>) => void;
        "onCheckClicked"?: (event: IglBookPropertyHeaderCustomEvent<any>) => void;
        "onSourceDropDownChange"?: (event: IglBookPropertyHeaderCustomEvent<string>) => void;
        "onSpiltBookingSelected"?: (event: IglBookPropertyHeaderCustomEvent<{ key: string; data: unknown }>) => void;
        "onSplitBookingDropDownChange"?: (event: IglBookPropertyHeaderCustomEvent<any>) => void;
        "onToast"?: (event: IglBookPropertyHeaderCustomEvent<IToast1>) => void;
        "propertyId"?: number;
        "showSplitBookingOption"?: boolean;
        "sourceOptions"?: TSourceOptions[];
        "splitBookingId"?: any;
        "splitBookings"?: any[];
    }
    interface IglBookingEvent {
        "allBookingEvents"?: { [key: string]: any };
        "bookingEvent"?: { [key: string]: any };
        "countryNodeList"?: any;
        "currency"?: any;
        "is_vacation_rental"?: boolean;
        "language"?: string;
        "onDragOverEventData"?: (event: IglBookingEventCustomEvent<any>) => void;
        "onHideBubbleInfo"?: (event: IglBookingEventCustomEvent<any>) => void;
        "onResetStreachedBooking"?: (event: IglBookingEventCustomEvent<string>) => void;
        "onShowDialog"?: (event: IglBookingEventCustomEvent<IReallocationPayload>) => void;
        "onShowRoomNightsDialog"?: (event: IglBookingEventCustomEvent<IRoomNightsData>) => void;
        "onToast"?: (event: IglBookingEventCustomEvent<IToast>) => void;
        "onUpdateEventData"?: (event: IglBookingEventCustomEvent<any>) => void;
    }
    interface IglBookingEventHover {
        "bookingEvent"?: { [key: string]: any };
        "bubbleInfoTop"?: boolean;
        "countryNodeList"?: ICountry[];
        "currency"?: any;
        "is_vacation_rental"?: boolean;
        "onBookingCreated"?: (event: IglBookingEventHoverCustomEvent<{ pool?: string; data: any[] }>) => void;
        "onDeleteButton"?: (event: IglBookingEventHoverCustomEvent<string>) => void;
        "onHideBubbleInfo"?: (event: IglBookingEventHoverCustomEvent<any>) => void;
        "onShowBookingPopup"?: (event: IglBookingEventHoverCustomEvent<any>) => void;
    }
    interface IglBookingOverviewPage {
        "adultChildConstraints"?: TAdultChildConstraints;
        "adultChildCount"?: { adult: number; child: number };
        "bookedByInfoData"?: any;
        "bookingData"?: any;
        "currency"?: any;
        "dateRangeData"?: any;
        "defaultDaterange"?: { from_date: string; to_date: string };
        "eventType"?: string;
        "initialRoomIds"?: any;
        "message"?: string;
        "onRoomsDataUpdate"?: (event: IglBookingOverviewPageCustomEvent<any>) => void;
        "propertyId"?: number;
        "ratePricingMode"?: any;
        "selectedRooms"?: Map<string, Map<string, any>>;
        "showSplitBookingOption"?: boolean;
        "sourceOptions"?: TSourceOptions[];
    }
    interface IglBookingRoomRatePlan {
        "bookingType"?: string;
        "currency"?: any;
        "dateDifference"?: number;
        "defaultData"?: { [key: string]: any };
        "defaultRoomId"?: any;
        "fullyBlocked"?: boolean;
        "index"?: number;
        "isBookDisabled"?: boolean;
        "is_bed_configuration_enabled"?: boolean;
        "onDataUpdateEvent"?: (event: IglBookingRoomRatePlanCustomEvent<{ [key: string]: any }>) => void;
        "onGotoSplitPageTwoEvent"?: (event: IglBookingRoomRatePlanCustomEvent<{ [key: string]: any }>) => void;
        "physicalrooms"?: any;
        "ratePlanData"?: { [key: string]: any };
        "ratePricingMode"?: any[];
        "selectedRoom"?: any;
        "shouldBeDisabled"?: boolean;
        "totalAvailableRooms"?: number;
    }
    interface IglBookingRooms {
        "bookingType"?: string;
        "currency"?: any;
        "dateDifference"?: number;
        "defaultData"?: Map<string, any>;
        "initialRoomIds"?: any;
        "isBookDisabled"?: boolean;
        "onDataUpdateEvent"?: (event: IglBookingRoomsCustomEvent<{ [key: string]: any }>) => void;
        "ratePricingMode"?: any[];
        "roomInfoId"?: number | null;
        "roomTypeData"?: { [key: string]: any };
    }
    interface IglCalBody {
        "calendarData"?: { [key: string]: any };
        "countryNodeList"?: any;
        "currency"?: any;
        "highlightedDate"?: string;
        "isScrollViewDragging"?: boolean;
        "language"?: string;
        "onAddBookingDatasEvent"?: (event: IglCalBodyCustomEvent<any[]>) => void;
        "onScrollPageToRoom"?: (event: IglCalBodyCustomEvent<any>) => void;
        "onShowBookingPopup"?: (event: IglCalBodyCustomEvent<any>) => void;
        "today"?: String;
    }
    interface IglCalFooter {
        "calendarData"?: { [key: string]: any };
        "highlightedDate"?: string;
        "onOptionEvent"?: (event: IglCalFooterCustomEvent<{ [key: string]: any }>) => void;
        "today"?: String;
    }
    interface IglCalHeader {
        "calendarData"?: { [key: string]: any };
        "highlightedDate"?: string;
        "onGotoRoomEvent"?: (event: IglCalHeaderCustomEvent<{
    [key: string]: any;
  }>) => void;
        "onGotoToBeAssignedDate"?: (event: IglCalHeaderCustomEvent<{
    [key: string]: any;
  }>) => void;
        "onOptionEvent"?: (event: IglCalHeaderCustomEvent<{ [key: string]: any }>) => void;
        "propertyid"?: number;
        "to_date"?: string;
        "today"?: String;
        "unassignedDates"?: any;
    }
    interface IglDateRange {
        "dateLabel"?: string;
        "defaultData"?: { [key: string]: any };
        "disabled"?: boolean;
        "maxDate"?: string;
        "minDate"?: string;
        "onDateSelectEvent"?: (event: IglDateRangeCustomEvent<{ [key: string]: any }>) => void;
        "onToast"?: (event: IglDateRangeCustomEvent<IToast1>) => void;
        "withDateDifference"?: boolean;
    }
    interface IglLegends {
        "legendData"?: { [key: string]: any };
        "onOptionEvent"?: (event: IglLegendsCustomEvent<{ [key: string]: any }>) => void;
    }
    interface IglPagetwo {
        "bedPreferenceType"?: any;
        "bookedByInfoData"?: { [key: string]: any };
        "bookingData"?: { [key: string]: any };
        "countryNodeList"?: any;
        "currency"?: any;
        "dateRangeData"?: { [key: string]: any };
        "defaultGuestData"?: IglBookPropertyPayloadEditBooking;
        "isEditOrAddRoomEvent"?: boolean;
        "isLoading"?: string;
        "language"?: string;
        "onButtonClicked"?: (event: IglPagetwoCustomEvent<{
    key: TPropertyButtonsTypes;
    data?: CustomEvent;
  }>) => void;
        "onDataUpdateEvent"?: (event: IglPagetwoCustomEvent<IPageTwoDataUpdateProps>) => void;
        "propertyId"?: number;
        "selectedGuestData"?: any;
        "selectedRooms"?: Map<string, Map<string, any>>;
        "showPaymentDetails"?: boolean;
        "showSplitBookingOption"?: boolean;
    }
    interface IglPropertyBookedBy {
        "countryNodeList"?: ICountry[];
        "defaultData"?: { [key: string]: any };
        "language"?: string;
        "onDataUpdateEvent"?: (event: IglPropertyBookedByCustomEvent<{ [key: string]: any }>) => void;
        "propertyId"?: number;
        "showPaymentDetails"?: boolean;
    }
    interface IglTbaBookingView {
        "calendarData"?: { [key: string]: any };
        "categoriesData"?: { [key: string]: any };
        "categoryId"?: any;
        "categoryIndex"?: any;
        "eventData"?: { [key: string]: any };
        "eventIndex"?: any;
        "onAddToBeAssignedEvent"?: (event: IglTbaBookingViewCustomEvent<any>) => void;
        "onAssignRoomEvent"?: (event: IglTbaBookingViewCustomEvent<{ [key: string]: any }>) => void;
        "onHighlightToBeAssignedBookingEvent"?: (event: IglTbaBookingViewCustomEvent<any>) => void;
        "onScrollPageToRoom"?: (event: IglTbaBookingViewCustomEvent<any>) => void;
        "selectedDate"?: any;
    }
    interface IglTbaCategoryView {
        "calendarData"?: { [key: string]: any };
        "categoriesData"?: { [key: string]: any };
        "categoryId"?: any;
        "categoryIndex"?: any;
        "eventDatas"?: any;
        "onAssignUnitEvent"?: (event: IglTbaCategoryViewCustomEvent<{ [key: string]: any }>) => void;
        "selectedDate"?: any;
    }
    interface IglToBeAssigned {
        "calendarData"?: { [key: string]: any };
        "from_date"?: string;
        "onAddToBeAssignedEvent"?: (event: IglToBeAssignedCustomEvent<any>) => void;
        "onHighlightToBeAssignedBookingEvent"?: (event: IglToBeAssignedCustomEvent<any>) => void;
        "onOptionEvent"?: (event: IglToBeAssignedCustomEvent<{ [key: string]: any }>) => void;
        "onReduceAvailableUnitEvent"?: (event: IglToBeAssignedCustomEvent<{ [key: string]: any }>) => void;
        "onShowBookingPopup"?: (event: IglToBeAssignedCustomEvent<any>) => void;
        "propertyid"?: number;
        "to_date"?: string;
        "unassignedDatesProp"?: any;
    }
    interface IglooCalendar {
        "baseurl"?: string;
        "currencyName"?: string;
        "from_date"?: string;
        "language"?: string;
        "loadingMessage"?: string;
        "onCalculateUnassignedDates"?: (event: IglooCalendarCustomEvent<any>) => void;
        "onDragOverHighlightElement"?: (event: IglooCalendarCustomEvent<any>) => void;
        "onMoveBookingTo"?: (event: IglooCalendarCustomEvent<any>) => void;
        "onReduceAvailableUnitEvent"?: (event: IglooCalendarCustomEvent<{ fromDate: string; toDate: string }>) => void;
        "onRevertBooking"?: (event: IglooCalendarCustomEvent<any>) => void;
        "propertyid"?: number;
        "ticket"?: string;
        "to_date"?: string;
    }
    interface IrAutocomplete {
        "danger_border"?: boolean;
        "disabled"?: boolean;
        "duration"?: number;
        "from_date"?: string;
        "inputId"?: string;
        "isSplitBooking"?: boolean;
        "name"?: string;
        "onComboboxValue"?: (event: IrAutocompleteCustomEvent<{ key: string; data: unknown }>) => void;
        "onInputCleared"?: (event: IrAutocompleteCustomEvent<null>) => void;
        "onToast"?: (event: IrAutocompleteCustomEvent<IToast1>) => void;
        "placeholder"?: string;
        "propertyId"?: number;
        "required"?: boolean;
        "to_date"?: string;
        "type"?: 'email' | 'text' | 'password' | 'number' | 'search';
        "value"?: string;
    }
    interface IrBookingDetails {
        "baseurl"?: string;
        "bookingNumber"?: string;
        "hasCheckIn"?: boolean;
        "hasCheckOut"?: boolean;
        "hasDelete"?: boolean;
        "hasMenu"?: boolean;
        "hasPrint"?: boolean;
        "hasReceipt"?: boolean;
        "hasRoomAdd"?: boolean;
        "hasRoomDelete"?: boolean;
        "hasRoomEdit"?: boolean;
        "is_from_front_desk"?: boolean;
        "language"?: string;
        "onBookingChanged"?: (event: IrBookingDetailsCustomEvent<Booking>) => void;
        "onToast"?: (event: IrBookingDetailsCustomEvent<IToast1>) => void;
        "propertyid"?: number;
        "ticket"?: string;
    }
    interface IrBookingListing {
        "baseurl"?: string;
        "language"?: string;
        "propertyid"?: number;
        "rowCount"?: number;
        "ticket"?: string;
    }
    interface IrButton {
        "btn_block"?: boolean;
        "btn_color"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "btn_disabled"?: boolean;
        "btn_id"?: string;
        "btn_styles"?: string;
        "btn_type"?: string;
        "icon"?: string;
        "isLoading"?: boolean;
        "name"?: string;
        "onClickHanlder"?: (event: IrButtonCustomEvent<any>) => void;
        "size"?: 'sm' | 'md' | 'lg';
        "text"?: any;
        "textSize"?: 'sm' | 'md' | 'lg';
    }
    interface IrChannel {
        "baseurl"?: string;
        "language"?: string;
        "propertyid"?: number;
        "ticket"?: string;
    }
    interface IrChannelEditor {
        "channel_status"?: 'create' | 'edit' | null;
        "onCloseSideBar"?: (event: IrChannelEditorCustomEvent<null>) => void;
        "onSaveChannelFinished"?: (event: IrChannelEditorCustomEvent<null>) => void;
        "ticket"?: string;
    }
    interface IrChannelGeneral {
        "channel_status"?: 'create' | 'edit' | null;
    }
    interface IrChannelHeader {
        "headerTitles"?: { id: string; name: string; disabled: boolean }[];
        "onTabChanged"?: (event: IrChannelHeaderCustomEvent<string>) => void;
    }
    interface IrChannelMapping {
    }
    interface IrCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "labelPosition"?: 'before' | 'after';
        "name"?: string;
        "onCheckboxChange"?: (event: IrCheckboxCustomEvent<{ name: string; value: string; checked: boolean }>) => void;
        "value"?: string;
    }
    interface IrCheckboxes {
        "checkboxes"?: checkboxes[];
        "onCheckboxesChange"?: (event: IrCheckboxesCustomEvent<checkboxes[]>) => void;
    }
    interface IrCombobox {
        "autoFocus"?: boolean;
        "data"?: { id: string; name: string }[];
        "disabled"?: boolean;
        "duration"?: number;
        "input_id"?: string;
        "onComboboxValueChange"?: (event: IrComboboxCustomEvent<{ key: string; data: unknown }>) => void;
        "onInputCleared"?: (event: IrComboboxCustomEvent<null>) => void;
        "onToast"?: (event: IrComboboxCustomEvent<IToast>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface IrCommon {
        "extraResources"?: string;
    }
    interface IrDatePicker {
        "applyLabel"?: string;
        "autoApply"?: boolean;
        "cancelLabel"?: string;
        "customRangeLabel"?: string;
        "daysOfWeek"?: string[];
        "disabled"?: boolean;
        "firstDay"?: number;
        "format"?: string;
        "fromDate"?: Date;
        "fromLabel"?: string;
        "maxDate"?: string;
        "maxSpan"?: moment.DurationInputArg1;
        "minDate"?: string;
        "monthNames"?: string[];
        "onDateChanged"?: (event: IrDatePickerCustomEvent<{
    start: moment.Moment;
    end: moment.Moment;
  }>) => void;
        "opens"?: 'left' | 'right' | 'center';
        "separator"?: string;
        "singleDatePicker"?: boolean;
        "toDate"?: Date;
        "toLabel"?: string;
        "weekLabel"?: string;
    }
    interface IrDateView {
        "dateOption"?: string;
        "from_date"?: string | Date | moment.Moment;
        "showDateDifference"?: boolean;
        "to_date"?: string | Date | moment.Moment;
    }
    interface IrDropdown {
        "data"?: {
    name: string;
    icon: string;
    children: {
      name: string;
      icon: string;
    }[];
  };
        "object"?: any;
        "onDropdownItemCLicked"?: (event: IrDropdownCustomEvent<{ name: string; object: any }>) => void;
    }
    interface IrGuestInfo {
        "booking_nbr"?: string;
        "defaultTexts"?: ILocale;
        "email"?: string;
        "language"?: string;
        "onCloseSideBar"?: (event: IrGuestInfoCustomEvent<null>) => void;
        "onResetBookingData"?: (event: IrGuestInfoCustomEvent<null>) => void;
        "setupDataCountries"?: selectOption[];
        "setupDataCountriesCode"?: selectOption[];
    }
    interface IrHousekeeping {
        "baseurl"?: string;
        "language"?: string;
        "propertyid"?: number;
        "ticket"?: string;
    }
    interface IrIcon {
        "icon"?: string;
        "onIconClickHandler"?: (event: IrIconCustomEvent<any>) => void;
    }
    interface IrInputText {
        "LabelAvailable"?: boolean;
        "disabled"?: boolean;
        "error"?: boolean;
        "inputStyle"?: boolean;
        "inputStyles"?: string;
        "label"?: string;
        "labelBackground"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | null;
        "labelBorder"?: 'theme' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none';
        "labelColor"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelPosition"?: 'left' | 'right' | 'center';
        "labelWidth"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
        "name"?: string;
        "onTextChange"?: (event: IrInputTextCustomEvent<any>) => void;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "size"?: 'sm' | 'md' | 'lg';
        "submited"?: boolean;
        "textSize"?: 'sm' | 'md' | 'lg';
        "type"?: string;
        "value"?: any;
        "variant"?: 'default' | 'icon';
    }
    interface IrInterceptor {
        "handledEndpoints"?: string[];
        "onToast"?: (event: IrInterceptorCustomEvent<IToast1>) => void;
    }
    interface IrLabel {
        "iconShown"?: boolean;
        "imageSrc"?: string;
        "label"?: string;
        "onEditSidebar"?: (event: IrLabelCustomEvent<any>) => void;
        "value"?: string;
    }
    interface IrListingHeader {
        "baseurl"?: string;
        "language"?: string;
        "propertyId"?: number;
    }
    interface IrListingModal {
        "editBooking"?: { booking: Booking; cause: 'edit' | 'payment' | 'delete' };
        "modalTitle"?: string;
        "onModalClosed"?: (event: IrListingModalCustomEvent<null>) => void;
        "onResetData"?: (event: IrListingModalCustomEvent<string>) => void;
    }
    interface IrLoadingScreen {
        "message"?: string;
    }
    interface IrModal {
        "btnPosition"?: 'left' | 'right' | 'center';
        "icon"?: string;
        "iconAvailable"?: boolean;
        "item"?: any;
        "leftBtnActive"?: boolean;
        "leftBtnColor"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "leftBtnText"?: string;
        "modalBody"?: string;
        "modalTitle"?: string;
        "onCancelModal"?: (event: IrModalCustomEvent<any>) => void;
        "onConfirmModal"?: (event: IrModalCustomEvent<any>) => void;
        "rightBtnActive"?: boolean;
        "rightBtnColor"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "rightBtnText"?: string;
    }
    interface IrPaymentDetails {
        "bookingDetails"?: Booking;
        "defaultTexts"?: ILocale;
        "onResetBookingData"?: (event: IrPaymentDetailsCustomEvent<null>) => void;
        "onToast"?: (event: IrPaymentDetailsCustomEvent<IToast>) => void;
    }
    interface IrPickup {
        "bookingNumber"?: string;
        "defaultPickupData"?: IBookingPickupInfo | null;
        "numberOfPersons"?: number;
        "onCloseModal"?: (event: IrPickupCustomEvent<null>) => void;
        "onResetBookingData"?: (event: IrPickupCustomEvent<null>) => void;
    }
    interface IrPopover {
        "irPopoverLeft"?: string;
        "popoverTitle"?: string;
    }
    interface IrRoom {
        "bookingEvent"?: Booking;
        "bookingIndex"?: number;
        "currency"?: string;
        "defaultTexts"?: ILocale;
        "hasCheckIn"?: boolean;
        "hasCheckOut"?: boolean;
        "hasRoomAdd"?: boolean;
        "hasRoomDelete"?: boolean;
        "hasRoomEdit"?: boolean;
        "legendData"?: any;
        "mealCodeName"?: string;
        "myRoomTypeFoodCat"?: string;
        "onDeleteFinished"?: (event: IrRoomCustomEvent<string>) => void;
        "onEditInitiated"?: (event: IrRoomCustomEvent<TIglBookPropertyPayload>) => void;
        "onPressCheckIn"?: (event: IrRoomCustomEvent<any>) => void;
        "onPressCheckOut"?: (event: IrRoomCustomEvent<any>) => void;
        "roomsInfo"?: any;
        "ticket"?: any;
    }
    interface IrRoomNights {
        "baseUrl"?: string;
        "bookingNumber"?: string;
        "fromDate"?: string;
        "identifier"?: string;
        "language"?: string;
        "onCloseRoomNightsDialog"?: (event: IrRoomNightsCustomEvent<IRoomNightsDataEventPayload>) => void;
        "pool"?: string;
        "propertyId"?: number;
        "ticket"?: string;
        "toDate"?: string;
    }
    interface IrSelect {
        "LabelAvailable"?: boolean;
        "data"?: selectOption1[];
        "firstOption"?: string;
        "label"?: string;
        "labelBackground"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | null;
        "labelBorder"?: 'theme' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none';
        "labelColor"?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
        "labelPosition"?: 'left' | 'right' | 'center';
        "labelWidth"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
        "name"?: string;
        "onSelectChange"?: (event: IrSelectCustomEvent<any>) => void;
        "required"?: boolean;
        "selectContainerStyle"?: string;
        "selectStyle"?: boolean;
        "selectStyles"?: string;
        "select_id"?: string;
        "selectedValue"?: any;
        "showFirstOption"?: boolean;
        "size"?: 'sm' | 'md' | 'lg';
        "submited"?: boolean;
        "textSize"?: 'sm' | 'md' | 'lg';
    }
    interface IrSidebar {
        "name"?: string;
        "onIrSidebarToggle"?: (event: IrSidebarCustomEvent<any>) => void;
        "open"?: boolean;
        "showCloseButton"?: boolean;
        "side"?: 'right' | 'left';
        "sidebarStyles"?: Partial<CSSStyleDeclaration>;
    }
    interface IrSpan {
        "text"?: any;
    }
    interface IrSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "onCheckChange"?: (event: IrSwitchCustomEvent<boolean>) => void;
        "switchId"?: string;
    }
    interface IrTextarea {
        "cols"?: number;
        "label"?: string;
        "placeholder"?: string;
        "rows"?: number;
        "text"?: string;
    }
    interface IrToast {
        "position"?: TPositions;
    }
    interface IrTooltip {
        "customSlot"?: boolean;
        "message"?: string;
        "withHtml"?: boolean;
    }
    interface OtaLabel {
        "label"?: string;
        "remarks"?: IOtaNotes[];
    }
    interface IntrinsicElements {
        "igl-application-info": IglApplicationInfo;
        "igl-block-dates-view": IglBlockDatesView;
        "igl-book-property": IglBookProperty;
        "igl-book-property-container": IglBookPropertyContainer;
        "igl-book-property-footer": IglBookPropertyFooter;
        "igl-book-property-header": IglBookPropertyHeader;
        "igl-booking-event": IglBookingEvent;
        "igl-booking-event-hover": IglBookingEventHover;
        "igl-booking-overview-page": IglBookingOverviewPage;
        "igl-booking-room-rate-plan": IglBookingRoomRatePlan;
        "igl-booking-rooms": IglBookingRooms;
        "igl-cal-body": IglCalBody;
        "igl-cal-footer": IglCalFooter;
        "igl-cal-header": IglCalHeader;
        "igl-date-range": IglDateRange;
        "igl-legends": IglLegends;
        "igl-pagetwo": IglPagetwo;
        "igl-property-booked-by": IglPropertyBookedBy;
        "igl-tba-booking-view": IglTbaBookingView;
        "igl-tba-category-view": IglTbaCategoryView;
        "igl-to-be-assigned": IglToBeAssigned;
        "igloo-calendar": IglooCalendar;
        "ir-autocomplete": IrAutocomplete;
        "ir-booking-details": IrBookingDetails;
        "ir-booking-listing": IrBookingListing;
        "ir-button": IrButton;
        "ir-channel": IrChannel;
        "ir-channel-editor": IrChannelEditor;
        "ir-channel-general": IrChannelGeneral;
        "ir-channel-header": IrChannelHeader;
        "ir-channel-mapping": IrChannelMapping;
        "ir-checkbox": IrCheckbox;
        "ir-checkboxes": IrCheckboxes;
        "ir-combobox": IrCombobox;
        "ir-common": IrCommon;
        "ir-date-picker": IrDatePicker;
        "ir-date-view": IrDateView;
        "ir-dropdown": IrDropdown;
        "ir-guest-info": IrGuestInfo;
        "ir-housekeeping": IrHousekeeping;
        "ir-icon": IrIcon;
        "ir-input-text": IrInputText;
        "ir-interceptor": IrInterceptor;
        "ir-label": IrLabel;
        "ir-listing-header": IrListingHeader;
        "ir-listing-modal": IrListingModal;
        "ir-loading-screen": IrLoadingScreen;
        "ir-modal": IrModal;
        "ir-payment-details": IrPaymentDetails;
        "ir-pickup": IrPickup;
        "ir-popover": IrPopover;
        "ir-room": IrRoom;
        "ir-room-nights": IrRoomNights;
        "ir-select": IrSelect;
        "ir-sidebar": IrSidebar;
        "ir-span": IrSpan;
        "ir-switch": IrSwitch;
        "ir-textarea": IrTextarea;
        "ir-toast": IrToast;
        "ir-tooltip": IrTooltip;
        "ota-label": OtaLabel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "igl-application-info": LocalJSX.IglApplicationInfo & JSXBase.HTMLAttributes<HTMLIglApplicationInfoElement>;
            "igl-block-dates-view": LocalJSX.IglBlockDatesView & JSXBase.HTMLAttributes<HTMLIglBlockDatesViewElement>;
            "igl-book-property": LocalJSX.IglBookProperty & JSXBase.HTMLAttributes<HTMLIglBookPropertyElement>;
            "igl-book-property-container": LocalJSX.IglBookPropertyContainer & JSXBase.HTMLAttributes<HTMLIglBookPropertyContainerElement>;
            "igl-book-property-footer": LocalJSX.IglBookPropertyFooter & JSXBase.HTMLAttributes<HTMLIglBookPropertyFooterElement>;
            "igl-book-property-header": LocalJSX.IglBookPropertyHeader & JSXBase.HTMLAttributes<HTMLIglBookPropertyHeaderElement>;
            "igl-booking-event": LocalJSX.IglBookingEvent & JSXBase.HTMLAttributes<HTMLIglBookingEventElement>;
            "igl-booking-event-hover": LocalJSX.IglBookingEventHover & JSXBase.HTMLAttributes<HTMLIglBookingEventHoverElement>;
            "igl-booking-overview-page": LocalJSX.IglBookingOverviewPage & JSXBase.HTMLAttributes<HTMLIglBookingOverviewPageElement>;
            "igl-booking-room-rate-plan": LocalJSX.IglBookingRoomRatePlan & JSXBase.HTMLAttributes<HTMLIglBookingRoomRatePlanElement>;
            "igl-booking-rooms": LocalJSX.IglBookingRooms & JSXBase.HTMLAttributes<HTMLIglBookingRoomsElement>;
            "igl-cal-body": LocalJSX.IglCalBody & JSXBase.HTMLAttributes<HTMLIglCalBodyElement>;
            "igl-cal-footer": LocalJSX.IglCalFooter & JSXBase.HTMLAttributes<HTMLIglCalFooterElement>;
            "igl-cal-header": LocalJSX.IglCalHeader & JSXBase.HTMLAttributes<HTMLIglCalHeaderElement>;
            "igl-date-range": LocalJSX.IglDateRange & JSXBase.HTMLAttributes<HTMLIglDateRangeElement>;
            "igl-legends": LocalJSX.IglLegends & JSXBase.HTMLAttributes<HTMLIglLegendsElement>;
            "igl-pagetwo": LocalJSX.IglPagetwo & JSXBase.HTMLAttributes<HTMLIglPagetwoElement>;
            "igl-property-booked-by": LocalJSX.IglPropertyBookedBy & JSXBase.HTMLAttributes<HTMLIglPropertyBookedByElement>;
            "igl-tba-booking-view": LocalJSX.IglTbaBookingView & JSXBase.HTMLAttributes<HTMLIglTbaBookingViewElement>;
            "igl-tba-category-view": LocalJSX.IglTbaCategoryView & JSXBase.HTMLAttributes<HTMLIglTbaCategoryViewElement>;
            "igl-to-be-assigned": LocalJSX.IglToBeAssigned & JSXBase.HTMLAttributes<HTMLIglToBeAssignedElement>;
            "igloo-calendar": LocalJSX.IglooCalendar & JSXBase.HTMLAttributes<HTMLIglooCalendarElement>;
            "ir-autocomplete": LocalJSX.IrAutocomplete & JSXBase.HTMLAttributes<HTMLIrAutocompleteElement>;
            "ir-booking-details": LocalJSX.IrBookingDetails & JSXBase.HTMLAttributes<HTMLIrBookingDetailsElement>;
            "ir-booking-listing": LocalJSX.IrBookingListing & JSXBase.HTMLAttributes<HTMLIrBookingListingElement>;
            "ir-button": LocalJSX.IrButton & JSXBase.HTMLAttributes<HTMLIrButtonElement>;
            "ir-channel": LocalJSX.IrChannel & JSXBase.HTMLAttributes<HTMLIrChannelElement>;
            "ir-channel-editor": LocalJSX.IrChannelEditor & JSXBase.HTMLAttributes<HTMLIrChannelEditorElement>;
            "ir-channel-general": LocalJSX.IrChannelGeneral & JSXBase.HTMLAttributes<HTMLIrChannelGeneralElement>;
            "ir-channel-header": LocalJSX.IrChannelHeader & JSXBase.HTMLAttributes<HTMLIrChannelHeaderElement>;
            "ir-channel-mapping": LocalJSX.IrChannelMapping & JSXBase.HTMLAttributes<HTMLIrChannelMappingElement>;
            "ir-checkbox": LocalJSX.IrCheckbox & JSXBase.HTMLAttributes<HTMLIrCheckboxElement>;
            "ir-checkboxes": LocalJSX.IrCheckboxes & JSXBase.HTMLAttributes<HTMLIrCheckboxesElement>;
            "ir-combobox": LocalJSX.IrCombobox & JSXBase.HTMLAttributes<HTMLIrComboboxElement>;
            "ir-common": LocalJSX.IrCommon & JSXBase.HTMLAttributes<HTMLIrCommonElement>;
            "ir-date-picker": LocalJSX.IrDatePicker & JSXBase.HTMLAttributes<HTMLIrDatePickerElement>;
            "ir-date-view": LocalJSX.IrDateView & JSXBase.HTMLAttributes<HTMLIrDateViewElement>;
            "ir-dropdown": LocalJSX.IrDropdown & JSXBase.HTMLAttributes<HTMLIrDropdownElement>;
            "ir-guest-info": LocalJSX.IrGuestInfo & JSXBase.HTMLAttributes<HTMLIrGuestInfoElement>;
            "ir-housekeeping": LocalJSX.IrHousekeeping & JSXBase.HTMLAttributes<HTMLIrHousekeepingElement>;
            "ir-icon": LocalJSX.IrIcon & JSXBase.HTMLAttributes<HTMLIrIconElement>;
            "ir-input-text": LocalJSX.IrInputText & JSXBase.HTMLAttributes<HTMLIrInputTextElement>;
            "ir-interceptor": LocalJSX.IrInterceptor & JSXBase.HTMLAttributes<HTMLIrInterceptorElement>;
            "ir-label": LocalJSX.IrLabel & JSXBase.HTMLAttributes<HTMLIrLabelElement>;
            "ir-listing-header": LocalJSX.IrListingHeader & JSXBase.HTMLAttributes<HTMLIrListingHeaderElement>;
            "ir-listing-modal": LocalJSX.IrListingModal & JSXBase.HTMLAttributes<HTMLIrListingModalElement>;
            "ir-loading-screen": LocalJSX.IrLoadingScreen & JSXBase.HTMLAttributes<HTMLIrLoadingScreenElement>;
            "ir-modal": LocalJSX.IrModal & JSXBase.HTMLAttributes<HTMLIrModalElement>;
            "ir-payment-details": LocalJSX.IrPaymentDetails & JSXBase.HTMLAttributes<HTMLIrPaymentDetailsElement>;
            "ir-pickup": LocalJSX.IrPickup & JSXBase.HTMLAttributes<HTMLIrPickupElement>;
            "ir-popover": LocalJSX.IrPopover & JSXBase.HTMLAttributes<HTMLIrPopoverElement>;
            "ir-room": LocalJSX.IrRoom & JSXBase.HTMLAttributes<HTMLIrRoomElement>;
            "ir-room-nights": LocalJSX.IrRoomNights & JSXBase.HTMLAttributes<HTMLIrRoomNightsElement>;
            "ir-select": LocalJSX.IrSelect & JSXBase.HTMLAttributes<HTMLIrSelectElement>;
            "ir-sidebar": LocalJSX.IrSidebar & JSXBase.HTMLAttributes<HTMLIrSidebarElement>;
            "ir-span": LocalJSX.IrSpan & JSXBase.HTMLAttributes<HTMLIrSpanElement>;
            "ir-switch": LocalJSX.IrSwitch & JSXBase.HTMLAttributes<HTMLIrSwitchElement>;
            "ir-textarea": LocalJSX.IrTextarea & JSXBase.HTMLAttributes<HTMLIrTextareaElement>;
            "ir-toast": LocalJSX.IrToast & JSXBase.HTMLAttributes<HTMLIrToastElement>;
            "ir-tooltip": LocalJSX.IrTooltip & JSXBase.HTMLAttributes<HTMLIrTooltipElement>;
            "ota-label": LocalJSX.OtaLabel & JSXBase.HTMLAttributes<HTMLOtaLabelElement>;
        }
    }
}
