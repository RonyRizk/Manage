{"file":"booking.service.js","mappings":";;;AASO,eAAe,aAAa,CAAC,MAAmB;EACrD,MAAM,UAAU,GAAU,EAAE,CAAC;EAC7B,MAAM,UAAU,GAAG,MAAM,aAAa,EAAE,CAAC;EACzC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;IAC1B,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE;MAC5B,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,UAAU,EAAE;QACjC,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;OAC3D;KACF;GACF;EAED,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAS,aAAa,CACpB,YAAgC,EAChC,UAAiB,EACjB,UAA6C;EAE7C,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE;IAC/B,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE;MACpC,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,KAAK,KAAK,EAAE;QAClD,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;OACrE;KACF;GACF;AACH,CAAC;AACD,SAAS,UAAU,CAAC,SAAwB,EAAE,QAAuB;EACnE,IAAI,SAAS,KAAK,IAAI,IAAI,QAAQ,KAAK,IAAI;IAAE,OAAO,EAAE,CAAC;EACvD,IAAI,QAAQ,KAAK,IAAI,EAAE;IACrB,OAAO,GAAG,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,EAAE,MAAM,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,EAAE,EAAE,CAAC;GACjD;EACD,OAAO,SAAS,CAAC;AACnB,CAAC;AACD,eAAe,aAAa;EAC1B,IAAI;IACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC1D,IAAI,KAAK,EAAE;MACT,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,+CAA+C,KAAK,EAAE,EACtD;QACE,SAAS,EAAE,CAAC,cAAc,CAAC;OAC5B,CACF,CAAC;MACF,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM;QAChC,IAAI,EAAE,CAAC,CAAC,SAAS;QACjB,KAAK,EAAE,CAAC,CAAC,aAAa;OACvB,CAAC,CAAC,CAAC;KACL;SAAM;MACL,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;KAClC;GACF;EAAC,OAAO,KAAK,EAAE;IACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;GACpB;AACH,CAAC;AAED,MAAM,MAAM,GAA2B;EACrC,KAAK,EAAE,SAAS;EAChB,KAAK,EAAE,oBAAoB;EAC3B,KAAK,EAAE,SAAS;EAChB,KAAK,EAAE,UAAU;CAClB,CAAC;AAEF,SAAS,cAAc,CACrB,IAAc,EACd,UAA6C;;EAE7C,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;;IAEzD,OAAO;MACL,EAAE,EAAE,IAAI,CAAC,IAAI;MACb,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK;MAC/B,OAAO,EAAE,EAAE;MACX,IAAI,EACF,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,IAAI,EAAE;MACxE,mBAAmB,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW;MACnD,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK;MAC/B,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,iBAAiB;MAChD,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,iBAAiB;MAChD,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,mBAAmB;MACpD,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK;MACzC,SAAS,EAAE,IAAI,CAAC,IAAI;MACpB,OAAO,EAAE,IAAI,CAAC,IAAI;MAClB,UAAU,EAAE,CAAC;MACb,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;MACrC,IAAI,EAAE,IAAI,CAAC,IAAI;MACf,WAAW,EAAE,IAAI,CAAC,gBAAgB;MAClC,cAAc,EAAE,IAAI,CAAC,gBAAgB,KAAK,KAAK;MAC/C,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS;MAClD,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO;KAC/C,CAAC;GACH;;EAED,OAAO;IACL,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;IAC5B,OAAO,EAAE,IAAI,CAAC,IAAI;IAClB,SAAS,EAAE,IAAI,CAAC,IAAI;IACpB,UAAU,EAAE,CAAC;IACb,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;IACrC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACrC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IACvE,KAAK,EAAE,MAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,mCAAI,EAAE;IACtC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI;IACvC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;IACrB,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI;IAClC,aAAa,EAAE,KAAK;IACpB,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;IACnC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU;IAChC,SAAS,EAAE,CAAC;IACZ,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS;IAC3C,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY;IAChD,KAAK,EAAE,IAAI,CAAC,KAAK;IACjB,IAAI,EAAE,IAAI,CAAC,IAAI;IACf,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;IACzB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;IACzB,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;IAC5B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU;IACtC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS;IAC5C,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO;GACzC,CAAC;AACJ,CAAC;AAED,SAAS,yBAAyB,CAAC,IAAS,EAAE,IAAc;EAC1D,IAAI,CAAC,UAAU,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;EAC5D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;EAEzB,IAAI,IAAI,CAAC,OAAO,EAAE;IAChB,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;IACjC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;MAClB,YAAY,EAAE,OAAO,CAAC,WAAW;KAClC,CAAC,CAAC;GACJ;EAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,kBAAkB,CACzB,IAAc,EACd,UAAiB,EACjB,UAA6C;EAE7C,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC;EAE5E,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,MAAM,OAAO,GAAG,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IACjD,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GAC1B;OAAM;IACL,MAAM,WAAW,GAAG,yBAAyB,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;IACvE,UAAU,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;GACjC;AACH;;MC5Ia,cAAc;EAClB,MAAM,eAAe,CAC1B,UAAkB,EAClB,SAAiB,EACjB,OAAe;IAEf,IAAI;MACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC1D,IAAI,KAAK,KAAK,IAAI,EAAE;QAClB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,gCAAgC,KAAK,EAAE,EACvC;UACE,UAAU;UACV,SAAS;UACT,OAAO;SACR,CACF,CAAC;QACF,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;UAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpC;QACD,MAAM,MAAM,GAAgB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAClD,MAAM,YAAY,GAA+C,EAAE,CAAC;QACpE,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,CAAC;QAC9C,MAAM,IAAI,GAAc,MAAM;WAC3B,GAAG,CAAC,CAAC,KAAK;UACT,YAAY,CAAC,IAAI,CAAC;YAChB,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM;YAC5B,SAAS,EAAE,KAAK,CAAC,WAAW;WAC7B,CAAC,CAAC;UACH,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;YAC9B,GAAG,EAAE,yBAAyB,CAC5B,GAAG,CAAC,WAAW,EACf,KAAK,CAAC,WAAW,CAClB;YACD,WAAW,EAAE,iBAAiB,CAC5B,GAAG,CAAC,WAAW,EACf,KAAK,CAAC,WAAW,CAClB;YACD,cAAc,EAAE,GAAG,CAAC,WAAW;YAC/B,IAAI,EAAE,GAAG,CAAC,UAAU;YACpB,oBAAoB,EAAE,GAAG,CAAC,oBAAoB;YAC9C,SAAS,EAAE,GAAG,CAAC,SAAS;WACzB,CAAC,CAAC,CAAC;SACL,CAAC;WACD,IAAI,EAAE,CAAC;QAEV,OAAO,OAAO,CAAC,OAAO,CAAC;UACrB,aAAa,EAAE,IAAI;UACnB,YAAY,EAAE,EAAE;UAChB,0BAA0B,EAAE;YAC1B,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,IAAI,CAAC,8BAA8B,CAAC,SAAS;YACnD,EAAE,EAAE,IAAI,CAAC,8BAA8B,CAAC,OAAO;WAChD;UACD,IAAI;UACJ,MAAM,EAAE,YAAY;UACpB,UAAU,EAAE,SAAS;UACrB,aAAa,EAAE,MAAM;SACtB,CAAC,CAAC;OACJ;KACF;IAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACtB;GACF;EACM,MAAM,sBAAsB,CACjC,SAAiB,EACjB,OAAe,EACf,UAAkB,EAClB,QAAgB,EAChB,aAAuB,EACvB,QAAsC;IAEtC,IAAI;MACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC1D,IAAI,KAAK,EAAE;QACT,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,4CAA4C,KAAK,EAAE,EACnD;UACE,UAAU;UACV,SAAS;UACT,OAAO;UACP,SAAS,EAAE,CAAC;UACZ,SAAS,EAAE,CAAC;UACZ,QAAQ;UACR,YAAY,EAAE,QAAQ,CAAC,IAAI;UAC3B,aAAa;SACd,CACF,CAAC;QACF,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;UAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC;OAC1B;WAAM;QACL,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;OACxC;KACF;IAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;MACrB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;KACxB;GACF;EAEM,MAAM,YAAY,CAAC,QAAgB;IACxC,IAAI;MACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC1D,IAAI,KAAK,EAAE;QACT,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,iCAAiC,KAAK,EAAE,EACxC;UACE,QAAQ;SACT,CACF,CAAC;QACF,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;UAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;OACvB;KACF;IAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;MACrB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;KACxB;GACF;EAEM,MAAM,iBAAiB;IAC5B,IAAI;MACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC1D,IAAI,KAAK,EAAE;QACT,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,+CAA+C,KAAK,EAAE,EACtD;UACE,SAAS,EAAE;YACT,eAAe;YACf,iBAAiB;YACjB,oBAAoB;YACpB,sBAAsB;WACvB;SACF,CACF,CAAC;QACF,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;UAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpC;QACD,MAAM,GAAG,GAAU,IAAI,CAAC,SAAS,CAAC;QAClC,OAAO;UACL,WAAW,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,eAAe,CAAC;UAC9D,aAAa,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,iBAAiB,CAAC;UAClE,eAAe,EAAE,GAAG,CAAC,MAAM,CACzB,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,oBAAoB,CAC3C;UACD,iBAAiB,EAAE,GAAG,CAAC,MAAM,CAC3B,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,sBAAsB,CAC7C;SACF,CAAC;OACH;KACF;IAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;MACrB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;KACxB;GACF;EACM,MAAM,cAAc;IACzB,IAAI;MACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC1D,IAAI,KAAK,EAAE;QACT,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,+CAA+C,KAAK,EAAE,EACtD,EAAE,SAAS,EAAE,CAAC,wBAAwB,CAAC,EAAE,CAC1C,CAAC;QACF,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;UAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;OACvB;KACF;IAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;MACrB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;KACxB;GACF;EAEM,MAAM,SAAS,CAAC,MAAkB;IACvC,IAAI;MACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC1D,IAAI,KAAK,EAAE;QACT,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,8BAA8B,KAAK,EAAE,EACrC,MAAM,CACP,CAAC;QACF,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;UAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC;OACb;KACF;IAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;MACrB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;KACxB;GACF;EAEM,MAAM,WAAW,CAAC,KAAa;IACpC,IAAI;MACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC1D,IAAI,KAAK,EAAE;QACT,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,6BAA6B,KAAK,EAAE,EACpC;UACE,KAAK;SACN,CACF,CAAC;QACF,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;UAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;OACvB;WAAM;QACL,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;OAClC;KACF;IAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;MACrB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;KACxB;GACF;EACO,YAAY,CAClB,SAAiB,EACjB,OAAe,EACf,MAAc;IAEd,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;IACtC,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IAClC,MAAM,IAAI,GAAU,EAAE,CAAC;IAEvB,OAAO,SAAS,GAAG,OAAO,EAAE;MAC1B,IAAI,CAAC,IAAI,CAAC;QACR,IAAI,EAAE,SAAS,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,EAAE,MAAM;OACf,CAAC,CAAC;MACH,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;KAC5C;IAED,OAAO,IAAI,CAAC;GACb;EAEM,MAAM,QAAQ,CACnB,gBAAgB,EAChB,YAAqB,EACrB,QAAc,EACd,MAAY,EACZ,SAAS,EACT,WAAmB,EACnB,MAA6C,EAC7C,UAAkB,EAClB,QAAsC,EACtC,aAAsB,EACtB,YAAkB,EAClB,WAAiB,EACjB,KAAc;IAEd,IAAI;MACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC1D,IAAI,KAAK,EAAE;QACT,MAAM,WAAW,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,SAAS,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,KAAK,GAAQ;UACf,KAAK,EAAE,gBAAgB,CAAC,KAAK,IAAI,IAAI;UACrC,UAAU,EAAE,gBAAgB,CAAC,SAAS;UACtC,SAAS,EAAE,gBAAgB,CAAC,QAAQ;UACpC,UAAU,EAAE,gBAAgB,CAAC,SAAS;UACtC,IAAI,EAAE,IAAI;UACV,MAAM,EAAE,gBAAgB,CAAC,aAAa;UACtC,OAAO,EAAE,EAAE;UACX,GAAG,EAAE,IAAI;UACT,wBAAwB,EAAE,gBAAgB,CAAC,UAAU,IAAI,KAAK;SAC/D,CAAC;QACF,IAAI,gBAAgB,CAAC,EAAE,EAAE;UACvB,KAAK,mCAAQ,KAAK,KAAE,EAAE,EAAE,gBAAgB,CAAC,EAAE,GAAE,CAAC;SAC/C;QACD,MAAM,IAAI,GAAG;UACX,YAAY;UACZ,OAAO,EAAE;YACP,WAAW,EAAE,aAAa,IAAI,EAAE;YAChC,SAAS,EAAE,WAAW;YACtB,OAAO,EAAE,SAAS;YAClB,MAAM,EAAE,gBAAgB,CAAC,OAAO,IAAI,IAAI;YACxC,QAAQ,EAAE;cACR,EAAE,EAAE,UAAU;aACf;YACD,MAAM;YACN,QAAQ;YACR,OAAO,EAAE;cACP,IAAI,EAAE,WAAW,IAAI,gBAAgB,CAAC,mBAAmB;aAC1D;YACD,KAAK,EAAE,YAAY,IAAI,KAAK;YAC5B,KAAK,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM;cAC9B,QAAQ,EAAE;gBACR,EAAE,EAAE,IAAI,CAAC,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,gBAAgB;gBAC3B,aAAa,EAAE,IAAI;gBACnB,SAAS,EAAE,IAAI;gBACf,cAAc,EAAE,IAAI;gBACpB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,IAAI,EAAE,IAAI,CAAC,IAAI,GAAG,WAAW;eAC9B;cACD,QAAQ,EAAE;gBACR,EAAE,EAAE,IAAI,CAAC,UAAU;gBACnB,IAAI,EAAE,IAAI,CAAC,YAAY;gBACvB,iBAAiB,EAAE,IAAI;gBACvB,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,SAAS,EAAE,IAAI,CAAC,SAAS;eAC1B;cACD,IAAI,EAAE,EAAE,EAAE,EAAE,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;cAClC,SAAS,EAAE;gBACT,SAAS,EAAE,IAAI,CAAC,UAAU;gBAC1B,YAAY,EAAE,IAAI,CAAC,aAAa;gBAChC,UAAU,EAAE,IAAI;eACjB;cACD,SAAS,EAAE,WAAW;cACtB,OAAO,EAAE,SAAS;cAClB,KAAK,EAAE,IAAI;cACX,IAAI,EAAE,IAAI,CAAC,YAAY,CACrB,WAAW,EACX,SAAS,EACT,CAAC,IAAI,CAAC,IAAI,GAAG,WAAW,CACzB;cACD,KAAK,EAAE;gBACL,KAAK,EAAE,IAAI;gBACX,UAAU,EAAE,IAAI,CAAC,SAAS;gBAC1B,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,IAAI;gBAChB,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,IAAI;gBACZ,OAAO,EAAE,IAAI;gBACb,GAAG,EAAE,IAAI;gBACT,wBAAwB,EAAE,IAAI;eAC/B;aACF,CAAC,CAAC;WACJ;SACF,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACjC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAC/B,yBAAyB,KAAK,EAAE,EAChC,IAAI,CACL,CAAC;QACF,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;UAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpC;QACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,OAAO,IAAI,CAAC;OACb;WAAM;QACL,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;OAClC;KACF;IAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;MACrB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;KACxB;GACF;;;;;","names":[],"sources":["src/utils/booking.ts","src/services/booking.service.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  PhysicalRoomType,\r\n  MonthType,\r\n  CellType,\r\n  STATUS,\r\n} from \"../models/IBooking\";\r\nimport { dateDifference } from \"./utils\";\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(\r\n  physicalRoom: PhysicalRoomType[],\r\n  myBookings: any[],\r\n  stayStatus: { code: string; value: string }[]\r\n): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return \"\";\r\n  if (lastName !== null) {\r\n    return `${firstName ?? \"\"} , ${lastName ?? \"\"}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n    if (token) {\r\n      const { data } = await axios.post(\r\n        `/Get_Setup_Entries_By_TBL_NAME_Multi?Ticket=${token}`,\r\n        {\r\n          TBL_NAMES: [\"_STAY_STATUS\"],\r\n        }\r\n      );\r\n      return data.My_Result.map((d) => ({\r\n        code: d.CODE_NAME,\r\n        value: d.CODE_VALUE_EN,\r\n      }));\r\n    } else {\r\n      throw new Error(\"Invalid Token\");\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nconst status: Record<string, STATUS> = {\r\n  \"004\": \"BLOCKED\",\r\n  \"003\": \"BLOCKED-WITH-DATES\",\r\n  \"002\": \"BLOCKED\",\r\n  \"001\": \"IN-HOUSE\",\r\n};\r\n\r\nfunction getDefaultData(\r\n  cell: CellType,\r\n  stayStatus: { code: string; value: string }[]\r\n): any {\r\n  if ([\"003\", \"002\", \"004\"].includes(cell.STAY_STATUS_CODE)) {\r\n    // console.log(\"blocked cells\",cell);\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: cell.My_Block_Info.NOTES,\r\n      BALANCE: \"\",\r\n      NAME:\r\n        stayStatus.find((st) => st.code === cell.STAY_STATUS_CODE).value || \"\",\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: cell.DATE,\r\n      TO_DATE: cell.DATE,\r\n      NO_OF_DAYS: 1,\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === \"004\",\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n    };\r\n  }\r\n  //console.log(\"booked cells\",cell);\r\n  return {\r\n    ID: cell.booking.booking_nbr,\r\n    TO_DATE: cell.DATE,\r\n    FROM_DATE: cell.DATE,\r\n    NO_OF_DAYS: 1,\r\n    IS_EDITABLE: cell.booking.is_editable,\r\n    STATUS: status[cell.STAY_STATUS_CODE],\r\n    NAME: formatName(cell.room.guest.first_name, cell.room.guest.last_name),\r\n    PHONE: cell.booking.guest.mobile ?? \"\",\r\n    ENTRY_DATE: cell.booking.booked_on.date,\r\n    RATE: cell.room.total,\r\n    RATE_PLAN: cell.room.rateplan.name,\r\n    SPLIT_BOOKING: false,\r\n    RATE_PLAN_ID: cell.room.rateplan.id,\r\n    IDENTIFIER: cell.room.identifier,\r\n    RATE_TYPE: 1,\r\n    ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    GUEST: cell.booking.guest,\r\n    rooms: cell.booking.rooms,\r\n    TOTAL_PRICE: cell.room.total,\r\n    COUNTRY: cell.booking.guest.country_id,\r\n    FROM_DATE_STR: cell.booking.format.from_date,\r\n    TO_DATE_STR: cell.booking.format.to_date,\r\n  };\r\n}\r\n\r\nfunction updateBookingWithStayData(data: any, cell: CellType): any {\r\n  data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n  data.TO_DATE = cell.DATE;\r\n\r\n  if (cell.booking) {\r\n    const { arrival } = cell.booking;\r\n    Object.assign(data, {\r\n      ARRIVAL_TIME: arrival.description,\r\n    });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nfunction addOrUpdateBooking(\r\n  cell: CellType,\r\n  myBookings: any[],\r\n  stayStatus: { code: string; value: string }[]\r\n): void {\r\n  const index = myBookings.findIndex((booking) => booking.POOL === cell.POOL);\r\n\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  } else {\r\n    const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n    myBookings[index] = updatedData;\r\n  }\r\n}\r\n","import { DayData } from \"../models/DayType\";\r\nimport axios from \"axios\";\r\nimport {\r\n  BookingDetails,\r\n  IBlockUnit,\r\n  ICountry,\r\n  IEntries,\r\n  ISetupEntries,\r\n  MonthType,\r\n} from \"../models/IBooking\";\r\n\r\nimport {\r\n  convertDateToCustomFormat,\r\n  convertDateToTime,\r\n  dateToFormattedString,\r\n} from \"../utils/utils\";\r\nimport { getMyBookings } from \"../utils/booking\";\r\nimport { Day } from \"../models/booking.dto\";\r\n\r\nexport class BookingService {\r\n  public async getCalendarData(\r\n    propertyid: number,\r\n    from_date: string,\r\n    to_date: string\r\n  ): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token !== null) {\r\n        const { data } = await axios.post(\r\n          `/Get_Exposed_Calendar?Ticket=${token}`,\r\n          {\r\n            propertyid,\r\n            from_date,\r\n            to_date,\r\n          }\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const months: MonthType[] = data.My_Result.months;\r\n        const customMonths: { daysCount: number; monthName: string }[] = [];\r\n        const myBooking = await getMyBookings(months);\r\n        const days: DayData[] = months\r\n          .map((month) => {\r\n            customMonths.push({\r\n              daysCount: month.days.length,\r\n              monthName: month.description,\r\n            });\r\n            return month.days.map((day) => ({\r\n              day: convertDateToCustomFormat(\r\n                day.description,\r\n                month.description\r\n              ),\r\n              currentDate: convertDateToTime(\r\n                day.description,\r\n                month.description\r\n              ),\r\n              dayDisplayName: day.description,\r\n              rate: day.room_types,\r\n              unassigned_units_nbr: day.unassigned_units_nbr,\r\n              occupancy: day.occupancy,\r\n            }));\r\n          })\r\n          .flat();\r\n\r\n        return Promise.resolve({\r\n          ExceptionCode: null,\r\n          ExceptionMsg: \"\",\r\n          My_Params_Get_Rooming_Data: {\r\n            AC_ID: propertyid,\r\n            FROM: data.My_Params_Get_Exposed_Calendar.from_date,\r\n            TO: data.My_Params_Get_Exposed_Calendar.to_date,\r\n          },\r\n          days,\r\n          months: customMonths,\r\n          myBookings: myBooking,\r\n          defaultMonths: months,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  public async getBookingAvailability(\r\n    from_date: string,\r\n    to_date: string,\r\n    propertyid: number,\r\n    language: string,\r\n    room_type_ids: number[],\r\n    currency: { id: number; code: string }\r\n  ): Promise<BookingDetails> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token) {\r\n        const { data } = await axios.post(\r\n          `/Get_Exposed_Booking_Availability?Ticket=${token}`,\r\n          {\r\n            propertyid,\r\n            from_date,\r\n            to_date,\r\n            adult_nbr: 2,\r\n            child_nbr: 0,\r\n            language,\r\n            currency_ref: currency.code,\r\n            room_type_ids,\r\n          }\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data[\"My_Result\"];\r\n      } else {\r\n        throw new Error(\"Token doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getCountries(language: string): Promise<ICountry[]> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token) {\r\n        const { data } = await axios.post(\r\n          `/Get_Exposed_Countries?Ticket=${token}`,\r\n          {\r\n            language,\r\n          }\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token) {\r\n        const { data } = await axios.post(\r\n          `/Get_Setup_Entries_By_TBL_NAME_MULTI?Ticket=${token}`,\r\n          {\r\n            TBL_NAMES: [\r\n              \"_ARRIVAL_TIME\",\r\n              \"_BOOKING_SOURCE\",\r\n              \"_RATE_PRICING_MODE\",\r\n              \"_BED_PREFERENCE_TYPE\",\r\n            ],\r\n          }\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        const res: any[] = data.My_Result;\r\n        return {\r\n          arrivalTime: res.filter((e) => e.TBL_NAME === \"_ARRIVAL_TIME\"),\r\n          bookingSource: res.filter((e) => e.TBL_NAME === \"_BOOKING_SOURCE\"),\r\n          ratePricingMode: res.filter(\r\n            (e) => e.TBL_NAME === \"_RATE_PRICING_MODE\"\r\n          ),\r\n          bedPreferenceType: res.filter(\r\n            (e) => e.TBL_NAME === \"_BED_PREFERENCE_TYPE\"\r\n          ),\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBlockedInfo(): Promise<IEntries[]> {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token) {\r\n        const { data } = await axios.post(\r\n          `/Get_Setup_Entries_By_TBL_NAME_MULTI?Ticket=${token}`,\r\n          { TBL_NAMES: [\"_CALENDAR_BLOCKED_TILL\"] }\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async blockUnit(params: IBlockUnit) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token) {\r\n        const { data } = await axios.post(\r\n          `/Block_Exposed_Unit?Ticket=${token}`,\r\n          params\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getUserInfo(email: string) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token) {\r\n        const { data } = await axios.post(\r\n          `/GET_EXPOSED_GUEST?Ticket=${token}`,\r\n          {\r\n            email,\r\n          }\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return data.My_Result;\r\n      } else {\r\n        throw new Error(\"Invalid Token\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  private generateDays(\r\n    from_date: string,\r\n    to_date: string,\r\n    amount: number\r\n  ): Day[] {\r\n    const startDate = new Date(from_date);\r\n    const endDate = new Date(to_date);\r\n    const days: Day[] = [];\r\n\r\n    while (startDate < endDate) {\r\n      days.push({\r\n        date: startDate.toISOString().split(\"T\")[0],\r\n        amount: amount,\r\n      });\r\n      startDate.setDate(startDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n\r\n  public async bookUser(\r\n    bookedByInfoData,\r\n    assign_units: boolean,\r\n    fromDate: Date,\r\n    toDate: Date,\r\n    guestData,\r\n    totalNights: number,\r\n    source: { code: string; description: string },\r\n    propertyid: number,\r\n    currency: { id: number; code: string },\r\n    bookingNumber?: string,\r\n    defaultGuest?: any,\r\n    arrivalTime?: any,\r\n    pr_id?: number\r\n  ) {\r\n    try {\r\n      const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n      if (token) {\r\n        const fromDateStr = dateToFormattedString(fromDate);\r\n        const toDateStr = dateToFormattedString(toDate);\r\n        let guest: any = {\r\n          email: bookedByInfoData.email || null,\r\n          first_name: bookedByInfoData.firstName,\r\n          last_name: bookedByInfoData.lastName,\r\n          country_id: bookedByInfoData.countryId,\r\n          city: null,\r\n          mobile: bookedByInfoData.contactNumber,\r\n          address: \"\",\r\n          dob: null,\r\n          subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n        };\r\n        if (bookedByInfoData.id) {\r\n          guest = { ...guest, id: bookedByInfoData.id };\r\n        }\r\n        const body = {\r\n          assign_units,\r\n          booking: {\r\n            booking_nbr: bookingNumber || \"\",\r\n            from_date: fromDateStr,\r\n            to_date: toDateStr,\r\n            remark: bookedByInfoData.message || null,\r\n            property: {\r\n              id: propertyid,\r\n            },\r\n            source,\r\n            currency,\r\n            arrival: {\r\n              code: arrivalTime || bookedByInfoData.selectedArrivalTime,\r\n            },\r\n            guest: defaultGuest || guest,\r\n            rooms: guestData.map((data) => ({\r\n              roomtype: {\r\n                id: data.roomCategoryId,\r\n                name: data.roomCategoryName,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n                inventory: data.inventory,\r\n                rate: data.rate / totalNights,\r\n              },\r\n              rateplan: {\r\n                id: data.ratePlanId,\r\n                name: data.ratePlanName,\r\n                rate_restrictions: null,\r\n                variations: null,\r\n                cancelation: data.cancelation,\r\n                guarantee: data.guarantee,\r\n              },\r\n              unit: { id: pr_id || data.roomId },\r\n              occupancy: {\r\n                adult_nbr: data.adultCount,\r\n                children_nbr: data.childrenCount,\r\n                infant_nbr: null,\r\n              },\r\n              from_date: fromDateStr,\r\n              to_date: toDateStr,\r\n              notes: null,\r\n              days: this.generateDays(\r\n                fromDateStr,\r\n                toDateStr,\r\n                +data.rate / totalNights\r\n              ),\r\n              guest: {\r\n                email: null,\r\n                first_name: data.guestName,\r\n                last_name: null,\r\n                country_id: null,\r\n                city: null,\r\n                mobile: null,\r\n                address: null,\r\n                dob: null,\r\n                subscribe_to_news_letter: null,\r\n              },\r\n            })),\r\n          },\r\n        };\r\n        console.log(\"haida lbody\", body);\r\n        const { data } = await axios.post(\r\n          `/DoReservation?Ticket=${token}`,\r\n          body\r\n        );\r\n        if (data.ExceptionMsg !== \"\") {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data);\r\n        return data;\r\n      } else {\r\n        throw new Error(\"Invalid token\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n}\r\n"],"version":3}