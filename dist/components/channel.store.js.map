{"file":"channel.store.js","mappings":"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","names":[],"sources":["src/stores/channel.store.ts"],"sourcesContent":["import { IChannel, IExposedChannel, IMap } from '@/models/calendarData';\r\nimport { createStore } from '@stencil/store';\r\nexport interface IChannelSettings {\r\n  hotel_id: string;\r\n  hotel_title: string;\r\n}\r\nexport interface IChannelStore {\r\n  channels: IExposedChannel[];\r\n  connected_channels: IChannel[];\r\n  selectedChannel: IExposedChannel | null;\r\n  mappedChannels: IMap[];\r\n  isConnectedToChannel: boolean;\r\n  channel_settings: IChannelSettings | null;\r\n  property_id: number | null;\r\n}\r\nconst initialState: IChannelStore = {\r\n  channels: [],\r\n  selectedChannel: null,\r\n  mappedChannels: [],\r\n  connected_channels: [],\r\n  isConnectedToChannel: false,\r\n  channel_settings: null,\r\n  property_id: null,\r\n};\r\nexport const { state: channels_data, onChange: onChannelChange, dispose } = createStore<IChannelStore>(initialState);\r\n\r\nexport function selectChannel(channel_id: string) {\r\n  if (channel_id === '') {\r\n    channels_data.selectedChannel = null;\r\n    return;\r\n  }\r\n  const selectedChannel = channels_data.channels.find(c => c.id.toString() === channel_id);\r\n  if (selectedChannel) {\r\n    channels_data.selectedChannel = selectedChannel;\r\n  } else {\r\n    channels_data.selectedChannel = {\r\n      id: channel_id,\r\n      name: '',\r\n      properties: [],\r\n    };\r\n  }\r\n  setMappedChannel();\r\n}\r\nexport function updateChannelSettings(key: keyof IChannelSettings, value: string) {\r\n  if (!channels_data.channel_settings) {\r\n    channels_data.channel_settings = {\r\n      hotel_id: '',\r\n      hotel_title: '',\r\n    };\r\n  }\r\n  channels_data.channel_settings[key] = value;\r\n}\r\nexport function setMappedChannel() {\r\n  let selectedChannelMap = channels_data.connected_channels.find(c => c.channel.id.toString() === channels_data.selectedChannel.id.toString());\r\n  if (!selectedChannelMap) {\r\n    channels_data.mappedChannels = [];\r\n    return;\r\n  }\r\n  channels_data.mappedChannels = [...selectedChannelMap.map];\r\n}\r\nexport function resetStore() {\r\n  channels_data.selectedChannel = null;\r\n  channels_data.mappedChannels = [];\r\n  channels_data.isConnectedToChannel = false;\r\n  channels_data.channel_settings = null;\r\n}\r\nexport function addMapping(ir_id: string, fr_id: string, isRoomType: boolean) {\r\n  channels_data.mappedChannels.push({\r\n    channel_id: fr_id,\r\n    ir_id,\r\n    type: isRoomType ? 'room_type' : 'rate_plan',\r\n  });\r\n}\r\nexport function testConnection() {\r\n  // const hotelConnection = channels_data.selectedChannel.properties.find(property => property.id === 'd09e6374-1ebf-45e0-a130-64c8c9930987');\r\n  const hotelConnection = channels_data.selectedChannel.properties.find(property => property.id === channels_data.channel_settings.hotel_id);\r\n  if (!hotelConnection) {\r\n    return false;\r\n  }\r\n  channels_data.selectedChannel.property = hotelConnection;\r\n  if (channels_data.mappedChannels.length === 0) {\r\n    channels_data.mappedChannels.push({ ir_id: (channels_data.property_id ?? -1).toString(), channel_id: channels_data.channel_settings.hotel_id, type: 'property' });\r\n  }\r\n  channels_data.isConnectedToChannel = true;\r\n  return true;\r\n}\r\n\r\nexport function saveChannel() {\r\n  console.log(channels_data.channel_settings, channels_data.mappedChannels, channels_data.selectedChannel);\r\n}\r\nexport default channels_data;\r\n"],"version":3}